#
#	stndSrc.files - Files needed for the source installation
#
#	Copyright (c) Embedthis Software LLC, 2003-2010. All Rights Reserved.
#

SrcD=${BLD_TOP}
DestD=${BLD_SRC_PREFIX}
makeDir "${DestD}"
cpmod ${SrcD}/INSTALL.TXT
cpmod ${SrcD}/README.TXT
cpmod ${SrcD}/COPYRIGHT.TXT
cpmod ${SrcD}/LICENSE.TXT

patchFile "${DestD}/README.TXT"
patchFile "${DestD}/INSTALL.TXT"
patchFile "${DestD}/COPYRIGHT.TXT"
patchFile "${DestD}/LICENSE.TXT"

#
#	Make required directories
#
for type in obj bin lib
do
	DestD=${BLD_SRC_PREFIX}/${type}
	makeDir "${DestD}"
	#
	#	Create a dummy file for zip installs so the directory gets created
	#
	if [ $TASK = Remove ] ; then
		${RM} -f "${DestD}/.dummy"
	else
		> "${DestD}/.dummy"
	fi 
done

DestD=${BLD_SRC_PREFIX}/lib
makeDir "${DestD}"
if [ $TASK = Remove ] ; then
	${RM} -f "${DestD}/.dummy"
else
	> "${DestD}/.dummy"
fi

#
#	Primary configuration files
#
SrcD=${BLD_TOP}/build/bin
DestD=${BLD_SRC_PREFIX}/build/bin
makeDir "${DestD}"
cpmod ${SrcD}/config.guess "${DestD}" 755
cpmod ${SrcD}/config.sub "${DestD}" 755
cpmod ${SrcD}/bld "${DestD}" 755
cpmod ${SrcD}/makedep "${DestD}" 755
cpmod ${SrcD}/priv "${DestD}" 755
cpmod ${SrcD}/fakePriv "${DestD}" 755
cpmod ${SrcD}/Makefile "${DestD}" 644

SrcD=${BLD_TOP}/build
DestD=${BLD_SRC_PREFIX}/build
makeDir "${DestD}"
cpmod ${SrcD}/Makefile "${DestD}" 644
cpmod ${SrcD}/configure.${BLD_PRODUCT} "${DestD}" 755
for f in ${SrcD}/*.defaults ${SrcD}/*.config
do
	b=`basename $f`
	cpmod ${f} "${DestD}/${b}" 644
done

SrcD=${BLD_TOP}/build/make
DestD=${BLD_SRC_PREFIX}/build/make
makeDir "${DestD}"
cpmod ${SrcD}/Makefile.top "${DestD}" 644
cpmod ${SrcD}/make.rules "${DestD}" 644
cpmod ${SrcD}/make.ejs "${DestD}" 644
cpmod ${SrcD}/make.gcc "${DestD}" 644
cpmod ${SrcD}/make.java "${DestD}" 644

for os in CYGWIN LINUX WIN SOLARIS VXWORKS BREW BREWSIM MACOSX
do
	cpmod ${SrcD}/make.$os "${DestD}" 644
done

SrcD=${BLD_TOP}/build/config
DestD=${BLD_SRC_PREFIX}/build/config
makeDir "${DestD}"
for os in ${SrcD}/config.*
do
	f=`basename $os`
	cpmod ${SrcD}/$f "${DestD}" 755
done

#
#	Top level make files
#
SrcD=${BLD_TOP}
DestD=${BLD_SRC_PREFIX}
makeDir "${DestD}"
cpmod ${SrcD}/Makefile "${DestD}" 644
cpmod ${SrcD}/configure "${DestD}" 755

SrcD=${BLD_TOP}/bin
DestD=${BLD_SRC_PREFIX}/bin
makeDir "${DestD}"
cpmod ${SrcD}/Makefile "${DestD}" 644

SrcD=${BLD_TOP}/obj
DestD=${BLD_SRC_PREFIX}/obj
makeDir "${DestD}"
cpmod ${SrcD}/Makefile "${DestD}" 644

SrcD=${BLD_TOP}/lib
DestD=${BLD_SRC_PREFIX}/lib
makeDir "${DestD}"
cpmod ${SrcD}/Makefile "${DestD}" 644

#
#	Bootstrap files
#
SrcD=${BLD_TOP}/build/src
DestD=${BLD_SRC_PREFIX}/buld/src
makeDir "${DestD}"
cpmod ${SrcD}/Makefile "${DestD}" 644
cpmod ${SrcD}/posixRemap.h
cpmod ${SrcD}/getopt.c
cpmod ${SrcD}/getopt.h
cpmod ${SrcD}/edep.c
cpmod ${SrcD}/dumpext.c
cpmod ${SrcD}/removeFiles.c
cpmod ${SrcD}/dsi.c
cpmod ${SrcD}/incPatch.c
cpmod ${SrcD}/pp.c

#
#	Releases directory for "make package"
#
SrcD=${BLD_TOP}/releases/${BLD_PRODUCT}
DestD=${BLD_SRC_PREFIX}/releases/${BLD_PRODUCT}
makeDir "${DestD}"
if [ $TASK = Remove ] ; then
	${RM} -f "${DestD}/.dummy"
else
	> "${DestD}/.dummy"
fi 


SrcD=${BLD_TOP}/build/bin
DestD="${BLD_SRC_PREFIX}/build/bin"
makeDir "${DestD}"
cpmod ${SrcD}/makeInstall "${DestD}" 755
cpmod ${SrcD}/makePackage "${DestD}" 755
cpmod ${SrcD}/makePackage.common
cpmod ${SrcD}/makeDebPackage
cpmod ${SrcD}/makeDmgPackage
cpmod ${SrcD}/makeRPMPackage
cpmod ${SrcD}/makeTarPackage
cpmod ${SrcD}/makeWinPackage
cpmod ${SrcD}/mkdmg "${DestD}" 755
cpmod ${SrcD}/priv "${DestD}" 755
cpmod ${SrcD}/fakePriv "${DestD}" 755


SrcD=${BLD_TOP}/package
DestD="${BLD_SRC_PREFIX}/package"
makeDir "${DestD}"
cpmod ${SrcD}/Makefile "${DestD}" 644
cpmod ${SrcD}/remove.sh "${DestD}" 755

SrcD=${BLD_TOP}/package/files
DestD="${BLD_SRC_PREFIX}/package/files"
makeDir "${DestD}"
cpmod ${SrcD}/stndBin.files
cpmod ${SrcD}/stndDev.files
cpmod ${SrcD}/stndDoc.files
cpmod ${SrcD}/stndRel.files
cpmod ${SrcD}/stndSrc.files
