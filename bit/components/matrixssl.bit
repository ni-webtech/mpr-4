/*
    matrixssl.bit -- OpenSSL component search
 */

const ver = 'latest'
let cfg = {}
let path = spec.components.matrixssl.path

if (spec.OS == 'WIN') {
    let search = path ? ([path]) : [spec.directories.extensions.join('matrixssl', ver, 'src/Release') ]
    let lib = probe('libmatrixssl.dll', {fullpath: true, search: search})
    let libdir = lib.parent.parent
    search = path ? ([path]) : [spec.directories.extensions.join('matrixssl', ver) ]
    let incdir = probe('matrixSsl.h', {search: search})
    cfg = {
        dir: libdir.parent.parent,
        path: lib,
        includes: [ incdir.join(ver) ],
        libraries: [ 'libmatrixssl.a' ],
        linker: [ '-L' + libdir ],
        import: [ libdir.join('src/Release', 'libmatrixssl.a') ]
    }

} else if (spec.OS == 'MACOSX') {
    let search = path ? ([path]) : [spec.directories.extensions.join('matrixssl', ver, 'src') ]
    let lib = probe('libmatrixssl.dylib', {fullpath: true, search: search})
    let libdir = lib.parent.parent
    search = path ? ([path]) : [spec.directories.extensions.join('matrixssl', ver) ]
    let incdir = probe('matrixSsl.h', {search: search})
    cfg = {
        dir: libdir,
        path: lib,
        includes: [ incdir ],
        libraries: [ 'libmatrixssl.dylib' ],
        linker: [ '-L' + lib.parent ],
        import: libdir.glob('libmatrixssl.dylib')
    }

} else {
    let search = path ? ([path]) : [spec.directories.extensions.join('matrixssl', ver, 'src')]
    let libdir = probe('libmatrixssl.so', {fullpath: true, search: search})
    search = path ? ([path]) : [spec.directories.extensions.join('matrixssl', ver) ]
    let incdir = probe('matrixSsl.h', {search: search})
    cfg = {
        dir: libdir,
        path: libdir.parent,
        includes: [ incdir ],
        libraries: [ 'libmatrixssl.so' ],
        linker: [ '-L' + libdir ],
        import: libdir.glob('libmatrixssl*.so')
    }
}

let template = {components: { matrixssl: cfg}}
bit(template)
