/*
    compiler.bit - Compile component for Bit
 */

let cc = probe('cc', {fullpath: true})
bit({components: { compiler: { path: cc }}})

function compile(command: String, contents: String = null): Boolean {
    //  MOB - what dir for temp file
    let file
    if (contents) {
        file = Path('/tmp/bit-' + App.pid + '.c')
        if (spec.OS == 'VXWORKS') {
            contents = '#define _VSB_CONFIG_FILE "vsbConfig.h\n' + contents
        }
        file.write(contents + '\n')
        command += ' -c ' + file
    }
    command = '' + cc + ' ' + command
    let cmd
    try {
        cmd = Cmd(command)
        if (cmd.status != 0) {
            App.log.debug(2, cmd.error)
        }
    } finally {
        if (file) {
            file.remove()
            file.basename.replaceExt('o').remove()
        }
    }
    return cmd.status == 0
}

/*
    Test compiler to determine what switches are supported
 */
if (spec.LIKE == 'POSIX') {
    let settings = {}
    //  MOB -- move -Werror -Wall into cc above
    //  MOB - if env CFLAGS has -mtune=xxx then it should be used instead
    settings.hasDoubleBraces = compile('-Werror -Wall', 
        '#include <stdarg.h>\nva_list d = {{0}};')
    settings.hasMtune = compile('-Werror -mtune generic', '')
    settings.hasStackProtector = compile('-Werror -Wall -fno-stack-protector', '')
    settings.hasSync = compile('-Werror -Wall',
        '#include <stdio.h>\nint main() { __sync_synchronize(); return 0; }')
    settings.warnUnused = compile('-Werror -Wall -Wno-unused-result',
        '#include <stdio.h>\n#include <stdlib.h>\nint main() { realloc(0, 1024); return 0; }')
    settings.warn64to32 = compile('-Werror -Wall -Wshorten-64-to-32', '')

    if (spec.OS != 'VXWORKS') {
        settings.hasDynLoad = compile('-Werror -Wall',
            '#include <stdio.h>\n#include <dlfcn.h>\nint main() { dlopen(\"test.so\", 0); return 0; }')
        settings.hasLibEdit = compile('-Werror -Wall',
            '#include <histedit.h>\nint main() { history_init(); return 0; }')
        settings.hasMmu = compile('-Werror -Wall',
            '#include <stdio.h>\n#include <unistd.h>\nint main() { fork(); return 0; }')
        settings.hasPam = compile('-Werror -Wall',
            'extern pam_start(); \nint main() { void *x = pam_start; return 0; }')
        settings.hasSyncCas = compile('-Werror -Wall',
            '#include <stdio.h>\nint main() { void *ptr; __sync_bool_compare_and_swap(&ptr, ptr, ptr); return 0; }')
        settings.hasUnnamedUnions = compile('-Werror -Wall', 
            '#include <stdio.h>\nint main() { struct test { union { int x; int y; };}; return 0; }')
    }
    bit({ settings: settings })
}
