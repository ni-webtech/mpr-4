/*
    openssl.bit -- OpenSSL component search
 */

//  MOB - does this become global?
const ver = 'latest'
let path = spec.components.openssl.path
let template = {components: { openssl: {}}

if (spec.OS == 'WIN') {
    let search = path ? [path] : [spec.directories.extensions.join('openssl', ver) ]
    let libdir = probe('out32dll/libeay32.dll', search)
    let outdir = libpath.join('out32dll')
    template.compiler = [ '-I' + libpath.join('inc32') ]
    template.linker = [ 'libeay32', 'ssleay32' ]
    template.import = [ outdir.join('libeay32.dll) outdir.join('ssleay32.dll') ]

} else if (spec.OS == 'CYGWIN') {
    let search = path ? [path] : ['/usr/lib' ]
    let libdir = probe('libcrypto.a', search)
    template.compiler = [ '-I/usr/lib/include' ]
    template.linker = [ 'libeay32', 'ssleay32' ]
    template.import = [ '/usr/lib/libssl.a', '/usr/lib/libcrypto.a' ]

} else if (spec.OS == 'MACOSX') {
    let search = path ? [path] : [spec.directories.extensions.join('openssl', ver), '/usr/lib' ]
    let libdir = probe('libcrypto.dylib', search)
    search = path ? [path] : [spec.directories.extensions.join('openssl', ver, 'include'), '/usr/include' ]
    let incdir = probe('openssl/ssl.h', search)

    template.compiler = [ '-I' + incdir ]
    template.linker = [ 'ssl', 'crypto' ]
    template.import = libdir.glob('libssl*.dylib') + libdir.glob('libcrypto*.dylib')

} else {
    let search = path ? [path] : [spec.directories.extensions.join('openssl', ver), '/usr/lib', '/lib' ] + 
        Path('/lib').glob('*-linux-gnu')
    let libdir = probe('libcrypto.so', search)
    search = path ? [path] : [spec.directories.extensions.join('openssl', ver, 'include'), '/usr/include' ]
    let incdir = probe('openssl/ssl.h', search)
    template.compiler = [ '-I' + incdir ]
    template.linker = [ 'ssl', 'crypto' ]
    template.import = libdir.glob('libssl*.dylib*') + libdir.glob('libcrypto*.dylib*')
}
bit(template)
