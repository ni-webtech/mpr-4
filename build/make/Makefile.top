#
#	Makefile.top -- Top level Makefile for the Embedthis Build System
#					Included by $(BLD_TOP)/Makefile only.
#
#	Copyright (c) Embedthis Software LLC, 2003-2011. All Rights Reserved.
#
#
#	Standard Make targets supported are:
#	
#		make 						# Does a "make compile"
#		make clean					# Removes generated objects
#		make compile				# Compiles the source
#		make depend					# Generates the make dependencies
#		make test 					# Runs unit tests
#		make leakTest 				# Runs memory leak tests
#		make loadTest 				# Runs load tests
#		make benchmark 				# Runs benchmarks
#		make package				# Creates an installable package
#
#	Additional targets for this makefile:
#
#		make newbuild				# Increment the build number and rebuild
#
#	Installation targets. Use "make DESTDIR=myDir" to do a custom local
#		install:
#
#		make install				# Call install-binary
#		make install-binary			# Install binary files
#		make install-dev			# Install development libraries and headers
#
#	To remove, use make uninstall-ITEM, where ITEM is a component above.
#

SHELL		= bash
BUILD_DEPTH	?= 2
BLD_TOP		= .
FIRST		= first
IMG_NAME	= $(BLD_PRODUCT)-$(BLD_VERSION)-$(BLD_NUMBER)
SRC_NAME	= $(BLD_PRODUCT)-src-$(BLD_VERSION)-$(BLD_NUMBER)
BASE_NAME	= $(BLD_PRODUCT)-$(BLD_VERSION)-$(BLD_NUMBER)-$(BLD_HOST_DIST)-$(BLD_HOST_OS)-$(BLD_HOST_CPU)
PACKS		= binary source
PKG_DIR		= $(BLD_TOP)/out/staging
INS_WITH	= --with-conf="$(CONF)" --with-testweb 

#
#	Conditionally read in the Make rules and templates. The buildConfig.h
#	file will not exist if configure has not been run. In that case, we must
#	warn the user to run configure first. 
#
ifeq ($(shell [ -f .makedep ] && echo found),found)
	include		.makedep
	MAKE		:= $(BLD_MAKE)
	PRE_DIRS	= $(BLD_DIRS)
else
	#
	#	Configure has not yet been run
	#
all clean clobber compile depend package test projects: always
	@if [ "$(UCLINUX_BUILD_USER)" = 1 ] ; then \
		echo ; \
	else \
		echo -e "\nMust run configure first\n" >&2 ; \
		exit 2 ; \
	fi

.PHONY: always
endif

diff import:
	for dep in $(DEPS) ; do \
		$(BLD_TOOLS_DIR)/syncup --$@ ../$$dep/out/releases/$$dep-combo.tgz ; \
	done
	echo

sync:
	for dep in $(DEPS) ; do \
		$(BLD_TOOLS_DIR)/syncup --$@ ../$$dep/out/releases/$$dep-combo.tgz ; \
	done
	for f in $(BLD_IMPORTS) ; do \
		eval f="$${f}" ; \
		ext=".$${f##*.}" ; \
		base="$${f##*/}" ; \
		if [ ! -f "$${f}" ] ; then \
			echo "Can't find $${f} to import" ; \
			exit 255 ; \
		elif [ "$${ext}" = ".h" ] ; then \
			rm -f "$(BLD_INC_DIR)/$${base}" ; \
			cp "$${f}" "$(BLD_INC_DIR)"; \
		elif [ "$${ext}" = "$(BLD_SHOBJ)" ] ; then \
			QUIET=1 $(BLD_TOOLS_DIR)/getlib $${f} ; \
		elif [ "$${ext}" = ".mod" -o "$${ext}" = ".a" ] ; then \
			if [ "$(BLD_OS)" = WIN ] ; then \
				cp "$${f}" "$(BLD_BIN_DIR)"; \
			else \
				cp "$${f}" "$(BLD_LIB_DIR)"; \
			fi ; \
		else \
			cp "$${f}" "$(BLD_BIN_DIR)"; \
		fi ; \
	done
	echo

#
#	Check for the existing of the dynamic dependancy files (.makedep)
#
.PRECIOUS	: $(BLD_TOP)/build/src/.makedep

$(BLD_TOP)/build/src/.makedep: $(BLD_OUT_DIR)/inc/buildConfig.h
	echo -e "\n  # Making dynamic makefile dependancies\n"
	find . -name '*.h' | xargs cp "{}" $(BLD_INC_DIR)
	$(MAKE) TRACE=$(TRACE) --no-print-directory depend clean

#
#	Ensure the build tools are built first
#
$(BLD_TOOLS_DIR)/edep$(BLD_EXE): 
	T=$(BLD_TOOLS_DIR)/src; $(DO_RECURSE)

#
#	If publisher build, always do a combo build as part of the final compile 
#
compileFinal: 
	[ -f .publisher ] && $(MAKE) TRACE=$(TRACE) --no-print-directory packageCombo ; true

dependExtra:
	[ ! -L extensions ] && ln -s ../packages extensions ; true

#
#	Top level test targets to test installing and removing packages
#
testExtra::
	if [ "$(BUILD_DEPTH)" -ge 5 ] ; then \
		$(MAKE) test-projects ; \
	fi
	if [ "$(BUILD_DEPTH)" -ge 5 ] ; then \
		$(MAKE) test-installed ; \
		$(MAKE) uninstall ; \
		$(MAKE) test-removed ; \
		$(MAKE) test-install-package ; \
		$(MAKE) test-installed ; \
		$(MAKE) test-uninstall-package ; \
		$(MAKE) test-removed ; \
		$(MAKE) test-install-native-package ; \
		$(MAKE) test-installed ; \
		$(MAKE) test-uninstall-native-package ; \
		$(MAKE) test-removed ; \
	fi

#	MOB - add Xcode
test-projects:
ifeq    ($(BLD_HOST_OS),WIN)
	if [ "$(BUILD_DEPTH)" -ge 3 ] ; then \
		$(BLD_TOOLS_DIR)/nativeBuild ; \
	fi
endif

test-install-package:
	name="$(BASE_NAME).tar.tar.gz" ; \
	tar -C /tmp xvfz $(BLD_OUT_DIR)/releases/$$name ; \
	priv "$(BLD_PRODUCT)_HEADLESS=1 ./install" ; \

test-uninstall-package:
	name="$(BASE_NAME).tar.tar.gz" ; \
	tar -C /tmp xvfz $(BLD_OUT_DIR)/releases/$$name ; \
	priv "$(BLD_PRODUCT)_HEADLESS=1 ./uninstall" ; \

test-install-native-package:
	if [ $(BLD_HOST_OS) = WIN ] ; then \
		rm -fr "$(PKG_DIR)/*" ; \
		name="$(BASE_NAME).exe.zip" ; \
		cp WIN/unattended.ans $(BLD_OUT_DIR)/releases/$$name "$(PKG_DIR)" ; cd "$(PKG_DIR)" ; \
		unzip -q -o $$name ; \
		echo "Dir=$(PKG_DIR)" >>unattended.ans ; \
		./$(BASE_NAME).exe /loadinf=/tmp/unattended.ans /silent ; \
	elif [ $(BLD_HOST_OS) = MACOSX ] ; then \
		hdiutil eject /Volumes/$(BLD_PRODUCT)-$(BLD_VERSION) >/dev/null 2>&1 ; \
		hdid $(BLD_OUT_DIR)/releases/$(BASE_NAME).dmg >/dev/null ; \
		priv installer -package /Volumes/$(BLD_PRODUCT)-$(BLD_VERSION)/$(BLD_PRODUCT).mpkg -target /; \
		hdiutil eject /Volumes/$(BLD_PRODUCT)-$(BLD_VERSION) >/dev/null 2>&1 ; \
	else \
		name="$(BASE_NAME).tar.tar.gz" ; \
		tar -C /tmp xvfz $(BLD_OUT_DIR)/releases/$$name ; \
		priv $(BLD_PRODUCT)_HEADLESS=1 ./install ; \
	fi

test-uninstall-native-package:
	if [ $(BLD_HOST_OS) = WIN ] ; then \
		if [ ! -x "$(PKG_DIR)/unins000.exe" ] ; then \
			echo "Can't find $(PKG_DIR)/unins000.exe to uninstall" ; \
			exit 255 ; \
		fi ; \
		"$(PKG_DIR)/unins000.exe" /silent ; \
		rm -fr "$(PKG_DIR)/*" ; \
	else \
		name="$(BASE_NAME).tar.tar.gz" ; \
		tar -C xvfz $(BLD_OUT_DIR)/releases/$$name ; \
		priv "$(BLD_PRODUCT)_HEADLESS=1 ./uninstall" ; \
	fi

test-installed:
	complete=1 ; \
	for dir in $(BLD_CFG_PREFIX) $(BLD_BIN_PREFIX) $(BLD_DOC_PREFIX) $(BLD_INC_PREFIX) $(BLD_JEM_PREFIX) \
		$(BLD_LIB_PREFIX) $(BLD_LOG_PREFIX) $(BLD_MAN_PREFIX) $(BLD_PRD_PREFIX) \
		$(BLD_VER_PREFIX) $(BLD_WEB_PREFIX) ; \
	do \
		if [ ! -x $$dir ] ; then \
			echo Missing directory: $$dir ; \
			complete=0 ; \
		fi ; \
	done ; \
	[ $$complete = 0 ] && exit 255 ; \
	port=$(BLD_HTTP_PORT) ; \
	http -q $$port/index.html ; \
	http -q $$port/test/test.php ; \
	http -q $$port/test/test.cgi ; \
	http -q $$port/test/test.pl ; \
	http -q $$port/test/test.py ; \
	echo Installed
	#http -q $$port/test/test.ejs

test-removed:
	partial=0 ; \
	for dir in $(BLD_CFG_PREFIX) $(BLD_BIN_PREFIX) $(BLD_DOC_PREFIX) $(BLD_INC_PREFIX) $(BLD_JEM_PREFIX) \
		$(BLD_LIB_PREFIX) $(BLD_LOG_PREFIX) $(BLD_MAN_PREFIX) $(BLD_PRD_PREFIX) \
		$(BLD_VER_PREFIX) $(BLD_WEB_PREFIX) ; \
	do \
		if [ -x $$dir ] ; then \
			partial=1 ; \
			echo Directory present: $$dir ; \
		fi ; \
	done ; \
	[ $$partial = 1 ] && exit 255 ; \
	echo Removed

cleanExtra:
	[ "$(_RECURSIVE_)" = "" ] && \
		$(MAKE) -S --no-print-directory BUILDING_NATIVE=1 TRACE=$(TRACE) _RECURSIVE_=1 -C . clean ; true
	rm -f $(BLD_OUT_DIR)/releases/*

clobberExtra:
	rm -fr $(BLD_OUT_DIR)

deploy: deploy-binary

deploy-%:
	packs=$* ; [ "$$packs" = "" ] && packs="binary dev"; \
	if [ "$$ROOT_DIR" = "" ] ; then echo -n "Enter deployment directory : " ; read ROOT_DIR ; fi ; \
	priv OPTIONS=$(OPTIONS) QUIET=$(QUIET) TRACE=$(TRACE) $(BLD_TOP)/build/bin/makeInstall \
		$$BROWSER --root=$$ROOT_DIR --bare --install --with-conf="$(CONF)" pre $$packs post ; \

install: install-binary

install-%:
	packs=$* ; [ "$$packs" = "" ] && packs="binary dev"; \
	[ "$$packs" = "binary dev" ] && BROWSER=--browser ; \
	priv OPTIONS=$(OPTIONS) QUIET=$(QUIET) TRACE=$(TRACE) $(BLD_TOP)/build/bin/makeInstall \
		$$BROWSER --root=$(ROOT_DIR) --install $(INS_WITH) pre $$packs post

uninstall: uninstall-binary

uninstall-%:
	packs=$* ; [ "$$packs" = "" ] && packs="binary dev" ; \
	priv OPTIONS=$(OPTIONS) QUIET=$(QUIET) TRACE=$(TRACE) $(BLD_TOP)/build/bin/makeInstall \
		--root=$(ROOT_DIR) --remove $(INS_WITH) pre $$packs post
	
combo packageCombo:
	$(BLD_TOP)/build/bin/makeInstall --root=$(PKG_DIR) --package combo && \
			$(BLD_TOOLS_DIR)/makePackage --combo --root=$(PKG_DIR) combo

flat packageFlat:
	$(BLD_TOP)/build/bin/makeInstall --root=$(PKG_DIR) --package flat && \
	$(BLD_TOOLS_DIR)/makePackage --combo --root=$(PKG_DIR) flat

#
#	Use makePackage --keep to preserve the out/staging area
#
packageRelease:
	if [ "$(BUILD_DEPTH)" -ge 2 -a -f package/binary.es ] ; then \
		export OPTIONS=$(OPTIONS) TRACE=$(TRACE) ; \
		fakePriv "$(BLD_TOP)/build/bin/makeInstall --root=$(PKG_DIR) $(INS_WITH) --package $(PACKS) && \
			$(BLD_TOOLS_DIR)/makePackage $(KEEP) --root=$(PKG_DIR) $(PACKS)" ; \
	else \
		$(call log) "[INFO]" "Packaging skipped at build depth $(BUILD_DEPTH)" ; \
	fi

package-only:
	fakePriv "$(BLD_TOOLS_DIR)/makePackage --root=$(PKG_DIR) $(PACKS)"

upload:
	if [ "$(BUILD_DEPTH)" -lt 2 ] ; then \
		$(call log) "[INFO]" "Skip upload for BUILD_DEPTH $(BUILD_DEPTH)"; \
	else \
		if [ "$(BUILD_UPLOAD)" = "" ] ; then \
			echo "Can't upload: missing a BUILD_UPLOAD authorization key" >&2; \
			exit 2 ; \
		fi ; \
		cd $(BLD_OUT_DIR)/releases >/dev/null 2>&1 ; \
		if ls $(IMG_NAME)* >/dev/null 2>&1 ; then \
			for name in $(IMG_NAME)* md5-$(IMG_NAME)* ; do \
				chmod 664 $$name ; \
				echo http --upload --form "server=`hostname`&key=$(BUILD_KEY)" $$name $(BUILD_UPLOAD); \
				http -q --upload --form "server=`hostname`&key=$(BUILD_KEY)" $$name $(BUILD_UPLOAD); \
			done ; \
		fi ; \
		if [ "$(BUILD_UPLOAD_SOURCE)" = "true" ] ; then \
			cd $(BLD_OUT_DIR)/releases >/dev/null 2>&1 ; \
			if ls $(IMG_NAME)* >/dev/null 2>&1 ; then \
				for name in $(SRC_NAME)* md5-$(SRC_NAME)* ; do \
					chmod 664 $$name ; \
					echo http --upload --form "server=`hostname`&key=$(BUILD_KEY)" $$name $(BUILD_UPLOAD); \
					http -q --upload --form "server=`hostname`&key=$(BUILD_KEY)" $$name $(BUILD_UPLOAD); \
				done ; \
			fi ; \
		fi ; \
	fi

version:
	echo $(BLD_VERSION)-$(BLD_NUMBER)
