#
#	Makefile.top -- Top level Makefile for the Embedthis Build System
#					Included by $(BLD_TOP)/Makefile only.
#
#	Copyright (c) Embedthis Software LLC, 2003-2012. All Rights Reserved.
#
#
#	Standard Make targets supported are:
#	
#		make 						# Does a "make compile"
#		make clean					# Removes generated objects
#		make compile				# Compiles the source
#		make depend					# Generates the make dependencies
#		make test 					# Runs unit tests
#		make package				# Creates an installable package
#
#	Additional targets for this makefile:
#
#		make newbuild				# Increment the build number and rebuild
#
#	Installation targets. Use "make DESTDIR=myDir" to do a custom local
#		install:
#
#		make install				# Call install-binary
#
#	To remove, use make uninstall-ITEM, where ITEM is a component above.
#

SHELL		= bash
BUILD_DEPTH	?= 2
BLD_TOP		= .
FIRST		= first
IMG_NAME	= $(BLD_PRODUCT)-$(BLD_VERSION)-$(BLD_NUMBER)
SRC_NAME	= $(BLD_PRODUCT)-src-$(BLD_VERSION)-$(BLD_NUMBER)
PACKS		= binary source
STAGE_DIR	= $(BLD_TOP)/out/staging
COMBO_DIR	= $(BLD_TOP)/out/combo
FLAT_DIR	= $(BLD_TOP)/out/flat
PKG_DIR		= $(BLD_TOP)/out/pkg
INS_WITH	= --with-conf="$(CONF)" --with-testweb 

.PHONY: always version diff import deploy upload

#
#	Conditionally read in the Make rules and templates. The buildConfig.h
#	file will not exist if configure has not been run. In that case, we must
#	warn the user to run configure first. 
#
ifeq ($(shell [ ! -f .makedep ] && echo missing),missing)
all compile depend clean clobber test package:
%::
	echo -e "\nMust run configure first\n" >&2 ; exit 2
else 

include out/inc/buildConfig.h
MAKE    := $(BLD_MAKE)

ifeq ($(shell [ -f out/.needDepend ] && echo found),found)
all compile depend clean clobber test package:
%::
	@rm -f out/.needDepend ; \
	makedep ; \
    printf "%12s %s\n" [Generate] Dependencies ; \
	$(MAKE) -S --no-print-directory BUILDING_CROSS=1 BUILDING_DEV=1 BUILDING_TARGET=1 depend ; echo ; \
	$(MAKE) -S --no-print-directory
else
    include .makedep
endif
endif

diff import:
	for dep in $(DEPS) ; do \
		$(BLD_TOOLS_DIR)/syncup --$@ ../$$dep/out/releases/$$dep-combo.tgz ; \
	done
	echo

sync:
	for dep in $(DEPS) ; do \
		$(BLD_TOOLS_DIR)/syncup --$@ ../$$dep/out/releases/$$dep-combo.tgz ; \
	done
	for f in $(BLD_IMPORTS) ; do \
		eval f="$${f}" ; \
		ext=".$${f##*.}" ; \
		base="$${f##*/}" ; \
		if [ ! -f "$${f}" ] ; then \
			echo "Can't find $${f} to import" ; \
			exit 255 ; \
		elif [ "$${ext}" = ".h" ] ; then \
			rm -f "$(BLD_INC_DIR)/$${base}" ; \
			cp "$${f}" "$(BLD_INC_DIR)"; \
		elif [ "$${ext}" = "$(BLD_SHOBJ)" ] ; then \
			QUIET=1 $(BLD_TOOLS_DIR)/getlib $${f} ; \
		elif [ "$${ext}" = ".mod" -o "$${ext}" = ".a" ] ; then \
			if [ "$(BLD_OS)" = WIN ] ; then \
				cp "$${f}" "$(BLD_BIN_DIR)"; \
			else \
				cp "$${f}" "$(BLD_LIB_DIR)"; \
			fi ; \
		else \
			cp "$${f}" "$(BLD_BIN_DIR)"; \
		fi ; \
	done
	echo

#
#	If publisher build, always do a combo build as part of the final compile 
#
compileFinal: 
	if [ -f .publisher -a "$(BUILDING_TARGET)" = 1 ] ; then \
        echo ; \
        $(MAKE) TRACE=$(TRACE) --no-print-directory packageCombo ; true ; \
    fi

dependExtra:
	$(call log) "[INFO]" "Generate dependencies"
	[ ! -L extensions ] && ln -s ../packages extensions ; true

cleanExtra:
	if [ "$(_RECURSIVE_)" = "" ] ; then \
        $(call log) "[INFO]" "Clean intermediates" ; \
		$(MAKE) -S --no-print-directory BUILDING_DEV=1 TRACE=$(TRACE) _RECURSIVE_=1 -C . clean ; true ; \
    fi
	rm -f $(BLD_OUT_DIR)/releases/*

clobberExtra:
	rm -fr $(BLD_OUT_DIR)

deploy: deploy-binary

deploy-%:
	true
ifneq ($(BLD_CROSS),1)
	packs=$* ; [ "$$packs" = "" ] && packs="binary dev"; \
	if [ "$$ROOT_DIR" = "" ] ; then echo -n "Enter deployment directory : " ; read ROOT_DIR ; fi ; \
	priv OPTIONS=$(OPTIONS) QUIET=$(QUIET) TRACE=$(TRACE) $(BLD_TOP)/build/bin/makeInstall \
		$$BROWSER --root=$$ROOT_DIR --bare --install --with-conf="$(CONF)" pre $$packs post
endif

install: install-binary

install-%:
	true
ifneq ($(BLD_CROSS),1)
	packs=$* ; [ "$$packs" = "" ] && packs="binary dev"; \
	[ "$$packs" = "binary dev" ] && BROWSER=--browser ; \
	priv OPTIONS=$(OPTIONS) QUIET=$(QUIET) TRACE=$(TRACE) $(BLD_TOP)/build/bin/makeInstall \
		$$BROWSER --root=$(ROOT_DIR) --install $(INS_WITH) pre $$packs post
endif

uninstall: uninstall-binary

uninstall-%:
	true
ifneq ($(BLD_CROSS),1)
	packs=$* ; [ "$$packs" = "" ] && packs="binary dev" ; \
	priv OPTIONS=$(OPTIONS) QUIET=$(QUIET) TRACE=$(TRACE) $(BLD_TOP)/build/bin/makeInstall \
		--root=$(ROOT_DIR) --remove $(INS_WITH) pre $$packs post
endif
	
combo packageCombo:
	$(BLD_TOP)/build/bin/makeInstall --root=$(COMBO_DIR) --package combo && \
			$(BLD_TOOLS_DIR)/makePackage --combo $(KEEP) --root=$(COMBO_DIR) combo

flat packageFlat:
	$(BLD_TOP)/build/bin/makeInstall --root=$(FLAT_DIR) --package flat && \
	$(BLD_TOOLS_DIR)/makePackage --combo $(KEEP) --root=$(FLAT_DIR) flat

#
#	Use makePackage --keep to preserve the out/pkg
#
packageRelease:
	if [ "$(BUILD_DEPTH)" -ge 2 -a -f package/binary.es ] ; then \
		export OPTIONS=$(OPTIONS) TRACE=$(TRACE) ; \
		fakePriv "$(BLD_TOP)/build/bin/makeInstall --root=$(PKG_DIR) $(INS_WITH) --package $(PACKS) && \
			$(BLD_TOOLS_DIR)/makePackage $(KEEP) --root=$(PKG_DIR) $(PACKS)" ; \
	else \
		$(call log) "[INFO]" "Packaging skipped at build depth $(BUILD_DEPTH)" ; \
	fi

package-only:
	fakePriv "$(BLD_TOOLS_DIR)/makePackage --root=$(PKG_DIR) $(PACKS)"

upload:
	if [ "$(BUILD_DEPTH)" -lt 2 ] ; then \
		$(call log) "[INFO]" "Skip upload for BUILD_DEPTH $(BUILD_DEPTH)"; \
	else \
		if [ "$(BUILD_UPLOAD)" = "" ] ; then \
			echo "Can't upload: missing a BUILD_UPLOAD authorization key" >&2; \
			exit 2 ; \
		fi ; \
		cd $(BLD_OUT_DIR)/releases >/dev/null 2>&1 ; \
		if ls $(IMG_NAME)* >/dev/null 2>&1 ; then \
			for name in $(IMG_NAME)* md5-$(IMG_NAME)* ; do \
				if [ "$$name" = "$(IMG_NAME)-flat.tgz" ] ; then \
					mv "$$name" "$(BLD_PRODUCT)-latest-flat.tgz" ; \
					name="$(BLD_PRODUCT)-latest-flat.tgz" ; \
				fi ; \
				chmod 664 $$name ; \
				echo http --upload --form "server=`hostname`&key=$(BUILD_KEY)" $$name $(BUILD_UPLOAD); \
				http -q --upload --form "server=`hostname`&key=$(BUILD_KEY)" $$name $(BUILD_UPLOAD); \
			done ; \
		fi ; \
		if [ "$(BUILD_UPLOAD_SOURCE)" = "true" ] ; then \
			cd $(BLD_OUT_DIR)/releases >/dev/null 2>&1 ; \
			if ls $(SRC_NAME)* >/dev/null 2>&1 ; then \
				for name in $(SRC_NAME)* md5-$(SRC_NAME)* ; do \
					chmod 664 $$name ; \
					echo http --upload --form "server=`hostname`&key=$(BUILD_KEY)" $$name $(BUILD_UPLOAD); \
					http -q --upload --form "server=`hostname`&key=$(BUILD_KEY)" $$name $(BUILD_UPLOAD); \
				done ; \
			fi ; \
		fi ; \
	fi

version:
	@echo $(BLD_VERSION)-$(BLD_NUMBER)
