/*
    utest.worker - Injected into the unit test global scope
 */

require ejs.unix

const PIDFILE = ".pidfile"

enumerable public class Test {
    //  MOB - not used
    public var bin: Path
    public var lib: Path

    public var config: Object
    public var depth: Number
    public var dir: Path
    public var multithread: Boolean
    public var phase: String
    public var threads: Number
    public var top: Path
    public var os: Path
    public var hostOs: Path
    public var verbosity: Number = false

    var log = App.log

    public function mapVerbosity(adj: Number): String {
        str = ""
        for (i = test.verbosity + adj; i > 0; i--)
            str += "-v "
        return str
    }

    function searchUp(path: Path): String {
        if (exists(path))
            return path
        path = Path(path).relative
        dir = Path("..")
        while (true) {
            up = Path(dir.relative).join(path)
            if (exists(up))
                return up
            if (dir.parent == dir) break
            dir = dir.parent
        }
        return null
    }

    public function skip(message: String): Void
        postMessage({ skip: message })
}


/*
    Global functions
 */
function assert(cond: Boolean, message: String = null): Void {
    if (cond) {
        postMessage({ passed: true })
    } else {
        throw new AssertError(message.toString())
    }
}

/* 
    Redefine the Global.assert function 
 */
Object.defineProperty(global, "assert", { writable: true, value: assert})


public function cleanDir(path) {
    rmdir(path, true)
    mkdir(path)
}


public function share(key: String, value: String) {
    postMessage({ key: key, value: value })
}


public function stopService() {
    if (Path(PIDFILE).exists) {
        pid = Path(PIDFILE).readString()
        Path(PIDFILE).remove()
        try { kill(pid, 9); } catch (e) { /* print("Can't stop service " + pid)  */}
        App.sleep(500);
    }
}


public function startService(cmdline: String, options = {}): Void {
    stopService()
    if (!App.getenv("NOSERVER")) {
        let cmd = new Cmd
        blend(options, {detach: true})
        cmd.start(cmdline, options)
        cmd.finalize()
        let pid = cmd.pid
        Path(PIDFILE).write(pid)
        let port = options.port || App.config.test.http_port
        let url = ":" + port + "/web/ready.ready"
        let http
        for (i in 10) {
            http = new Http
            try { 
                http.get(url)
                /* Expect to get a not-found response */
                if (http.status == 404 || http.status == 200) {
                    break
                }
            } catch (e) { }
            App.sleep(100)
            http.close()
        }
        if (http.status != 404 && http.status != 200) {
            throw "Can't start web server"
        }
        http.close()
    }
}


public function httpService(cmd: String, options = {}): Void {
    if (test.phase == "init") {
        startService("ejs " + cmd, options)
    } else {
        stopService()
    }
}

