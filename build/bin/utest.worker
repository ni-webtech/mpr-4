/*
    utest.worker - Injected into the unit test global scope
 */

require ejs.unix

const PIDFILE = ".pidfile"

enumerable public class Test {
    //  MOB - not used
    public var bin: Path
    public var lib: Path
    public var features: Object
    public var depth: Number
    public var dir: Path
    public var multithread: Boolean
    public var phase: String
    public var session: Object
    public var threads: Number
    public var top: Path
    public var os: Path
    public var hostOs: Path
    public var verbosity: Number = false

    var log = App.log

    public function mapVerbosity(adj: Number): String {
        str = ""
        for (i = test.verbosity + adj; i > 0; i--)
            str += "-v "
        return str
    }

    function searchUp(path: Path): String {
        if (exists(path))
            return path
        path = Path(path).relative
        dir = Path("..")
        while (true) {
            up = Path(dir.relative).join(path)
            if (exists(up))
                return up
            if (dir.parent == dir) break
            dir = dir.parent
        }
        return null
    }

    public function skip(message: String): Void
        postMessage({ skip: message })
}

/*
    Global functions
 */
function assert(cond: Boolean, message: String = null): Void {
    if (cond) {
        postMessage({ passed: true })
    } else {
        throw new AssertError(message.toString())
    }
}

/* 
    Redefine the Global.assert function 
 */
Object.defineProperty(global, "assert", { writable: true, value: assert})


public function cleanDir(path) {
    rmdir(path, true)
    mkdir(path)
}

/*
    Share test session data. Available in App.test.session[]
 */
public function share(key: String, value: String) {
    postMessage({ key: key, value: value })
}

/*
    Share a URI. Available in App.config.uris[]
 */
public function shareUri(uri, value: String) {
    postMessage({ uri: uri.toString(), value: value })
}

public function stopService(options = {}) {
    let pidfile = options.pidfile || PIDFILE
    if (Path(pidfile).exists) {
        pid = Path(pidfile).readString()
        Path(pidfile).remove()
        try { kill(pid, 9); } catch (e) { }
        App.sleep(500);
    }
}

public function startService(cmdline: String, options): Void {
    stopService()
    let pidfile = options.pidfile || PIDFILE
    let address = options.address || App.config.uris.http
    address = Uri(address).complete()
    if (!App.getenv("NOSERVER")) {
        let cmd = new Cmd
        blend(options, {detach: true})
        cmd.start(cmdline, options)
        cmd.finalize()
        let pid = cmd.pid
        Path(pidfile).write(pid)
    }
    let connected
    for (i in 50) {
        try {
            Socket().connect(address.host + ":" + address.port)
            connected = true
            break
        } catch (e) { 
            App.sleep(100) 
        }
    }
    assert(connected, "Can't connect to service: " + cmdline + " on " + address)
}

public function httpService(cmd: String, options = {}): Void {
    if (test.phase == "init") {
        startService("ejs " + cmd, options)
    } else {
        stopService()
    }
}

