#!/bin/bash
#
#   makeInstall - Install and Uninstall a package. Also used by makePackage.
#
#   usage: makeInstall [--bare] [--browser] [--dry] [--quiet] [--trace] [--root=/myDir] [--install|--remove|--package]
#
#
################################################################################
#
#   Copyright (c) Embedthis Software LLC, 2003-2011. All Rights Reserved.
#   The latest version of this code is available at http://www.embedthis.com
#
#   This software is open source; you can redistribute it and/or modify it 
#   under the terms of the GNU General Public License as published by the 
#   Free Software Foundation; either version 2 of the License, or (at your 
#   option) any later version.
#
#   This program is distributed WITHOUT ANY WARRANTY; without even the 
#   implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details at:
#   http://www.embedthis.com/downloads/gplLicense.html
#   
#   This General Public License does NOT permit incorporating this software 
#   into proprietary programs. If you are unable to comply with the GPL, a 
#   commercial license for this software and support services are available
#   from Embedthis Software at http://www.embedthis.com
#
################################################################################

BARE=0
BROWSER=
BLD_DATE=`date '+%c'`
DEFAULT_PERM=644
DRY_RUN=
HOSTNAME=`hostname`
OPTIONS=
QUIET=${QUIET:-0}
SKIP_PERMS=${SKIP_PERMS:-0}
TASK=${TASK:-Install}

################################################################################

processPackage() {
    local fileList
    
    if [ "${BLD_EJS}" = "" ] ; then
        if ! type -p ejs ; then
            echo -e "\nRequire \"ejs\" shell to create packages. Exiting." 1>&2
            exit 255
        fi
        BLD_EJS=`type ejs`
    fi
    if [ -f package/$1.es ] ; then
        [ "$QUIET" = 0 ] && log ${VERB} package/$1.es ...
        ${BLD_EJS} package/$1.es $TASK $ROOT_DIR $BARE
    elif [ -f package/$1.files ] ; then
        [ "$QUIET" = 0 ] && log ${VERB} package/$1.files ...
        . "package/$1.files"
    else
        echo -e "\nCan't open $1.files. Exiting." 1>&2
        exit 255
    fi 
}

cleanupSystem() {

    [ $TASK = Remove ] && configureProduct cleanup
    [ "$QUIET" = 0 ] && log Clean Directories

    for p in $PREFIXES
    do
        eval prefix=\$BLD_${p}_PREFIX
        clean "$prefix"
    done
    clean "/usr/share/${BLD_PRODUCT}"
}

#
#   Clean and remove a directory
#
clean() {
    local dir home

    dir="$1"

    if [ "$dir" = "" -o "$dir" = "/" -o ! -d "$dir" ] ; then
        return
    fi
    if [ $BLD_BUILD_OS != WIN -a "$dir" = "${dir/$BLD_PRODUCT/}" -a "$ORIGINAL_ROOT_DIR" = "" ] ; then
        return
    fi

    #
    #   Does the directory exist
    #
    if [ ! -x "$dir" ] ; then
        return
    fi

    #
    #   Safety check if it is a system directory
    #
    isSysDir "$dir"
    if [ $? = 1 ] ; then
        return
    fi

    #
    #   Clean. Safer to clean inside the directory using relative paths
    #
    home=`pwd`
    cd "${dir}"
    [ $TASK = Remove ] && cleanFiles '*.tmp *.lo *.o *.obj .makedep .dummy *.log fileList.txt'
    cleanDir
    cd $home

    ${RMDIR} "${dir}" >/dev/null 2>&1
}

#
#   Cleanup empty directories below the current directory.
#
cleanDir() {
    local _dir count f

    _dir=`pwd`
    if [ $BLD_BUILD_OS != WIN -a "$dir" = "${dir/$BLD_PRODUCT/}" -a "$ORIGINAL_ROOT_DIR" = "" ] ; then
        return
    fi
    [ $BLD_BUILD_OS = WIN ] && _dir=`cygpath -m "$_dir"`
    if [ "`pwd`" = "/" ] ; then
        echo "Configuration error: clean directory was '/'"
        return
    fi
    find . -type d -print | sort -r | grep -v '^\.$' | while read d
    do
        count=`ls "$d" | wc -l | sed -e 's/ *//'`
        if [ "$count" = "0" ] ; then
            [ "${TRACE}" = 1 ] && echo "rmdir `pwd`/$d"
            ${RMDIR} "$d"
        fi
        if [ "$count" != "0" ] ; then 
            f=`echo "$d" | sed -e 's/\.\///'`
            [ "${TRACE}" = 1 ] && echo -e "Directory \"`pwd`/${f}\", still has user data"
            return
        fi
    done 
}

#
#   Cleanup intermediate files in the current directory and below
#   Usage: cleanFiles patterns
#
cleanFiles() {

    if [ "`pwd`" = "/" ] ; then
        echo "Configuration error: clean directory was '/'"
        return
    fi
    find "`pwd`" -type d -print | while read d
    do
        before=`pwd`
        cd "${d}"
        if [ "${TRACE}" = 1 ] ; then
             echo "cd $d"
             echo "rm -f $*"
        fi
        eval ${RM} -f $*
        cd "${before}"
    done
}

#
#   This is called by the various *.files scripts
#
usePrefixes() {
    local path prefix prefixes

    prefixes=$*
    PREFIXES="$PREFIXES $*"

    for prefix in $prefixes
    do
        eval path=\$BLD_${prefix}_PREFIX
        if [ ! -d "${path}" ] ; then
            ${MKDIR} -p "${path}"
        fi
        setp 755 root root "${path}"
    done
}

#
#   Copy or remove the files specified by the PACKS variable
#
copyRemoveFiles() {

    local home dir packName root

    for packName in $PACKS
    do
        processPackage ${packName}
        installRemoveLog ${packName}
    done
    configureProduct copy
}

#
#   Find the top of the source tree and change directory to it. Set BLD_TOP
#
findTop() {
    local dir

    dir=`pwd`
    while [ ! -f configure ]
    do
        cd ..
        if [ `pwd` = $dir ] ; then
            echo "Missing configure program. Can't find build top directory."
            exit 255
        fi
        dir=`pwd`
    done
    BLD_TOP=`pwd`
    BLD_OUT_DIR=$BLD_TOP/out

}

setup() {
    local dir

    umask 022

    cd ${BLD_TOP}
    BLD_TOP=.
    ORIGINAL_ROOT_DIR="$ROOT_DIR"

    . `cacheConfig ${BLD_TOP}/out/inc/buildConfig.h`

    if [ "$ROOT_DIR" = "" ] ; then
        ROOT_DIR=$BLD_ROOT_PREFIX
    fi
    export ROOT_DIR ORIGINAL_ROOT_DIR

    . ${BLD_TOP}/build/bin/makePackage.common
    . package/makeInstall.${BLD_PRODUCT}

    [ $TASK = Install ] && VERB=Installing
    [ $TASK = Package ] && VERB=Copy
    [ $TASK = Remove ] && VERB=Removing

    if [ ! -x "${BLD_BUILD_BIN_DIR}/dsi${BLD_BUILD_EXE}" ] ; then
        echo "Must compile first before $VERB"
        exit 255
    fi
#   ROOT_DIR=`${BLD_OUT_DIR}/bin/getpath -a "${ROOT_DIR}"`

    if [ "$DRY_RUN" = 1 ] ; then
        CHGRP="true chgrp"
        CHOWN="true chown"
        CHMOD="true chmod"
        CP="true cp"
        GZIP="true gzip"
        LN="true ln"
        MKDIR="true mkdir"
        PATCH="true patchFile"
        RM="true rm"
        RMDIR="true rmdir"
        UNIX2DOS="true unix2dos"
    fi
    if [ $BLD_BUILD_OS = WIN ] ; then
        ROOT_DIR=`cygpath -u $ROOT_DIR`
        ROOT_DIR=`cygpath -am $ROOT_DIR`
    fi
    if [ $TASK = Package ] ; then
        dir=$ROOT_DIR
        if type cygpath >/dev/null 2>&1 ; then
            dir=`cygpath -u $ROOT_DIR`
        fi
        if [ "$dir" = "/" -o "$dir" = "C:/" -o "$dir" = "c:/" -o "$dir" = "/cygdrive/c" ] ; then
            echo "WARNING: ROOT_DIR not set correctly for packaging" 2>&1
            echo "Preventing cleaning $ROOT_DIR" 2>&1
            echo "Aborting packaging" 2>&1
            exit 2
        fi
    fi

    #
    #   Determine if user has admin privileges
    #
    user=`id -u`
    if [ $BLD_BUILD_OS = WIN ] ; then
        if [ "`id | grep Administrator`" != "" ] ; then
            user=0
        fi
    fi
    if [ $user != 0 ] ; then
        SKIP_PERMS=1
    fi

    if [ $TASK = Package ] ; then
        ${RM} -fr $ROOT_DIR
        ${MKDIR} -p $ROOT_DIR
        setp 755 root root "${ROOT_DIR}"
    fi
    preparePrefixes
    [ "$QUIET" = 0 ] && header
}

header() {
    if [ "$TASK" = Remove ] ; then
        log Create ${TASK} \"${BLD_NAME} ${BLD_VERSION}-${BLD_NUMBER}\" from \"${ROOT_DIR}\"
    else
        log Create ${TASK} \"${BLD_NAME} ${BLD_VERSION}-${BLD_NUMBER}\" to \"${ROOT_DIR}\"
    fi
}

installRemoveLog() {
    local do pack

    pack=$1
    if [ $TASK = Install ] ; then
        do="mv install.log "
    elif [ $TASK = Remove ] ; then
        do="rm -f "
    else
        return
    fi
    if [ "$pack" = binary ] ; then
        eval $do \"${BLD_VER_PREFIX}/fileList.txt\"
    elif [ "$pack" = dev ] ; then
        eval $do \"${BLD_INC_PREFIX}/fileList.txt\"
    elif [ "$pack" = source ] ; then
        eval $do \"${BLD_SRC_PREFIX}/fileList.txt\"
    fi
}

launchBrowser() {
    local   root url PAGE

    root=/
    [ $BLD_BUILD_OS = WIN ] && root=`cygpath -m "/"`
    if [ "$ROOT_DIR" != "$root" ] ; then
        return
    fi

    PAGE=index.html
    if [ "$BLD_WEB_PREFIX" != "" -a -f "$BLD_WEB_PREFIX/$PAGE" ] ; then
        if [ "$BLD_PRODUCT" = appweb ] ; then
            url="http://localhost:${BLD_HTTP_PORT}/$PAGE"
        else
            url=$BLD_WEB_PREFIX/$PAGE
        fi
    elif [ -f "$BLD_DOC_PREFIX/$PAGE" ] ; then
        url="$BLD_DOC_PREFIX/$PAGE"
    else
        return
    fi

    [ "$QUIET" = 0 ] && log Start "Browser to view the $BLD_NAME Documentation."
    sleep 4
    if [ "$BLD_OS" = MACOSX ] ; then
        open $url
    elif [ "$BLD_OS" = WIN ] ; then
        cygstart --shownormal "$url"
    else 
        for f in /usr/bin/htmlview /usr/bin/firefox /usr/bin/mozilla /usr/bin/konqueror 
        do
            if [ -x ${f} ]
            then
                sudo -H -b ${f} $url >/dev/null 2>&1 &
                break
            fi
        done
    fi
}

with() {
    local name arg
    name=`echo ${1%=*} | tr '[:lower:]' '[:upper:]'`
    if [ "$1" != "${1/=/}" ] ; then
        arg="${1##*=}"
    else
        arg=1
    fi
    eval WITH_$name="$arg"
}

without() {
    local name=`echo ${1} | tr '[:lower:]' '[:upper:]'`
    eval WITH_$name=0
}


#
#   Main
#
findTop

set -- ${OPTIONS} $*
while [ "${1#--}" != "$1" -o "${1#-}" != "$1" ] ; do
    ARG="${1#*=}"
    [ "$ARG" = "$1" ] && ARG=
    SW=`echo ${1#--} | tr '[:upper:]' '[:lower:]'`
    case ${SW} in
    bare)
        BARE=1
        ;;
    browser)
        BROWSER=1
        ;;
    dry|dry-run)
        DRY_RUN=1
        ;;
    install)
        TASK=Install
        ;;
    package)
        TASK=Package
        ;;
    quiet|-q)
        QUIET=1
        ;;
    remove)
        TASK=Remove
        ;;
    root=*)
        ROOT_DIR=$ARG
        ;;
    trace|-t)
        TRACE=1
        ;;
    with-*)
        with "${1#--*-}" "${ARG}"
        ;;
    without-*)
        without "${1#--*-}"
        ;;
    esac
    shift
done

PACKS=${*:-binary}
setup

configureProduct initialize

if [ $TASK = Remove ] ; then
    #
    #   Uninstall
    #
    copyRemoveFiles
    cleanupSystem
else 
    #
    #   Installing and Packaging
    #
    copyRemoveFiles
fi

[ "$BROWSER" = 1 -a "$DRY_RUN" = "" ] && launchBrowser

configureProduct complete

if [ "$BARE" = 1 ] ; then
    #
    #   Flatten the tree
    #
    if [ "$ROOT_DIR" = "/" -o "$ROOT_DIR" = "c:/" ] ; then
        echo "WARNING: Can't do bare deploy to the root directory"
        exit 255
    fi
    mkdir -p ${ROOT_DIR}/bin ${ROOT_DIR}/lib 
	mv ${BLD_BIN_PREFIX}/* ${ROOT_DIR}/bin
	mv ${BLD_LIB_PREFIX}/* ${ROOT_DIR}/lib
	rm -f ${BLD_LIB_PREFIX}/fileList.txt
    #
    #   Try to be careful with removals
    #
	rm -fr ${ROOT_DIR}/usr/lib/${BLD_PRODUCT}
	rmdir ${ROOT_DIR}/usr/lib
	rmdir ${ROOT_DIR}/usr
fi

