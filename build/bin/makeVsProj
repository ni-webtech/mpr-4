#!/bin/bash
#
#   makeVsProj -- Make Visual Studio (10) Projects
#
#   Copyright (c) Embedthis LLC, 2003-2011. All Rights Reserved.
#
#   It is expected that makeVsProj is only invoked from the Embedthis build systems. It
#   expects the Makefile and and make.rules to have defined all the necessary compile 
#   and link flag environment variables. It can't really be run on the command
#   line as it will be missing BLD_LDFLAGS etc.
#

ARCHIVE=
CFLAGS=
CUSTOM=
DFLAGS="WIN32;_DEBUG;_WINDOWS"
DEF=
DO=
ENTRY=
EXECUTABLE=
OBJECT_FILE_LIST=
GRAPHICAL=
IFLAGS=
LDFLAGS=
LIBRARY=
LIBRARY_PATHS=
LIBS=
MAKE_STATIC=
OMITSTDLIBS=0
MACHINE=MachineX86
PLATFORM=Win32
RESOURCES=
RPATH_LIST=
SHARED_LIBRARY=
SONAME=0
SOURCES=
SYSLIBS=
VERBOSE=0
VERSION=1.0
VERSION_SONAME=0
VERBOSE=${VERBOSE:=0}

#
#   VS 10 compatible
#
PROJECT_FILE_VERSION=10.0.30319.1
TOOLS_VERSION=4.0

###############################################################################

log() {
    tag=$1
    shift
    if [ "$VERBOSE" = 0 -a "$TRACE" = "0" ] ; then
        printf "%12s %s\n" "[$tag]" "$*"
    fi
}

parseArgs() {
    local argc value

    argc=$#
    _INDEX=1
    while [ $_INDEX -le $argc ] ; do

        getSwitch "$@"

        case "${_SWITCH}" in 
        --cflags)
            CFLAGS="$CFLAGS ${_ARG}"
            useArg
            ;;
        --condition)
            value=${_ARG//$\\/$}
            CONDITION="Condition=\"${value}\""
            useArg
            ;;
        --custom)
            if [ ! -f "${_ARG}" ] ; then
                echo "Can't find custom build code file: " ${_ARG}
                exit 255
            fi
            CUSTOM="${_ARG}"
            useArg
            ;;
        --def)
            DEF="${_ARG}"
            if [ ! -f "${DEF}" -a "$name" = Debug ] ; then
                echo "makeVsProj: WARNING: Can't find module definition file: ${DEF}"
                exit 255
            fi
            useArg
            ;;
        --deps)
            DEPS="$DEPS ${_ARG}"
            useArg
            ;;
        --dflags)
            DFLAGS="$DFLAGS;${_ARG}"
            useArg
            ;;
        --entry)
            ENTRY="${_ARG}"
            useArg
            ;;
        --executable|--exe)
            EXECUTABLE="${_ARG}"
            useArg
            ;;
        --graphical)
            GRAPHICAL=1
            ;;
        --help)
            usage
            ;;
        --iflags)
            IFLAGS="$IFLAGS ${_ARG}"
            useArg
            ;;
        --ldflags)
            LDFLAGS="$LDFLAGS ${_ARG}"
            useArg
            ;;
        --library)
            dir="${_ARG%${_ARG##*/}}"
            # "${dir:=./}" != "/" && dir="${dir%?}"
            : ${dir:=./}
            base=${_ARG##*/}
            noExtension=${base%\.*}
            LIBRARY="${dir}${noExtension}"
            useArg
            ;;
        --libs)
            LIBS="$LIBS ${_ARG}"
            useArg
            ;;
        --omitstdlibs)
            OMITSTDLIBS=1
            ;;
        --name)
            NAME="${_ARG}"
            useArg
            ;;
        --project)
            PROJECT="${_ARG}"
            useArg
            ;;
        --props)
            PROPS="$PROPS ${_ARG}"
            useArg
            ;;
        --quiet)
            ;;
        --platform)
            PLATFORM="${_ARG}"
            useArg
            ;;
        --resources)
            RESOURCES="${_ARG}"
            useArg
            ;;
        --rpath)
            #   Change ' ' to @ temporarily
            RPATH_LIST="$RPATH_LIST ${_ARG// /@}"
            useArg
            ;;
        --search)
            LIBRARY_PATHS="$LIBRARY_PATHS ${_ARG}"
            useArg
            ;;
        --shared)
            MAKE_STATIC=0
            ;;
        --static)
            MAKE_STATIC=1
            ;;
        --syslibs)
            SYSLIBS="$SYSLIBS ${_ARG}"
            useArg
            ;;
        --version)
            echo $VERSION
            exit 0
            ;;
        --verbose)
            VERBOSE=1
            ;;
        *)  argc=0
            ;;
        esac
    done
    if [ "$NAME" = "" ] ; then
        NAME="$PROJECT"
    fi
}


# TODO - cull args not supported or needed
# TODO --sources ""

usage() {
    cat <<!EOF
makeVsProj: usage: makeVsProj [options] objects ....
    Options:
    --cflags                Compiler flags
    --condition             Compile and link MSBuild condition
    --custom                Custom build step file
    --debug                 Not implemented
    --def                   Import definition file
    --deps "projects..."    Dependent projects
    --entry name            Shared library entry point
    --exe name              Name of executable to build
    --graphical             Create a windowed program instead of a console.
    --help                  Print usage information
    --iflags flags          Include search path
    --ldflags               Linker flags
    --library name          Name of library to link
    --libs libraries        Extra libraries to link with.
    --omitstdlibs           Don't use standard libraries (UNIX only)
    --objects "objects..."  String containing objects to link
    --project               Project file name
    --props "propfiles..."  Project file name
    --quiet                 Run quietly without tracing actions to stdout
    --resources file        Resource file (menus and icons for Windows)
    --rpath path            Specify the executable run-time library search path
    --search "paths"        Paths to search for the libraries
    --shared                Only make a shared library
    --static                Only make a static library
    --syslibs libraries     Extra system libraries to link with
    --version               Print the makeVsProj version
    --verbose               Verbose operation. Traces internal information.

    Environment variables used:
      BLD_TOP               Top of the source tree

    Configuration files used:
        buildConfig.h
!EOF
    exit 255
}


#
#   Search for library in the specified search locations.
#
searchLib()
{
    local syslib path libName extraSysLib prefix name suffix suffixes file

    name="$1"

    [ "$VERBOSE" -gt 0 ] && echo -e "\nmakeVsProj: searchLib for library $name" >&2

    suffixes="${SUFFIXES}"
    if [ "${name%.*}" != "${name}" ] ; then
        suffixes=".${name#*.}"
        name="${name%.*}"
    fi
    for path in ${LIBRARY_PATHS} "${BLD_LIB_DIR}" "${BLD_LIB_PREFIX}" "$syslib" "$extraSysLib" ; do
        for suffix in `echo $suffixes` ; do
            for prefix in lib "" ; do
                [ "$path" = "" ] && continue

                file=`shopt -s extglob ; eval ls -1 "${path}/${prefix}${name}?(.*)${suffix}*" 2>/dev/null | head -1`
                
                libName="${file##*/}"

                [ "$VERBOSE" -gt 0 ] && echo "makeVsProj: TESTING ${file}" >&2

                if [ -f "${file}" -o -L "${file}" ] ; then
                    [ "$VERBOSE" -gt 0 ] && echo -e "makeVsProj: FOUND ${file}\n" >&2
                    echo "${file}"
                    return
                fi
            done
        done
    done
    echo ""
}


#
#   Find a library. Look in the library paths with a "lib" prefix first.
#
findLib() {
    local path libName static suffixes

    libName="$1"

    [ "$VERBOSE" -gt 0 ] && echo -e "\nmakeVsProj: findLib: search for $libName using suffixes \"$SUFFIXES\"" >&2
    newName=`searchLib ${libName}`

    if [ "$newName" != "" ] ; then
        echo "$newName"
        return
    fi
    echo -e "\nWarning: makeVsProj could not find library \"$libName\". Build may not complete." >&2

    if [ "$newName" != "" -a "$newName" != "${newName%$BLD_ARCH}" ] ; then
        #
        #   If static library, use actual path. Fixed MAC OSX which insists on dynamic lib priority
        #
        echo "$newName"
        return
    fi
    libName="${libName%$BLD_ARCH}"
    libName="${libName%$BLD_SHLIB}"
    echo "${libName}.lib"
}


basename() {
    local name="${1##*/}"
    echo "${name%$2}"
}


#
#   Find the top level directory
#
findTop() {
    local top level

    top=$BLD_TOP
    if [ "$top" = "" ] ; then
        top=.
        level=0
        while [ $level -lt 30 ] ; do
            if [ -d $top/build -a -d $top/build/bin -a -f $top/configure ] ; then
                break
            fi
            top=$top/..
            level=$((level + 1))
        done
        top=${top#./}

        if [ $level -ge 30 ] ; then
            echo "Can't find top level directory with build and bin directories" >&2
            exit 255
        fi
    fi
    echo $top
}


output() {
    echo "$*" >>$PROJECT
}


#
#   Get next command line argument. Uses globals _INDEX, _SWITCH, _ARG.
#
getSwitch()
{
    local i sw arg

    : =${_INDEX:=1}

    _ARG=
    _EQUALS_ARG=
    _SWITCH=

    if [ "${!_INDEX##--}" = "${!_INDEX}" ] ; then
        #
        #   Not a switch
        #
        return
    fi

    #
    #   Extract the value when the format is: --switch=value
    #
    _SWITCH=${!_INDEX%%=*}
    _EQUALS_ARG=${!_INDEX##*=}
    _INDEX=$((_INDEX + 1))
    if [ "$_EQUALS_ARG" != "$_SWITCH" ] ; then
        _ARG="$EQUALS_ARG"
    else
        _EQUALS_ARG=
        _ARG=${!_INDEX}
    fi
}


useArg() {
    _INDEX=$((_INDEX + 1))
}

###############################################################################
#
#   Emit the project header
#
outputHeader() {
    cat >>$PROJECT <<!EOF_HEADER
<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="${TOOLS_VERSION}" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
!EOF_HEADER
}


#
#   Emit a block per configuration
#
outputConfiguration() {
    local guid ptype CTOK PTOK OTOK UTOK VTOK STOK cfg idir

    guid=`uuidgen | tr '[a-z]' '[A-Z]'`
    echo $guid >$NAME.guid
    if [ "$EXECUTABLE" ] ; then
        ptype="Application"
    else
        ptype="DynamicLibrary"
    fi
    if [ "$GRAPHICAL" ] ; then
        subsystem="Windows"
    else 
        subsystem="Console"
    fi

    #
    #   Workaround for here-document execution of $(word)
    #
    CTOK='$(Configuration)'
    PTOK='$(Platform)'
    STOK='$(SolutionDir)'
    OTOK='$(OutDir)'
    UTOK='$(UserRootDir)'
    VTOK='$(VCTargetsPath)'

    for cfg in $PROPS ; do
        PROP_FILES="${PROP_FILES}
    <Import Project=\"${cfg}\" />"
    done

    idir=${PROJECT/.vcxproj/}

    cat >>$PROJECT <<!EOF_CONFIGURATION_A

  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|${PLATFORM}">
      <Configuration>Debug</Configuration>
      <Platform>${PLATFORM}</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|${PLATFORM}">
      <Configuration>Release</Configuration>
      <Platform>${PLATFORM}</Platform>
    </ProjectConfiguration>
  </ItemGroup>

  <PropertyGroup Label="Globals">
    <ProjectGuid>{${guid}}</ProjectGuid>
    <RootNamespace />
    <Keyword>${PLATFORM}Proj</Keyword>
  </PropertyGroup>

  <Import Project="${VTOK}\Microsoft.Cpp.Default.props" />

  <PropertyGroup Condition="'${CTOK}|${PTOK}'=='Debug|${PLATFORM}'" Label="Configuration">
    <ConfigurationType>${ptype}</ConfigurationType>
    <CharacterSet>NotSet</CharacterSet>
  </PropertyGroup>

  <PropertyGroup Condition="'${CTOK}|${PTOK}'=='Release|${PLATFORM}'" Label="Configuration">
    <ConfigurationType>${ptype}</ConfigurationType>
    <CharacterSet>NotSet</CharacterSet>
  </PropertyGroup>

  <Import Project="${VTOK}\Microsoft.Cpp.props" />

  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>

  <ImportGroup Condition="'${CTOK}|${PTOK}'=='Debug|${PLATFORM}'" Label="PropertySheets">
    <Import Project="${UTOK}\Microsoft.Cpp.${PTOK}.user.props" Condition="exists('${UTOK}\Microsoft.Cpp.${PTOK}.user.props')" Label="LocalAppDataPlatform" />
    $PROP_FILES
    <Import Project="debug.props" />
  </ImportGroup>

  <ImportGroup Condition="'${CTOK}|${PTOK}'=='Release|${PLATFORM}'" Label="PropertySheets">
    <Import Project="${UTOK}\Microsoft.Cpp.${PTOK}.user.props" Condition="exists('${UTOK}\Microsoft.Cpp.${PTOK}.user.props')" Label="LocalAppDataPlatform" />
    $PROP_FILES
    <Import Project="release.props" />
  </ImportGroup>

  <PropertyGroup Label="UserMacros" />

  <PropertyGroup>
    <_ProjectFileVersion>${PROJECT_FILE_VERSION}</_ProjectFileVersion>
    <OutDir Condition="'${CTOK}|${PTOK}'=='Release|${PLATFORM}'">${WIN_OUT_DIR//\//\\}\\bin\\</OutDir>
    <IntDir Condition="'${CTOK}|${PTOK}'=='Release|${PLATFORM}'">${WIN_OUT_DIR}\\obj\\${idir}\\</IntDir>
    <OutDir Condition="'${CTOK}|${PTOK}'=='Debug|${PLATFORM}'">${WIN_OUT_DIR}\\bin\\</OutDir>
    <IntDir Condition="'${CTOK}|${PTOK}'=='Debug|${PLATFORM}'">${WIN_OUT_DIR}\\obj\\${idir}\\</IntDir>
  </PropertyGroup>
!EOF_CONFIGURATION_A
}


outputHeaders() {
    local f uuid

    [ "$HEADERS" = "" ] && return
    output ""
    output "  <ItemGroup>"
    for f in $HEADERS ; do
        f=${f//\//\\}
        output "    <ClInclude Include=\"${f}\" />"
    done
    output "  </ItemGroup>"
}


outputResources() {
    local f

    [ "$RESOURCES" = "" ] && return
    output ""
    output "  <ItemGroup>"
    for f in $RESOURCES ; do
        f=${f//\//\\}
        output "    <ResourceCompile Include=\"${f}\" />"
    done
    output "    </ItemGroup>"
}


outputSources() {
    local f

    [ "$SOURCES" = "" ] && return
    output ""
    output "  <ItemGroup $CONDITION>"
    for f in $SOURCES ; do
        f=${f//\//\\}
        output "    <ClCompile Include=\"${f}\" />"
    done
    output "  </ItemGroup>"
}

outputLinkOptions() {
    local CTOK PTOK def

    CTOK='$(Configuration)'
    PTOK='$(Platform)'

    if [ "$DEF" != "" ] ; then
        for def in $DEF ; do
            cat >>$PROJECT <<!EOF_LINK_OPTIONS

  <ItemDefinitionGroup>
    <Link>
      <ModuleDefinitionFile>$def</ModuleDefinitionFile>
    </Link>
  </ItemDefinitionGroup>
!EOF_LINK_OPTIONS
        done
    fi

    if [ "$LIB_LIST" != "" ] ; then
        cat >>$PROJECT <<!EOF_LINK_LIBS

  <ItemDefinitionGroup $CONDITION>
    <Link>
      <AdditionalDependencies>$LIB_LIST;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>
!EOF_LINK_LIBS
    fi

    if [ "$GRAPHICAL" != "" ] ; then
        
        cat >>$PROJECT <<!EOF_LINK_SUBSYSTEM

  <ItemDefinitionGroup>
    <Link>
      <SubSystem>Windows</SubSystem>
    </Link>
  </ItemDefinitionGroup>
!EOF_LINK_SUBSYSTEM
    fi
}


outputDependencies() {
    local dep guid
    if [ "${DEPS}" != "" ] ; then
        for dep in ${DEPS} ; do
            dep="${dep%.vcxproj}"
            if [ ! -f ${dep}.vcxproj.guid ] ; then
                echo "Missing project GUID for $dep, omitting dependency for $NAME on $dep"
                continue
            fi
            guid="{"`cat ${dep}.vcxproj.guid`"}"
            cat >>$PROJECT <<!EOF_DEPS

  <ItemGroup>
    <ProjectReference Include="${dep}.vcxproj">
      <Project>${guid}</Project>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
    </ProjectReference>
  </ItemGroup>
!EOF_DEPS
        done
    fi
}


outputMsTargets() {
    local VTOK

    VTOK='$(VCTargetsPath)'

    cat >>$PROJECT <<!EOF_TRAILER
  <Import Project="${VTOK}\Microsoft.Cpp.targets" />

!EOF_TRAILER
    if [ "$CONDITION" != "" ] ; then
    cat >>$PROJECT <<!EOF_TRAILER_2
  <PropertyGroup ${CONDITION/==/!=}>
    <BuildDependsOn>
    </BuildDependsOn>
  </PropertyGroup>

!EOF_TRAILER_2
    fi
}

outputCustom() {
    local file

    for file in $CUSTOM ; do
        if [ "$CUSTOM" != "" ] ; then
            if [ ! -f "$CUSTOM" ] ; then
                echo "Can't locate $CUSTOM"
                exit 255
            fi
            cat <$CUSTOM >>$PROJECT 
        fi
    done
}

#
#   Emit the final trailer for the project file
#
outputTrailer() {
    local VTOK

    VTOK='$(VCTargetsPath)'

    cat >>$PROJECT <<!EOF_TRAILER
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>
!EOF_TRAILER
}

###############################################################################
#
#   Main
#

BLD_TOP=`findTop`
: ${BLD_OUT_DIR:=$BLD_TOP/out}
WIN_OUT_DIR=${BLD_OUT_DIR//\//\\}

. `cacheConfig ${BLD_OUT_DIR}/inc/buildConfig.h`
parseArgs "$@"
log "Generate" ${PROJECT}
argc=$#
shift $((_INDEX - 1))
OS=${BLD_OS}

if [ "$PROJECT" = "" ] ; then
    echo "makeVsProj: must specify a project name with --project"
    exit 2
fi

#
#   Add the flags from user make files, build/make/make.*, and from configure
#
CFLAGS="${CFLAGS} ${MAKE_CFLAGS} ${_CFLAGS} ${BLD_CFLAGS}"
IFLAGS="${IFLAGS} ${MAKE_IFLAGS} ${_IFLAGS} ${BLD_IFLAGS}"
LDFLAGS="${LDFLAGS} ${MAKE_LDFLAGS} ${_LDFLAGS} ${BLD_LDFLAGS}"
IFLAGS=`echo $IFLAGS | sed 's/-I//g; s/ /;/g'`
DFLAGS=`echo $DFLAGS ${MAKE_DFLAGS} ${_DFLAGS} ${BLD_DFLAGS} | sed 's/ -D/;/g' | sed 's/;_WIN32_WCE=0x420//'`

#
#   Prioritize library suffix search order
#
SUFFIXES=
if [ "$MAKE_STATIC" = 0 ] ; then
    SUFFIXES="$SUFFIXES ${BLD_SHLIB} ${BLD_ARCH}"
else
    SUFFIXES="$SUFFIXES ${BLD_ARCH} ${BLD_SHLIB}"
fi

if [ "${OBJECT_FILE_LIST}" ] ; then
    for f in ${OBJECT_FILE_LIST}
    do
        OBJECTS="$OBJECTS `cat ${f}`"
    done
fi

#
#   Add remaining args as objects. And fixup objects to add object extension and object directory
#
for f in $*
do
    case ${f##*.} in
    c|cpp)
        SOURCES="${SOURCES} ${f}"
        ;;
    h)
        HEADERS="${HEADERS} ${f}"
        ;;
    rc)
        RESOURCES="${RESOURCES} ${f}"
        ;;
    ## TODO - add other file types and categories
    esac
done

#
#   Remove redundant libraries
#
LIBRARY_PATHS="`echo $_LDPATH | sed 's/-L//'` $LIBRARY_PATHS"
LIBRARY_PATHS=`echo ${LIBRARY_PATHS} | tr ' ' '\n' | uniq | tr '\n' ' '`
LIBS=`echo ${LIBS} | tr ' ' '\n' | uniq | tr '\n' ' '`

#
#   Prepare for action
#
paths=
for p in ${LIBRARY_PATHS} ; do
    if [ "${p}" != "" ] ; then
        paths="${paths};${p}"
    fi
done
LINK_LIBRARY_PATHS=${paths#;*}

LIB_LIST=

for l in ${LIBS} ; do
    if [ "${l}" != "" ] ; then
#        libName=`findLib $l` 
        LIB_LIST="${LIB_LIST} ${l}"
    fi
done

for l in ${SYSLIBS} ; do
    if [ "${l}" != "" ] ; then
        LIB_LIST="${LIB_LIST} ${l}"
    fi
done
LIB_LIST=${LIB_LIST# *}
LIB_LIST=${LIB_LIST// /;}

if [ "$LIBRARY" != "" ] ; then
    if [ "$MAKE_STATIC" = 0 -a "$ENTRY" = "" ]
    then
        ENTRY="_DllMainCRTStartup@12"
    fi
fi

if [ "$EXECUTABLE" ] ; then
    if [ "$GRAPHICAL" ] ; then
        ENTRY=WinMainCRTStartup
        SUBSYSTEM="WINDOWS"
    else 
        ENTRY=mainCRTStartup
        SUBSYSTEM="CONSOLE"
    fi
fi

STND_LIBS=$_SHARED_LIBS
rm -f $PROJECT

outputHeader
outputConfiguration
outputHeaders
outputSources
outputLinkOptions
outputResources
outputDependencies
outputMsTargets
outputCustom
outputTrailer
unix2dos -D $PROJECT 2>/dev/null

exit 0
