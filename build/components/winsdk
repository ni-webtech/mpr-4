#
#   Windows SDK
#
defineComponent() {
    local name path partial

    if [ $BLD_CROSS = 1 -a $KIND = HOST -a $BLD_HOST_OS != "WIN" ] ; then 
        return 0
    fi
    name=winsdk
    path=`probe --name winsdk --dir --search "$1" "Include/WinBase.h"`
    if [ "$path" = "" ] ; then
        warnComponent "Windows SDK" "Download from http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx\n"
        return
	fi
    configureComponent --path "$path" --emitter emitWinOptions winsdk
    setWinEnv
}


setWinEnv()
{
    local file cc version file os cc cpu bldPath bldInclude bldLib vs VS WINSDK cl

    name=cc
    eval file=\$BLD_${KIND}_CC
    cc=`probe --name winsdk --search "$1" $file`
    eval WINSDK=\$CFG_${KIND}_WINSDK
    if [ "$WINSDK" = "" ] ; then
		echo "Can't find required component: Windows SDK"
		exit 255
	fi
    eval os=\$BLD_${KIND}_OS
    eval cpu=\$BLD_${KIND}_CPU

    if [ "$cc" = "" ] ; then
		echo "Can't find required component: compiler"
		exit 255
	fi

    VS=`echo $cc | sed 's/\/VC\/.*//'`
    VSBIN=`dirname "${cc}"`
    VSLIB=`echo $VSBIN | sed 's/[bB]in/lib/' | sed 's/x86_amd64/amd64/'`

    # Lower case for unix style paths
    vs=`cygpath -u "$VS"`
    vsbin=`cygpath -u "$VSBIN"`
	winsdk=`cygpath -u "$WINSDK"`

    #
    #   Visual Studio 2010
    #
    bldPath="${vs}/Common7/IDE:${vsbin}:${vs}/Common7/Tools:${vs}/SDK/v3.5/bin:${vs}/VC/VCPackages"
    bldInclude="$VS/VC/INCLUDE"
    bldLib="$VSLIB"
    version=16

    #
    #	Add the Windows SDK
    #
    bldPath="$bldPath:$winsdk/bin"
    bldInclude="$bldInclude;$WINSDK/include"
    if [ "$BLD_CPU" = x86_64 ] ; then
        bldLib="$WINSDK/LIB/x64;$bldLib"
    else
        bldLib="$WINSDK/LIB;$bldLib"
    fi

    eval ${KIND}_MSCL_VERSION="$version"
    eval ${KIND}_HAS_MSCL=1
    eval ${KIND}_VS=\"$VSLIB\"

    if [ "$KIND" = HOST ] ; then
        CFG_HOST_PATH="/bin:/usr/bin:$bldPath"
        CFG_HOST_INCLUDE="$bldInclude"
        CFG_HOST_LIB="$bldLib"
    else
        CFG_BUILD_PATH="/bin:/usr/bin:$bldPath"
        CFG_BUILD_INCLUDE="$bldInclude"
        CFG_BUILD_LIB="$bldLib"
    fi
}

emitWinOptions() {
    local t

    [ $BLD_CROSS = 1 ] && t="\t"
    eval v=\$${KIND}_HAS_MSCL ;     echo -e "${t}BLD_CC_MSCL=$v"
    eval v=\$${KIND}_MSCL_VERSION ; echo -e "${t}BLD_CC_CL_VERSION=$v"
    eval v=\$${KIND}_VS ; echo -e "${t}BLD_VS='$v'"
}

