#
#   C compiler
#
defineComponent() {
    local file path

    eval file=\$BLD_${KIND}_CC
    path=`probe --name cc $file`
    if [ "$path" = "" ] ; then
        warnComponent $name
        return
	fi
    configureComponent --path "$path" --emitter emitCompilerOptions cc
    setCompilerOptions
}


setCompilerOptions()
{
    local out file cc cpu file hasGcc hasStackProtector hasMtune hasDynLoad hasPam hasSync hasSyncCas hasUnnamedUnions tune flags

    eval os=\$BLD_${KIND}_OS
    eval cc=\$CFG_${KIND}_CC
    eval cpu=\$BLD_${KIND}_CPU
    eval hasCygwin=\${KIND}_HAS_CYGWIN
    eval hasDiab=\${KIND}_HAS_DIAB
    eval hasDoubleBraces=\${KIND}_HAS_DOUBLE_BRACES
    eval hasDynLoad=\${KIND}_HAS_DYN_LOAD
    eval hasLibEdit=\${KIND}_HAS_EDITLINE
    eval hasMmu=\${KIND}_HAS_MMU
    eval hasMtune=\${KIND}_HAS_MTUNE
    eval hasPam=\${KIND}_HAS_PAM
    eval hasStackProtector=\${KIND}_HAS_STACK_PROTECTOR
    eval hasSync=\${KIND}_HAS_SYNC
    eval hasSyncCas=\${KIND}_HAS_SYNC_CAS
    eval hasWarnUnused=\${KIND}_HAS_WARN_UNUSED
    eval hasWarn64to32=\${KIND}_HAS_WARN_64TO32
    eval hasUnnamedUnions=\${KIND}_HAS_UNNAMED_UNIONS
    eval flags=\"-Werror -Wall \$BLD_${KIND}_CFLAGS \$BLD_${KIND}_DFLAGS \$BLD_${KIND}_IFLAGS \$BLD_${KIND}_LDFLAGS\"
    if [ $os = MACOSX -a "${flags}" = "${flags/-arch/}" ] ; then
        flags="$flags -arch $cpu"
    fi
    eval $hasStackProtector=0
    eval $hasMtune=0
    eval ${hasDoubleBraces}=0
    eval ${hasSync}=0
    eval ${hasSyncCas}=0
    eval ${hasDynLoad}=0
    eval ${hasPam}=0
    eval ${hasLibEdit}=0
    eval ${hasMmu}=0
    eval ${hasUnnamedUnions}=0
    eval ${hasWarnUnused}=0
    eval ${hasWarn64to32}=0

    if [ $os = CYGWIN -o $os = FREEBSD -o $os = LINUX -o $os = VXWORKS -o $os = MACOSX ] ; then
        hasGcc=1
    else 
        hasGcc=0
    fi

    if [ $hasGcc = 1 ] ; then

        local vsb='#define _VSB_CONFIG_FILE "vsbConfig.h"'

        #
        #   Check if the compiler can handle -mtune. The tricky part 
        #
        file=/tmp/t$$.c
        out=/tmp/t$$
        >${file}
        if [ "$verbose" != 0 ] ; then
            echo -e "    Checking for compiler -mtune support"
            # echo -e "        ${cc}" -Werror -arch ${cpu} -mtune=${cpu} -c $file "\n"
        fi
		eval tune=\$BLD_${KIND}_CFLAGS
		tune=`echo $tune | sed 's/.*-mtune=//' | sed 's/ .*//'`
		tune=${tune:=generic}
        eval \"${cc}\" -Werror -mtune=$tune -c $file >/dev/null 2>&1
        if [ $? = 0 ] ; then
            eval $hasMtune=1
		else
			eval \"${cc}\" -Werror -Wall -mtune=${cpu} -c $file >/dev/null 2>&1
			if [ $? = 0 ] ; then
				eval $hasMtune=1
			fi
		fi

        #
        #   Test if -fno-stack-protector is supported
        #
        if [ "$verbose" != 0 ] ; then
            echo -e "    Checking for compiler -fno-stack-protector support"
            # echo -e "        ${cc}" -Werror -Wall -fno-stack-protector -c $file "\n"
        fi
        eval \"${cc}\" -Werror -Wall -fno-stack-protector -c $file >/dev/null 2>&1
        if [ $? = 0 ] ; then
            eval $hasStackProtector=1
        fi

        #
        #   Test if -Wno-unused-result is supported
        #
        if [ "$verbose" != 0 ] ; then
            echo -e "    Checking for compiler -Wno-unused-result support"
            # echo -e "        ${cc}" -Werror -Wall -Wno-unused-result -c $file "\n"
        fi
        echo -e "$vsb\n#include <stdio.h>\n#include <stdlib.h>\nint main() { realloc(0, 1024); return 0; }\n" >$file
        #
        #   Test that it passes with -Wno-unused-result and that it fails without it
        #   Needs optimization to trigger on most systems
        #
        eval \"${cc}\" -Os -Werror -Wall -Wno-unused-result -c $file >/dev/null 2>&1
        if [ $? = 0 ] ; then
            eval \"${cc}\" -Os -Werror -Wall -c $file >/dev/null 2>&1
            if [ $? != 0 ] ; then
                eval $hasWarnUnused=1
            fi
        fi

        #
        #   Test if -Wshorten-64-to-32 result is supported
        #
        if [ "$verbose" != 0 ] ; then
            echo -e "    Checking for compiler -Wshorten-64-to-32 support"
            # echo -e "        ${cc}" -Werror -Wall -Wshorten-64-to-32 -c $file "\n"
        fi
        eval \"${cc}\" -Werror -Wall -Wshorten-64-to-32 -c $file >/dev/null 2>&1
        if [ $? = 0 ] ; then
            eval $hasWarn64to32=1
        fi

        #
        #   Check for braces around initializers
        #
        if [ "$verbose" != 0 ] ; then
            echo -e "    Checking for initializers"
            # echo "         ${cc}" -o $out -c $file 
        fi
        echo -e "$vsb\n#include <stdarg.h>\nva_list d = {{0}};\n" >$file
        eval \"${cc}\" ${flags} -Werror -Wall -c -o $out -c $file >/dev/null 2>&1
        if [ $? = 0 ] ; then
            eval $hasDoubleBraces=1
        fi

        #
        #   sync builtins
        #
        if [ "$verbose" != 0 ] ; then
            echo -e "    Checking for builtin sync primitives"
        fi
        echo -e "$vsb\n#include <stdio.h>\nint main() { __sync_synchronize(); return 0; }\n" >$file
        eval \"${cc}\" ${flags} -Werror -Wall -c -o $out -c $file >/dev/null 2>&1
        if [ $? = 0 ] ; then
            eval $hasSync=1
        fi

        if [ $os != VXWORKS ] ; then
            #
            #   VxWorks compiles and links but fails to load
            #
            echo -e "$vsb\n#include <stdio.h>\nint main() { void *ptr; __sync_bool_compare_and_swap(&ptr, ptr, ptr); return 0; }\n" >$file
            eval \"${cc}\" ${flags} -Wall -c -o $out -c $file >/dev/null 2>&1
            if [ $? = 0 ] ; then
                eval $hasSyncCas=1
            fi
            #
            #   Test if fork() supported
            #
            if [ "$verbose" != 0 ] ; then
                echo -e "    Checking for fork()"
                # echo -e "        ${cc}" -o $out -c $file "\n"
            fi
            echo -e "$vsb\n#include <stdio.h>\n#include <unistd.h>\nint main() { fork(); return 0; }\n" >$file
            eval \"${cc}\" ${flags} -o $out $file >/dev/null 2>&1
            if [ $? = 0 ] ; then
                eval $hasMmu=1
            fi
            if [ "$BLD_MMU_OVERRIDE" != "" ] ; then
                eval $hasMmu=$BLD_MMU_OVERRIDE
            fi

            #
            #   Search for dlopen() / libdl
            #
            if [ "$verbose" != 0 ] ; then
                echo -e "    Checking for dlopen()"
                # echo "         ${cc}" -o $out -c $file 
            fi
            echo -e "$vsb\n#include <stdio.h>\n#include <dlfcn.h>\nint main() { dlopen(\"test.so\", 0); return 0; }\n" >$file
            eval \"${cc}\" ${flags} -o $out $file >/dev/null 2>&1
            if [ $? = 0 ] ; then
                eval $hasDynLoad=1
            else
                eval \"${cc}\" ${flags} -o $out $file -ldl >/dev/null 2>&1
                if [ $? = 0 ] ; then
                    eval $hasDynLoad=1
                fi
            fi

            #
            #   Search for libedit
            #
            if [ "$verbose" != 0 ] ; then
                echo -e "    Checking for libedit()"
                # echo "         ${cc}" -o $out -c $file 
            fi
            echo -e "$vsb\n#include <histedit.h>\nint main() { history_init(); return 0; }\n" >$file
            eval \"${cc}\" ${flags} -o $out $file -ledit -lcurses >/dev/null 2>&1
            if [ $? = 0 ] ; then
                eval $hasLibEdit=1
            fi

            #
            #   Search for libpam
            #
            if [ "$verbose" != 0 ] ; then
                echo -e "    Checking for libpam()"
                # echo "         ${cc}" -o $out -c $file 
            fi
            echo -e "$vsb\nextern pam_start(); \nint main() { void *x = pam_start; return 0; }\n" >$file
            eval \"${cc}\" ${flags} -o $out $file -lpam >/dev/null 2>&1
            if [ $? = 0 ] ; then
                eval $hasPam=1
            fi

            #
            #   Unnamed unions
            #
            if [ "$verbose" != 0 ] ; then
                echo -e "    Checking for unnamed union support"
                # echo "         ${cc}" -o $out -c $file 
            fi
            echo -e "$vsb\n#include <stdio.h>\nint main() { struct test { union { int x; int y; };}; return 0; }\n" >$file
            eval \"${cc}\" ${flags} -Werror -Wall -c -o $out -c $file >/dev/null 2>&1
            if [ $? = 0 ] ; then
                eval $hasUnnamedUnions=1
            fi
        fi
        rm -f t$$.o ${file} ${out}

    else
        #
        #   Enable for all non-GNU O/S
        #
        eval $hasDynLoad=1
        eval $hasDoubleBraces=0
        eval $hasMmu=1
        eval $hasPam=0
        eval $hasSync=0
        eval $hasSyncCas=0
        eval $hasUnnamedUnions=1
    fi
    if [ $os = VXWORKS ] ; then
        eval ${hasDynLoad}=1
    fi
    if [ "$BLD_CC_CYGWIN" = 1 ] ; then
        eval ${hasCygwin}=1
    else
        eval ${hasCygwin}=0
    fi
    if [ "$BLD_CC_DIAB" = 1 ] ; then
        eval ${hasDiab}=1
    else
        eval ${hasDiab}=0
    fi
}

emitCompilerOptions()
{
    local v t

    [ $BLD_CROSS = 1 ] && t="\t"
    eval v=\$${KIND}_HAS_CYGWIN ;           echo -e "${t}BLD_CC_CYGWIN=$v"
    eval v=\$${KIND}_HAS_DIAB ;             echo -e "${t}BLD_CC_DIAB=$v"
    eval v=\$${KIND}_HAS_DOUBLE_BRACES ;    echo -e "${t}BLD_CC_DOUBLE_BRACES=$v"
    eval v=\$${KIND}_HAS_DYN_LOAD ;         echo -e "${t}BLD_CC_DYN_LOAD=$v"
    eval v=\$${KIND}_HAS_MTUNE ;            echo -e "${t}BLD_CC_MTUNE=$v"
    eval v=\$${KIND}_HAS_MMU ;              echo -e "${t}BLD_CC_MMU=$v"
    eval v=\$${KIND}_HAS_WARN_UNUSED ;      echo -e "${t}BLD_CC_WARN_UNUSED=$v"
    eval v=\$${KIND}_HAS_WARN_64TO32 ;      echo -e "${t}BLD_CC_WARN_64TO32=$v"
    eval v=\$${KIND}_HAS_EDITLINE ;         echo -e "${t}BLD_CC_EDITLINE=$v"
    eval v=\$${KIND}_HAS_PAM ;              echo -e "${t}BLD_CC_PAM=$v"
    eval v=\$${KIND}_HAS_STACK_PROTECTOR ;  echo -e "${t}BLD_CC_STACK_PROTECTOR=$v"
    eval v=\$${KIND}_HAS_SYNC ;             echo -e "${t}BLD_CC_SYNC=$v"
    eval v=\$${KIND}_HAS_SYNC_CAS ;         echo -e "${t}BLD_CC_SYNC_CAS=$v"
    eval v=\$${KIND}_HAS_UNNAMED_UNIONS ;   echo -e "${t}BLD_CC_UNNAMED_UNIONS=$v"
}

