#
#   OpenSSL
#
defineComponent() {
	local path search ver libs libpaths imports SHOBJ

    ver="latest"
    eval SHOBJ=\$BLD_${kind}_SHOBJ
    if [ "$BLD_HOST_OS" = LINUX -o "$BLD_HOST_OS" = MACOSX -o "$BLD_HOST_OS" = CYGWIN ] ; then
        path=${1:-.}
    else
        path="${1:-.}"
    fi
    packages=../packages-`echo ${BLD_HOST_OS}-${BLD_HOST_CPU} | tr '[:upper:]' '[:lower:]'`

    if [ $OS = WIN ] ; then
        libpaths=`probe --name openssl --search "$path:$packages/openssl/$ver" --dir "out32dll/libeay32" `
        imports="$libpaths/out32dll/libeay32.dll $libpaths/out32dll/ssleay32.dll"
        libs="libeay32 ssleay32"
        iflags="-I$libpaths/inc32"

    elif [ $OS = CYGWIN ] ; then
        #
        #   Use system libraries
        #
        imports="/usr/lib/libssl.a /usr/lib/libcrypto.a"
        iflags="-I/usr/lib/include"
        libs="ssl crypto"
        libpaths=`probe --name openssl --search "$path:/usr/lib" --dir "libcrypto" `

    elif [ $OS = MACOSX ] ; then
#       
#       Use native OpenSSL - dont do this as Apple is deprecating it
#
#       libpaths=`probe --name openssl --search "$path:$packages/openssl/$ver" --dir "libcrypto" `
#       iflags=-I`probe --name openssl --search "$path:$packages/openssl/$ver/include" --dir "openssl/ssl.h"`
#       libs="ssl crypto"
#       imports="$libpaths/libssl.1*${SHOBJ} $libpaths/libcrypto.1*${SHOBJ}"

        libpaths=`probe --name openssl --search "$path:$packages/openssl/$ver:/usr/lib" --dir "libcrypto" `
        iflags=-I`probe --name openssl --search "$path:$packages/openssl/$ver/include:/usr/include" --dir "openssl/ssl.h"`
        libs="ssl crypto"
        imports="$libpaths/libssl*${SHOBJ} $libpaths/libcrypto*${SHOBJ}"

    else 
        libpaths=`probe --name openssl --search "$path:$packages/openssl/$ver:/usr/lib:/lib:/lib/*-linux-gnu" \
            --dir "libcrypto" `
        iflags=-I`probe --name openssl --search "$path:$packages/openssl/$ver/include:/usr/include" --dir "openssl/ssl.h"`
        libs="ssl crypto"
        imports="$libpaths/libssl*${SHOBJ}* $libpaths/libcrypto*${SHOBJ}*"
    fi
    if [ "$libpaths" = "" ] ; then
        warnComponent "openssl"
        return
    fi
    if [ "$iflags" = "-I" ] ; then
        warnComponent "openssl"
        return
    fi
    CFG_HOST_SSL_MANDATORY=1
    configureComponent --libs "$libs" --libpaths "$libpaths" --iflags "$iflags" --imports "$imports" openssl
}
