<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.8">
  <compounddef id="group___mpr_socket" kind="group">
    <compoundname>MprSocket</compoundname>
    <title>MprSocket</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___mpr_socket_1g5bd6e40cb8a29c92a8f5e1ce9529b726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprCloseSocket</definition>
        <argsstring>(MprSocket *sp, bool graceful)</argsstring>
        <name>mprCloseSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>graceful</declname>
        </param>
        <briefdescription>
<para>Close a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Close a socket. If the <emphasis>graceful</emphasis> option is true, the socket will first wait for written data to drain before doing a graceful close. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graceful</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to do a graceful close. Otherwise, an abortive close will be performed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5739"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprSocket *</type>
        <definition>MprSocket* mprCreateSocket</definition>
        <argsstring>(MprCtx ctx, struct MprSsl *ssl)</argsstring>
        <name>mprCreateSocket</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct MprSsl *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Create a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Create a new socket </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional SSL context if the socket is to support SSL. Use the <ref refid="mpr_8h_17bbe6982e4e64f2f034971b88d3da3af" kindref="member">MPR_SECURE_CLIENT</ref> define to specify that mprCreateSocket should use the default SSL provider. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new socket object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5678"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g1e94b295effb81620c20b7ecf6e0e1d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprFlushSocket</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprFlushSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Flush a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Flush any buffered data in a socket. Standard sockets do not use buffering and this call will do nothing. SSL sockets do buffer and calling mprFlushSocket will write pending written data. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of bytes actually written. Return a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5749"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g8240b2dc5540ae928d19410447c2bab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprGetSocketBlockingMode</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprGetSocketBlockingMode</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Get the socket blocking mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Return the current blocking mode setting. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the socket is in blocking mode. Otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5794"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g64ccf4250b432690a73bb66f0a639f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetSocketError</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprGetSocketError</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Get a socket error code. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This will map a Windows socket error code into a posix error code. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A posix error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5862"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g4ed3619958eac42ab4e8136464ae00c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetSocketFd</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprGetSocketFd</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Get the socket file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the file descriptor associated with a socket. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer file descriptor used by the O/S for the socket. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5821"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1ga4d2f67f80f168a4be7e5f3b96541bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetSocketPort</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprGetSocketPort</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Get the port used by a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the TCP/IP port number used by the socket. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer TCP/IP port number used by the socket. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5830"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g9ba5a2637bcf166c5b3f4289e590bb39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprHasSocketPendingData</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprHasSocketPendingData</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Test if the socket has buffered read data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Use this function to avoid waiting for incoming I/O if data is already buffered. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the socket has pending read data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5803"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g122966f272c5d7d00bab8f66d569d362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprIsSocketEof</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprIsSocketEof</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Test if the other end of the socket has been closed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Determine if the other end of the socket has been closed and the socket is at end-of-file. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the socket is at end-of-file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5812"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1gbeeb5c489632e55d36e2139f8ac0f423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprIsSocketSecure</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprIsSocketSecure</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Determine if the socket is secure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Determine if the socket is using SSL to provide enhanced security. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the socket is using SSL, otherwise zero. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5899"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g52aa9a1c6e3f411df5f4cdd9e787ed16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprOpenClientSocket</definition>
        <argsstring>(MprSocket *sp, cchar *hostName, int port, int flags)</argsstring>
        <name>mprOpenClientSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>hostName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Open a client socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Open a client connection </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned via <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostName</parametername>
</parameternamelist>
<parameterdescription>
<para>Host or IP address to connect to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP/IP port number to connect to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket flags may use the following flags ored together: <itemizedlist>
<listitem><para>MPR_SOCKET_BLOCK - to use blocking I/O. The default is non-blocking. </para></listitem>
<listitem><para>MPR_SOCKET_BROADCAST - Use IPv4 broadcast </para></listitem>
<listitem><para>MPR_SOCKET_DATAGRAM - Use IPv4 datagrams </para></listitem>
<listitem><para>MPR_SOCKET_NOREUSE - Set NOREUSE flag on the socket </para></listitem>
<listitem><para>MPR_SOCKET_NODELAY - Set NODELAY on the socket </para></listitem>
<listitem><para>MPR_SOCKET_THREAD - Process callbacks on a separate thread. </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the connection is successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5696"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1ge3e24d3cf87c63f71440aed20b5486cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprOpenServerSocket</definition>
        <argsstring>(MprSocket *sp, cchar *ip, int port, int flags)</argsstring>
        <name>mprOpenServerSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Open a server socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Open a server socket and listen for client connections. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned via <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ip</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address to bind to. Set to 0.0.0.0 to bind to all possible addresses on a given port. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP/IP port number to connect to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket flags may use the following flags ored together: <itemizedlist>
<listitem><para>MPR_SOCKET_BLOCK - to use blocking I/O. The default is non-blocking. </para></listitem>
<listitem><para>MPR_SOCKET_BROADCAST - Use IPv4 broadcast </para></listitem>
<listitem><para>MPR_SOCKET_DATAGRAM - Use IPv4 datagrams </para></listitem>
<listitem><para>MPR_SOCKET_NOREUSE - Set NOREUSE flag on the socket </para></listitem>
<listitem><para>MPR_SOCKET_NODELAY - Set NODELAY on the socket </para></listitem>
<listitem><para>MPR_SOCKET_THREAD - Process callbacks on a separate thread. </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the connection is successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5721"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1gbff8106d1e1a3b5aa108542d3241f0b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprReadSocket</definition>
        <argsstring>(MprSocket *sp, void *buf, int size)</argsstring>
        <name>mprReadSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read from a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Read data from a socket. The read will return with whatever bytes are available. If none and the socket is in blocking mode, it will block untill there is some data available or the socket is disconnected. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer to hold the read data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of bytes actually read. Return a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5785"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1ge2baa591f0466c9c64f0cf0147ada904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSetSocketBlockingMode</definition>
        <argsstring>(MprSocket *sp, bool on)</argsstring>
        <name>mprSetSocketBlockingMode</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Set the socket blocking mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the blocking mode for a socket. By default a socket is in non-blocking mode where read / write calls will not block. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to zero to put the socket into non-blocking mode. Set to non-zero to enable blocking mode. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The old blocking mode if successful or a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5841"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g51594bafaa2003511990ffd804189a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSetSocketNoDelay</definition>
        <argsstring>(MprSocket *sp, bool on)</argsstring>
        <name>mprSetSocketNoDelay</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Set the socket delay mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the socket delay behavior (nagle algorithm). By default a socket will partial packet writes a little to try to accumulate data and coalesce TCP/IP packages. Setting the delay mode to false may result in higher performance for interactive applications. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to non-zero to put the socket into no delay mode. Set to zero to enable the nagle algorithm. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The old delay mode if successful or a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5853"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1gbd2ae7ff08fb05f45d78f728a3af93a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWriteSocket</definition>
        <argsstring>(MprSocket *sp, void *buf, int len)</argsstring>
        <name>mprWriteSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Write to a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Write a block of data to a socket. If the socket is in non-blocking mode (the default), the write may return having written less than the required bytes. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a block to write to the socket </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to write. This may be less than the requested write length if the socket is in non-blocking mode. Will return a negative MPR error code on errors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of bytes actually written. Return a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5762"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1gbf3c8418ff828a0301005b26ae06df92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWriteSocketString</definition>
        <argsstring>(MprSocket *sp, cchar *str)</argsstring>
        <name>mprWriteSocketString</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Write to a string to a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Write a string to a socket. If the socket is in non-blocking mode (the default), the write may return having written less than the required bytes. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Null terminated string to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of bytes actually written. Return a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5773"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g50a28b5aac234b66ad03d0e3a8e38038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWriteSocketVector</definition>
        <argsstring>(MprSocket *sp, MprIOVec *iovec, int count)</argsstring>
        <name>mprWriteSocketVector</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>MprIOVec *</type>
          <declname>iovec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Write a vector to a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Do scatter/gather I/O by writing a vector of buffers to a socket. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iovec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of data to write before the file contents </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of entries in beforeVect </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of bytes actually written. Return a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5910"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Socket Service. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>The MPR Socket service provides IPv4 and IPv6 capabilities for both client and server endpoints. Datagrams, Broadcast and point to point services are supported. The APIs can be used in both blocking and non-blocking modes. <linebreak/>
<linebreak/>
 The socket service integrates with the MPR worker thread pool and eventing services. Socket connections can be handled by threads from the worker thread pool for scalable, multithreaded applications.</para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving </para></simplesect>
<simplesect kind="see"><para><ref refid="group___mpr_socket" kindref="compound">MprSocket</ref>, <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref>, <ref refid="group___mpr_socket_1g52aa9a1c6e3f411df5f4cdd9e787ed16" kindref="member">mprOpenClientSocket</ref>, <ref refid="group___mpr_socket_1ge3e24d3cf87c63f71440aed20b5486cc" kindref="member">mprOpenServerSocket</ref>, <ref refid="group___mpr_socket_1g5bd6e40cb8a29c92a8f5e1ce9529b726" kindref="member">mprCloseSocket</ref>, <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>, <ref refid="group___mpr_socket_1g1e94b295effb81620c20b7ecf6e0e1d0" kindref="member">mprFlushSocket</ref>, <ref refid="group___mpr_socket_1gbd2ae7ff08fb05f45d78f728a3af93a1" kindref="member">mprWriteSocket</ref>, <ref refid="group___mpr_socket_1gbf3c8418ff828a0301005b26ae06df92" kindref="member">mprWriteSocketString</ref>, <ref refid="group___mpr_socket_1gbff8106d1e1a3b5aa108542d3241f0b5" kindref="member">mprReadSocket</ref>, mprSetSocketCallback, mprSetSocketEventMask, <ref refid="group___mpr_socket_1g8240b2dc5540ae928d19410447c2bab0" kindref="member">mprGetSocketBlockingMode</ref>, <ref refid="group___mpr_socket_1g122966f272c5d7d00bab8f66d569d362" kindref="member">mprIsSocketEof</ref>, <ref refid="group___mpr_socket_1g4ed3619958eac42ab4e8136464ae00c3" kindref="member">mprGetSocketFd</ref>, <ref refid="group___mpr_socket_1ga4d2f67f80f168a4be7e5f3b96541bab" kindref="member">mprGetSocketPort</ref>, <ref refid="group___mpr_socket_1g8240b2dc5540ae928d19410447c2bab0" kindref="member">mprGetSocketBlockingMode</ref>, <ref refid="group___mpr_socket_1g51594bafaa2003511990ffd804189a31" kindref="member">mprSetSocketNoDelay</ref>, <ref refid="group___mpr_socket_1g64ccf4250b432690a73bb66f0a639f7a" kindref="member">mprGetSocketError</ref>, <ref refid="mpr_8h_1978aa9d1ee3d0fe7b50e566f3d471ed3" kindref="member">mprParseIp</ref>, mprSendFileToSocket, <ref refid="mpr_8h_127866b4c10d6e45ffd96604b221cf314" kindref="member">mprSetSocketEof</ref>, <ref refid="group___mpr_socket_1gbeeb5c489632e55d36e2139f8ac0f423" kindref="member">mprIsSocketSecure</ref> <ref refid="group___mpr_socket_1g50a28b5aac234b66ad03d0e3a8e38038" kindref="member">mprWriteSocketVector</ref> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
