<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.8">
  <compounddef id="group___mpr_log" kind="group">
    <compoundname>MprLog</compoundname>
    <title>MprLog</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___mpr_log_1g8ca7894a05a04dc473d942ffc7cd1689" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* MprLogHandler)(MprCtx ctx, int flags, int level, cchar *msg)</definition>
        <argsstring>)(MprCtx ctx, int flags, int level, cchar *msg)</argsstring>
        <name>MprLogHandler</name>
        <briefdescription>
<para>Log handler callback type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Callback prototype for the log handler. Used by mprSetLogHandler to define a message logging handler to process log and error messages. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source filename. Derived by using __FILE__. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source line number. Derived by using __LINE__. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Error flags. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Message logging level. Levels are 0-9 with zero being the most verbose. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message being logged. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2660" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2660" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___mpr_log_1gba80d025830577c73b7fab45b3ecd256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log an error message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Send an error message to the MPR debug logging subsystem. The message will be to the log handler defined by <ref refid="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" kindref="member">mprSetLogHandler</ref>. It is up to the log handler to respond appropriately and log the message. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2692"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g44e05f9b1cb74a3abd9271d140f5d66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprFatalError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprFatalError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a fatal error message and exit. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Send a fatal error message to the MPR debug logging subsystem and then exit the application by calling exit(). The message will be to the log handler defined by <ref refid="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" kindref="member">mprSetLogHandler</ref>. It is up to the log handler to respond appropriately and log the message. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2704"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1gdfefb0345bcaca30d7d86650b06d6bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___mpr_log_1g8ca7894a05a04dc473d942ffc7cd1689" kindref="member">MprLogHandler</ref></type>
        <definition>MprLogHandler mprGetLogHandler</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetLogHandler</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the current MPR debug log handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the log handler defined via <ref refid="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" kindref="member">mprSetLogHandler</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A function of the signature <ref refid="group___mpr_log_1g8ca7894a05a04dc473d942ffc7cd1689" kindref="member">MprLogHandler</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2680"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g86f03e0fb54d0f897fec0981d3671c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprLog</definition>
        <argsstring>(MprCtx ctx, int level, cchar *fmt,...)</argsstring>
        <name>mprLog</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Write a message to the diagnostic log file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Send a message to the MPR logging subsystem. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Logging level for this message. The level is 0-9 with zero being the most verbose. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>mprLog is highly useful as a debugging aid when integrating or when developing new modules. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2730"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g53e8e5ceb47594177a2db18c5acc5f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprMemoryError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprMemoryError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a memory error message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Send a memory error message to the MPR debug logging subsystem. The message will be passed to the log handler defined by <ref refid="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" kindref="member">mprSetLogHandler</ref>. It is up to the log handler to respond appropriately to the fatal message, the MPR takes no other action other than logging the message. Typically, a memory message will be logged and the application will be shutdown. The preferred method of operation is to define a memory depletion callback via <ref refid="group___mpr_1g4e84f505d5b6f74de677ffff29806906" kindref="member">mprCreate</ref>. This will be invoked whenever a memory allocation error occurs. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2718"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g54e411388517de37fddd5537b0339e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprRawLog</definition>
        <argsstring>(MprCtx ctx, int level, cchar *fmt,...)</argsstring>
        <name>mprRawLog</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Write a raw log message to the diagnostic log file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Send a raw message to the MPR logging subsystem. Raw messages do not have any application prefix attached to the message and do not append a newline to the message. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Logging level for this message. The level is 0-9 with zero being the most verbose. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>mprLog is highly useful as a debugging aid when integrating or when developing new modules. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2753"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetLogHandler</definition>
        <argsstring>(MprCtx ctx, MprLogHandler handler, void *handlerData)</argsstring>
        <name>mprSetLogHandler</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_log_1g8ca7894a05a04dc473d942ffc7cd1689" kindref="member">MprLogHandler</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>handlerData</declname>
        </param>
        <briefdescription>
<para>Set an MPR debug log handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Defines a callback handler for MPR debug and error log messages. When output is sent to the debug channel, the log handler will be invoked to accept the output message. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handlerData</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback handler data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2671"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g303a698e00e918f656e35e450f0ec7eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetLogLevel</definition>
        <argsstring>(MprCtx ctx, int level)</argsstring>
        <name>mprSetLogLevel</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set the current logging level. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call defines the maximum level of messages that will be logged. Calls to mprLog specify a message level. If the message level is greater than the defined logging level, the message is ignored. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>New logging level. Must be 0-9 inclusive. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the previous logging level. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6725"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g0c03cfaa89967bee56ef3eebb36b4713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStaticAssert</definition>
        <argsstring>(cchar *loc, cchar *msg)</argsstring>
        <name>mprStaticAssert</name>
        <param>
          <type>cchar *</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output an assertion failed message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This will emit an assertion failed message to the standard error output. It will bypass the logging system. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code location string. Use MPR_LOC to define a file name and line number string suitable for this parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Simple string message to output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2764"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g4d8c3a25cdbb3771266ee265a46156dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStaticError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprStaticError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Write a message to the diagnostic log file without allocating any memory. </para>        </briefdescription>
        <detaileddescription>
<para>Useful for log messages from within the memory allocator. <simplesect kind="par"><title><bold>Description</bold>:</title><para>Send a message to the MPR logging subsystem. This will not allocate any memory while formatting the message. The formatted message string will be truncated in size to <ref refid="mpr_8h_1ab279a1400259da3572a2fd2a8681623" kindref="member">MPR_MAX_STRING</ref> bytes. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2776"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g0b7873bee991ee0160420868906eeb8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprUserError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprUserError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Display an error message to the user. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Display an error message to the user and then send it to the MPR debug logging subsystem. The message will be passed to the log handler defined by mprSetLogHandler. It is up to the log handler to respond appropriately and display the message to the user. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2789"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Logging Services. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving</para></simplesect>
<simplesect kind="see"><para><ref refid="group___mpr_log_1gba80d025830577c73b7fab45b3ecd256" kindref="member">mprError</ref>, <ref refid="group___mpr_log_1g86f03e0fb54d0f897fec0981d3671c41" kindref="member">mprLog</ref>, <ref refid="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" kindref="member">mprSetLogHandler</ref>, <ref refid="group___mpr_log_1g303a698e00e918f656e35e450f0ec7eb" kindref="member">mprSetLogLevel</ref>, <ref refid="group___mpr_log_1g0b7873bee991ee0160420868906eeb8c" kindref="member">mprUserError</ref>, <ref refid="group___mpr_log_1g54e411388517de37fddd5537b0339e07" kindref="member">mprRawLog</ref>, <ref refid="group___mpr_log_1g44e05f9b1cb74a3abd9271d140f5d66d" kindref="member">mprFatalError</ref>, <ref refid="group___mpr_log_1g8ca7894a05a04dc473d942ffc7cd1689" kindref="member">MprLogHandler</ref> <ref refid="group___mpr_log_1gdfefb0345bcaca30d7d86650b06d6bae" kindref="member">mprGetLogHandler</ref>, <ref refid="group___mpr_log_1g53e8e5ceb47594177a2db18c5acc5f65" kindref="member">mprMemoryError</ref>, <ref refid="group___mpr_log_1g0c03cfaa89967bee56ef3eebb36b4713" kindref="member">mprStaticAssert</ref>, <ref refid="group___mpr_log_1g4d8c3a25cdbb3771266ee265a46156dd" kindref="member">mprStaticError</ref> </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
