<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.8">
  <compounddef id="group___mpr_mem" kind="group">
    <compoundname>MprMem</compoundname>
    <title>MprMem</title>
    <innerclass refid="struct_mpr_blk" prot="public">MprBlk</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___mpr_mem_1ge0e48d1c33f626b414aa311fe400cbf0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* MprAllocFailure)(MprCtx ctx, int64 size, int64 total, bool granted)</definition>
        <argsstring>)(MprCtx ctx, int64 size, int64 total, bool granted)</argsstring>
        <name>MprAllocFailure</name>
        <briefdescription>
<para>Memory allocation error callback. </para>        </briefdescription>
        <detaileddescription>
<para>Notifiers are called if mprSetNotifier has been called on a context and a memory allocation fails. All notifiers up the parent context chain are called in order. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory allocation request that failed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>total</parametername>
</parameternamelist>
<parameterdescription>
<para>Total memory allocations so far </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>granted</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true if the request was actually granted, but the application is now exceeding its redline memory limit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4592" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* MprCtx</definition>
        <argsstring></argsstring>
        <name>MprCtx</name>
        <briefdescription>
<para>Memory context type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Blocks of memory are allocated using a memory context as the parent. Any allocated memory block may serve as the memory context for subsequent memory allocations. Freeing a block via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> will release the allocated block and all child blocks. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1513" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_mem_1g9531f8722a082ef0334d496738303663" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprDestructor)(MprCtx ctx)</definition>
        <argsstring>)(MprCtx ctx)</argsstring>
        <name>MprDestructor</name>
        <briefdescription>
<para>Mpr memory block destructors prototype. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return zero if the memory was actually freed. Return non-zero to prevent the memory being freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4600" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4600" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___mpr_mem_1g8453c59fd682fda78bbd18eb9f572dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAlloc</definition>
        <argsstring>(MprCtx ctx, uint size)</argsstring>
        <name>mprAlloc</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate a block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a block of memory using the supplied memory context <emphasis>ctx</emphasis> as the parent. <ref refid="group___mpr_mem_1g8453c59fd682fda78bbd18eb9f572dec" kindref="member">mprAlloc</ref> manages a tree structure of memory blocks. Freeing a block via mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory block to allocate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4824"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g1817af523c1a6f663c792c74190c7ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHeap *</type>
        <definition>MprHeap* mprAllocArena</definition>
        <argsstring>(MprCtx ctx, cchar *name, uint arenaSize, bool threadSafe, MprDestructor destructor)</argsstring>
        <name>mprAllocArena</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>arenaSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>threadSafe</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate a memory arena. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Memory arenas are virtual allocations. When subsequent allocations are done via mprAlloc, the memory will be pinned. On systems without virtual memory, the memory is physically allocated at the time of this call. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to give the arena. Name must be persistent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arenaSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the virtual arena. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threadSafe</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, allocations for memory from the arena will be thread safe. Allocations are faster if threadSafe is false. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the reserved arena. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4761"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g81a5827a39d536c462e9ed1145b50248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHeap *</type>
        <definition>MprHeap* mprAllocHeap</definition>
        <argsstring>(MprCtx ctx, cchar *name, uint heapSize, bool threadSafe, MprDestructor destructor)</argsstring>
        <name>mprAllocHeap</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>threadSafe</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate a memory heap. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Memory heaps map onto the standard system malloc() system. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to give the heap. Name must be persistent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>heapSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory heap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threadSafe</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, allocations for memory from the heap will be thread safe. Allocations are faster if threadSafe is false. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the reserved heap. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4775"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g95dfa054deaafadfbfdb740f0d7d97c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocObj</definition>
        <argsstring>(MprCtx ctx, Type type)</argsstring>
        <name>mprAllocObj</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Allocate an object of a given type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a block of memory large enough to hold an instance of the specified type. This uses the supplied memory context <emphasis>ctx</emphasis> as the parent. This is implemented as a macro </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4903" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4903" bodyend="4903"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1gb61e0804fdc8e8398bacd18e06ed0b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocObjWithDestructor</definition>
        <argsstring>(MprCtx ctx, Type type, MprDestructor destructor) extern void *mprAllocObjWithDestructorZeroed(MprCtx ctx</argsstring>
        <name>mprAllocObjWithDestructor</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate an object of a given type with a destructor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a block of memory large enough to hold an instance of the specified type with a destructor. This uses the supplied memory context <emphasis>ctx</emphasis> as the parent. This is implemented as a macro. this call associates a destructor function with an object. This function will be invoked when the object is freed. Freeing a block will first call the destructor and if that returns zero, mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. Allocate a zeroed object of a given type with a destructor </para></simplesect>
<simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a zeroed block of memory large enough to hold an instance of the specified type with a destructor. This uses the supplied memory context <emphasis>ctx</emphasis> as the parent. This is implemented as a macro. this call associates a destructor function with an object. This function will be invoked when the object is freed. Freeing a block will first call the destructor and if that returns zero, mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4953"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g4681a304da368211a957c3d7f40c107e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocObjZeroed</definition>
        <argsstring>(MprCtx ctx, Type type)</argsstring>
        <name>mprAllocObjZeroed</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Allocate a zeroed object of a given type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a zeroed block of memory large enough to hold an instance of the specified type. This uses the supplied memory context <emphasis>ctx</emphasis> as the parent. This is implemented as a macro </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4917" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4917" bodyend="4917"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1gb4a28f8d8793b16758bef0cb22acc299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHeap *</type>
        <definition>MprHeap* mprAllocSlab</definition>
        <argsstring>(MprCtx ctx, cchar *name, uint objSize, uint count, bool threadSafe, MprDestructor destructor)</argsstring>
        <name>mprAllocSlab</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>objSize</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>threadSafe</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate a memory slab heap. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Memory slab heaps are heaps for constant sized object allocations. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to give the heap. Name must be persistent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>objSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the virtual heap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of objects in slab </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threadSafe</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, allocations for memory from the heap will be thread safe. Allocations are faster if threadSafe is false. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the reserved heap. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4790"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g354a006ab1b3afa765ecf52369df6def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocWithDestructor</definition>
        <argsstring>(MprCtx ctx, uint size, MprDestructor destructor)</argsstring>
        <name>mprAllocWithDestructor</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate an object block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a block of memory using the supplied memory context <emphasis>ctx</emphasis> as the parent. <ref refid="group___mpr_mem_1g354a006ab1b3afa765ecf52369df6def" kindref="member">mprAllocWithDestructor</ref> associates a destructor function with an object. This function will be invoked when the object is freed. Freeing a block will first call the destructor and if that returns zero, mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory block to allocate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4844"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g9765c5e6c3653ed716df99f1eb883fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocWithDestructorZeroed</definition>
        <argsstring>(MprCtx ctx, uint size, MprDestructor destructor)</argsstring>
        <name>mprAllocWithDestructorZeroed</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate an object block of memory and zero it. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a zeroed block of memory using the supplied memory context <emphasis>ctx</emphasis> as the parent. <ref refid="group___mpr_mem_1g354a006ab1b3afa765ecf52369df6def" kindref="member">mprAllocWithDestructor</ref> associates a destructor function with an object. This function will be invoked when the object is freed. Freeing a block will first call the destructor and if that returns zero, mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory block to allocate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4861"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1gb6e0fd9b58e841c28bb49ec2ab37072d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocZeroed</definition>
        <argsstring>(MprCtx ctx, uint size)</argsstring>
        <name>mprAllocZeroed</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate a zeroed block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a zeroed block of memory using the supplied memory context <emphasis>ctx</emphasis> as the parent. <ref refid="group___mpr_mem_1g8453c59fd682fda78bbd18eb9f572dec" kindref="member">mprAlloc</ref> manages a tree structure of memory blocks. Freeing a block via mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory block to allocate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4875"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprFree</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>mprFree</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free a block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>mprFree should be used to free memory allocated by mprAlloc, or mprRealloc. This call will ignore calls to free a null pointer, thus it is an acceptable idiom to free a pointer without testing its value for null. When mprFree is called it will first invoke any object destructor function for the allocated block. If this destructor returns zero, it will then proceed and free all allocated children before finally releasing the block. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory to free. If NULL, take no action. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if the block was actually freed. If the destructor prevented the freeing, a non-zero value will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5120"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1ga2917f1fe62535e7f18549bad3c87c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprGetParent</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetParent</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the memory parent of a block. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Return the parent memory context for a block </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return the memory owning this block </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5200"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g46b725c5e3a7818e3051401b016f7902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprHasAllocError</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprHasAllocError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Determine if the MPR has encountered memory allocation errors. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns true if the MPR has had a memory allocation error. Allocation errors occur if any memory allocation would cause the application to exceed the configured redline limit, or if any O/S memory allocation request fails. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if a memory allocation error has occurred. Otherwise returns FALSE. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5175"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g3fa0c34d79f33c76f6d6813f0774b8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprRealloc</definition>
        <argsstring>(MprCtx ctx, void *ptr, uint size)</argsstring>
        <name>mprRealloc</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reallocate a block. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Reallocates a block increasing its size. If the specified size is less than the current block size, the call will ignore the request and simply return the existing block. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory to reallocate. If NULL, call malloc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>New size of the required memory block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to realloc and mprRealloc. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4889"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g8a1a2ca6fb1f9e1cd45660ba1004e9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprResetAllocError</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprResetAllocError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Reset the memory allocation error flag. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Reset the alloc error flag triggered. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5183"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g1aba81525e6f3570db267f1a71c96d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetAllocLimits</definition>
        <argsstring>(MprCtx ctx, uint redline, uint maxMemory)</argsstring>
        <name>mprSetAllocLimits</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>redline</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>maxMemory</declname>
        </param>
        <briefdescription>
<para>Configure the application memory limits. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Configure memory limits to constrain memory usage by the application. The memory allocation subsystem will check these limits before granting memory allocation requrests. The redLine is a soft limit that if exceeded will invoke the memory allocation callback, but will still honor the request. The maxMemory limit is a hard limit. The MPR will prevent allocations which exceed this maximum. The memory callback handler is defined via the <ref refid="group___mpr_1g4e84f505d5b6f74de677ffff29806906" kindref="member">mprCreate</ref> call. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>redline</parametername>
</parameternamelist>
<parameterdescription>
<para>Soft memory limit. If exceeded, the request will be granted, but the memory handler will be invoked. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxMemory</parametername>
</parameternamelist>
<parameterdescription>
<para>Hard memory limit. If exceeded, the request will not be granted, and the memory handler will be invoked. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5227"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1gdeb570e7b9f2ee67eef01e574baaecb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetDestructor</definition>
        <argsstring>(void *ptr, MprDestructor destructor)</argsstring>
        <name>mprSetDestructor</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Update the destructor for a block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call updates the destructor for a block of memory allocated via mprAllocWithDestructor. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory to free. If NULL, take no action. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> is called. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5129"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1ga08b7e0447aa2f5a380d9d3daa1f5f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrdup</definition>
        <argsstring>(MprCtx ctx, cchar *str)</argsstring>
        <name>mprStrdup</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Safe replacement for strdup. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title><bold>Description</bold>:</title><para><ref refid="group___mpr_mem_1ga08b7e0447aa2f5a380d9d3daa1f5f86" kindref="member">mprStrdup()</ref> should be used as a replacement for <bold>strdup</bold> wherever possible. It allows the strdup to be copied to be NULL, in which case it will allocate an empty string. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to string to duplicate. If <bold>str</bold> is NULL, allocate a new string containing only a trailing NULL character. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an allocated string including trailing null. </para></simplesect>
<simplesect kind="remark"><para>Memory allocated via <ref refid="group___mpr_mem_1ga08b7e0447aa2f5a380d9d3daa1f5f86" kindref="member">mprStrdup()</ref> must be freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4989"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g857ed05b61f4112d319fe75545d0a081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrndup</definition>
        <argsstring>(MprCtx ctx, cchar *str, uint size)</argsstring>
        <name>mprStrndup</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Duplicate a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title><bold>Description</bold>:</title><para>Copy a string into a newly allocated block. The new block will be sized to the maximum of the length of the existing string (plus a null) and the requested size. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the block to duplicate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested minimum size of the allocated block holding the duplicated string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an allocated block. Caller must free via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4976"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Memory Allocation Service. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>The MPR provides a memory manager that sits above malloc. This layer provides arena and slab based allocations with a tree structured allocation mechanism. The goal of the layer is to provide a fast, secure, scalable memory allocator suited for embedded applications in multithreaded environments. <linebreak/>
<linebreak/>
 By using a tree structured network of memory contexts, error recovery in applications and memory freeing becomes much easier and more reliable. When a memory block is allocated a parent memory block must be specified. When the parent block is freed, all its children are automatically freed. <linebreak/>
<linebreak/>
 The MPR handles memory allocation errors globally. The application can configure a memory limits and redline so that memory depletion can be proactively detected and handled. This relieves most cost from detecting and handling allocation errors. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving</para></simplesect>
<simplesect kind="see"><para><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref>, <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>, <ref refid="group___mpr_mem_1g3fa0c34d79f33c76f6d6813f0774b8b4" kindref="member">mprRealloc</ref>, <ref refid="group___mpr_mem_1g8453c59fd682fda78bbd18eb9f572dec" kindref="member">mprAlloc</ref>, <ref refid="group___mpr_mem_1g354a006ab1b3afa765ecf52369df6def" kindref="member">mprAllocWithDestructor</ref>, <ref refid="group___mpr_mem_1g9765c5e6c3653ed716df99f1eb883fd3" kindref="member">mprAllocWithDestructorZeroed</ref>, <ref refid="group___mpr_mem_1gb6e0fd9b58e841c28bb49ec2ab37072d" kindref="member">mprAllocZeroed</ref>, <ref refid="group___mpr_mem_1ga2917f1fe62535e7f18549bad3c87c3f" kindref="member">mprGetParent</ref>, <ref refid="group___mpr_1g4e84f505d5b6f74de677ffff29806906" kindref="member">mprCreate</ref>, <ref refid="group___mpr_mem_1g1aba81525e6f3570db267f1a71c96d1d" kindref="member">mprSetAllocLimits</ref>, <ref refid="group___mpr_mem_1gb61e0804fdc8e8398bacd18e06ed0b2e" kindref="member">mprAllocObjWithDestructor</ref>, mprAllocObjWithDestructorZeroed, <ref refid="group___mpr_mem_1g46b725c5e3a7818e3051401b016f7902" kindref="member">mprHasAllocError</ref> <ref refid="group___mpr_mem_1g8a1a2ca6fb1f9e1cd45660ba1004e9a2" kindref="member">mprResetAllocError</ref>, mprMemdup, <ref refid="group___mpr_mem_1g857ed05b61f4112d319fe75545d0a081" kindref="member">mprStrndup</ref>, <ref refid="mpr_8h_1bcb752b124b706ebff6798cfeafc9f99" kindref="member">mprMemcpy</ref>, </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
