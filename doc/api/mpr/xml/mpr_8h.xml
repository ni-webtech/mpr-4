<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.8">
  <compounddef id="mpr_8h" kind="file">
    <compoundname>mpr.h</compoundname>
    <includes local="yes">buildConfig.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">arpa/inet.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">dirent.h</includes>
    <includes local="no">dlfcn.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">grp.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">libgen.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">mach-o/dyld.h</includes>
    <includes local="no">netdb.h</includes>
    <includes local="no">net/if.h</includes>
    <includes local="no">netinet/in.h</includes>
    <includes local="no">netinet/tcp.h</includes>
    <includes local="no">sys/poll.h</includes>
    <includes local="no">pthread.h</includes>
    <includes local="no">pwd.h</includes>
    <includes local="no">resolv.h</includes>
    <includes local="no">setjmp.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">syslog.h</includes>
    <includes local="no">sys/ioctl.h</includes>
    <includes local="no">sys/mman.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/param.h</includes>
    <includes local="no">sys/resource.h</includes>
    <includes local="no">sys/sem.h</includes>
    <includes local="no">sys/shm.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">sys/select.h</includes>
    <includes local="no">sys/sysctl.h</includes>
    <includes local="no">sys/time.h</includes>
    <includes local="no">sys/times.h</includes>
    <includes local="no">sys/uio.h</includes>
    <includes local="no">sys/utsname.h</includes>
    <includes local="no">sys/wait.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">libkern/OSAtomic.h</includes>
    <includes local="no">float.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">winsock2.h</includes>
    <includes local="no">ws2tcpip.h</includes>
    <includes local="no">conio.h</includes>
    <includes local="no">direct.h</includes>
    <includes local="no">io.h</includes>
    <includes local="no">malloc.h</includes>
    <includes local="no">process.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">windows.h</includes>
    <includes local="no">shlobj.h</includes>
    <includes local="no">shellapi.h</includes>
    <includes local="no">wincrypt.h</includes>
    <includes local="no">crtdbg.h</includes>
    <incdepgraph>
      <node id="32">
        <label>sys/stat.h</label>
      </node>
      <node id="55">
        <label>process.h</label>
      </node>
      <node id="8">
        <label>grp.h</label>
      </node>
      <node id="23">
        <label>stdarg.h</label>
      </node>
      <node id="38">
        <label>sys/select.h</label>
      </node>
      <node id="15">
        <label>netinet/in.h</label>
      </node>
      <node id="3">
        <label>arpa/inet.h</label>
      </node>
      <node id="41">
        <label>sys/times.h</label>
      </node>
      <node id="57">
        <label>windows.h</label>
      </node>
      <node id="14">
        <label>net/if.h</label>
      </node>
      <node id="12">
        <label>mach-o/dyld.h</label>
      </node>
      <node id="47">
        <label>float.h</label>
      </node>
      <node id="50">
        <label>ws2tcpip.h</label>
      </node>
      <node id="26">
        <label>stdint.h</label>
      </node>
      <node id="30">
        <label>sys/mman.h</label>
      </node>
      <node id="25">
        <label>stdlib.h</label>
      </node>
      <node id="39">
        <label>sys/sysctl.h</label>
      </node>
      <node id="36">
        <label>sys/shm.h</label>
      </node>
      <node id="20">
        <label>resolv.h</label>
      </node>
      <node id="21">
        <label>setjmp.h</label>
      </node>
      <node id="17">
        <label>sys/poll.h</label>
      </node>
      <node id="0">
        <label>mpr.h</label>
        <link refid="mpr.h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>errno.h</label>
      </node>
      <node id="53">
        <label>io.h</label>
      </node>
      <node id="7">
        <label>fcntl.h</label>
      </node>
      <node id="54">
        <label>malloc.h</label>
      </node>
      <node id="46">
        <label>libkern/OSAtomic.h</label>
      </node>
      <node id="29">
        <label>sys/ioctl.h</label>
      </node>
      <node id="51">
        <label>conio.h</label>
      </node>
      <node id="52">
        <label>direct.h</label>
      </node>
      <node id="35">
        <label>sys/sem.h</label>
      </node>
      <node id="56">
        <label>stddef.h</label>
      </node>
      <node id="13">
        <label>netdb.h</label>
      </node>
      <node id="49">
        <label>winsock2.h</label>
      </node>
      <node id="11">
        <label>limits.h</label>
      </node>
      <node id="28">
        <label>syslog.h</label>
      </node>
      <node id="34">
        <label>sys/resource.h</label>
      </node>
      <node id="16">
        <label>netinet/tcp.h</label>
      </node>
      <node id="18">
        <label>pthread.h</label>
      </node>
      <node id="31">
        <label>sys/types.h</label>
      </node>
      <node id="10">
        <label>libgen.h</label>
      </node>
      <node id="27">
        <label>string.h</label>
      </node>
      <node id="45">
        <label>unistd.h</label>
      </node>
      <node id="33">
        <label>sys/param.h</label>
      </node>
      <node id="42">
        <label>sys/uio.h</label>
      </node>
      <node id="22">
        <label>signal.h</label>
      </node>
      <node id="61">
        <label>crtdbg.h</label>
      </node>
      <node id="58">
        <label>shlobj.h</label>
      </node>
      <node id="1">
        <label>buildConfig.h</label>
      </node>
      <node id="2">
        <label>time.h</label>
      </node>
      <node id="48">
        <label>math.h</label>
      </node>
      <node id="44">
        <label>sys/wait.h</label>
      </node>
      <node id="40">
        <label>sys/time.h</label>
      </node>
      <node id="4">
        <label>ctype.h</label>
      </node>
      <node id="37">
        <label>sys/socket.h</label>
      </node>
      <node id="19">
        <label>pwd.h</label>
      </node>
      <node id="60">
        <label>wincrypt.h</label>
      </node>
      <node id="24">
        <label>stdio.h</label>
      </node>
      <node id="59">
        <label>shellapi.h</label>
      </node>
      <node id="43">
        <label>sys/utsname.h</label>
      </node>
      <node id="6">
        <label>dlfcn.h</label>
      </node>
      <node id="5">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_mpr" prot="public">Mpr</innerclass>
    <innerclass refid="struct_mpr_alloc" prot="public">MprAlloc</innerclass>
    <innerclass refid="struct_mpr_blk" prot="public">MprBlk</innerclass>
    <innerclass refid="struct_mpr_buf" prot="public">MprBuf</innerclass>
    <innerclass refid="struct_mpr_cmd" prot="public">MprCmd</innerclass>
    <innerclass refid="struct_mpr_cmd_child" prot="public">MprCmdChild</innerclass>
    <innerclass refid="struct_mpr_cmd_file" prot="public">MprCmdFile</innerclass>
    <innerclass refid="struct_mpr_cond" prot="public">MprCond</innerclass>
    <innerclass refid="struct_mpr_date" prot="public">MprDate</innerclass>
    <innerclass refid="struct_mpr_dir_entry" prot="public">MprDirEntry</innerclass>
    <innerclass refid="struct_mpr_dispatcher" prot="public">MprDispatcher</innerclass>
    <innerclass refid="struct_mpr_dispatcher_service" prot="public">MprDispatcherService</innerclass>
    <innerclass refid="struct_mpr_event" prot="public">MprEvent</innerclass>
    <innerclass refid="struct_mpr_file" prot="public">MprFile</innerclass>
    <innerclass refid="struct_mpr_file_system" prot="public">MprFileSystem</innerclass>
    <innerclass refid="struct_mpr_hash" prot="public">MprHash</innerclass>
    <innerclass refid="struct_mpr_hash_table" prot="public">MprHashTable</innerclass>
    <innerclass refid="struct_mpr_heap" prot="public">MprHeap</innerclass>
    <innerclass refid="struct_mpr_i_o_vec" prot="public">MprIOVec</innerclass>
    <innerclass refid="struct_mpr_key_value" prot="public">MprKeyValue</innerclass>
    <innerclass refid="struct_mpr_list" prot="public">MprList</innerclass>
    <innerclass refid="struct_mpr_log" prot="public">MprLog</innerclass>
    <innerclass refid="struct_mpr_mem" prot="public">MprMem</innerclass>
    <innerclass refid="struct_mpr_module" prot="public">MprModule</innerclass>
    <innerclass refid="struct_mpr_module_service" prot="public">MprModuleService</innerclass>
    <innerclass refid="struct_mpr_mutex" prot="public">MprMutex</innerclass>
    <innerclass refid="struct_mpr_os_service" prot="public">MprOsService</innerclass>
    <innerclass refid="struct_mpr_path" prot="public">MprPath</innerclass>
    <innerclass refid="struct_mpr_region" prot="public">MprRegion</innerclass>
    <innerclass refid="struct_mpr_rom_file_system" prot="public">MprRomFileSystem</innerclass>
    <innerclass refid="struct_mpr_rom_inode" prot="public">MprRomInode</innerclass>
    <innerclass refid="struct_mpr_socket" prot="public">MprSocket</innerclass>
    <innerclass refid="struct_mpr_socket_provider" prot="public">MprSocketProvider</innerclass>
    <innerclass refid="struct_mpr_socket_service" prot="public">MprSocketService</innerclass>
    <innerclass refid="struct_mpr_spin" prot="public">MprSpin</innerclass>
    <innerclass refid="struct_mpr_string" prot="public">MprString</innerclass>
    <innerclass refid="struct_mpr_synch" prot="public">MprSynch</innerclass>
    <innerclass refid="struct_mpr_test_case" prot="public">MprTestCase</innerclass>
    <innerclass refid="struct_mpr_test_def" prot="public">MprTestDef</innerclass>
    <innerclass refid="struct_mpr_test_failure" prot="public">MprTestFailure</innerclass>
    <innerclass refid="struct_mpr_test_group" prot="public">MprTestGroup</innerclass>
    <innerclass refid="struct_mpr_test_service" prot="public">MprTestService</innerclass>
    <innerclass refid="struct_mpr_thread" prot="public">MprThread</innerclass>
    <innerclass refid="struct_mpr_thread_local" prot="public">MprThreadLocal</innerclass>
    <innerclass refid="struct_mpr_thread_service" prot="public">MprThreadService</innerclass>
    <innerclass refid="struct_mpr_wait_handler" prot="public">MprWaitHandler</innerclass>
    <innerclass refid="struct_mpr_wait_service" prot="public">MprWaitService</innerclass>
    <innerclass refid="struct_mpr_worker" prot="public">MprWorker</innerclass>
    <innerclass refid="struct_mpr_worker_service" prot="public">MprWorkerService</innerclass>
    <innerclass refid="struct_mpr_worker_stats" prot="public">MprWorkerStats</innerclass>
    <innerclass refid="struct_mpr_xml" prot="public">MprXml</innerclass>
    <innerclass refid="structtimezone" prot="public">timezone</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="mpr_8h_1e9ff83befe4c86669b32e0310b811141" prot="public" static="no">
        <name>__USE_ISOC99</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="226" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_17fd14a22366abb406582723ffe7b46cb" prot="public" static="no">
        <name>__WALL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="608" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1411c46599e926f8cdf49c63957255359" prot="public" static="no">
        <name>_CRT_SECURE_NO_DEPRECATE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="285" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12c17983b397e94281369635974587c66" prot="public" static="no">
        <name>_h_MPR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1329" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1002ee2ad0ab6ee35facf1fe6968df67c" prot="public" static="no">
        <name>_h_MPR_OS_HDRS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="37" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19f09fffde1bc17bf8927f2ae5bdbd7ff" prot="public" static="no">
        <name>_h_MPR_TEST</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6942" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6942" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1684e4462d8823a44c19b9f36332559f7" prot="public" static="no">
        <name>_h_MPR_TUNE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1051" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1051" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c50762666aa00bd3a4308158510f1748" prot="public" static="no">
        <name>_WIN32_WINNT</name>
        <initializer>0x501</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="291" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_119865ecdd2722e5127c2c6b6effa73dc" prot="public" static="no">
        <name>access</name>
        <initializer>_access</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="696" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_117b7663631ffee79ad50490016da8a26" prot="public" static="no">
        <name>assert</name>
        <param><defname>C</defname></param>
        <initializer>assertTrue(gp, MPR_LOC, C, #C)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6986" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f41a808d8edd9bd60eb34b55a8ef6207" prot="public" static="no">
        <name>BITS</name>
        <param><defname>type</defname></param>
        <initializer>(BITSPERBYTE * (int) sizeof(type))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="399" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12a8ea87871fc789a6d9364c79eee0137" prot="public" static="no">
        <name>BITSPERBYTE</name>
        <initializer>(8 * sizeof(char))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="396" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11b9e8650aa1e9b15d72e7bcf66bb3ee2" prot="public" static="no">
        <name>BLD_FEATURE_MEMORY_DEBUG</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4603" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1efed55de09d28a7af5b25e525b4b8fa8" prot="public" static="no">
        <name>BLD_FEATURE_MEMORY_STATS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4604" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_180440dd187b0b61612bd4eaf7e420b78" prot="public" static="no">
        <name>BLD_HAS_UNNAMED_UNIONS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="463" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19ebf7229784b92a0ebd2b89603e64c11" prot="public" static="no">
        <name>chdir</name>
        <initializer>_chdir</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="697" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_136391d58edb752de4dceff108883808b" prot="public" static="no">
        <name>chmod</name>
        <initializer>_chmod</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="796" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19c7f6d5331abb2692a876d5ee67474b7" prot="public" static="no">
        <name>close</name>
        <initializer>_close</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="698" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a14fa587d16f7b336fc999be98588f04" prot="public" static="no">
        <name>closesocket</name>
        <param><defname>x</defname></param>
        <initializer>close(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="601" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a14fa587d16f7b336fc999be98588f04" prot="public" static="no">
        <name>closesocket</name>
        <param><defname>x</defname></param>
        <initializer>close(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="481" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ba8481985c201ff726f349d7f2d09895" prot="public" static="no">
        <name>E2BIG</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="738" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c2a2e9fa555401f94478f74e01868032" prot="public" static="no">
        <name>EACCES</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="762" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_161676e39b42371c65c3b960a91887b03" prot="public" static="no">
        <name>EADDRINUSE</name>
        <initializer>46</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="756" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1556612e55358838192165684c971a44f" prot="public" static="no">
        <name>EADDRNOTAVAIL</name>
        <initializer>49</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="754" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f0fac1cea1165b4debec7f686edf3313" prot="public" static="no">
        <name>EAGAIN</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="742" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a4ccb54aa806de3e41a8515f06db85d4" prot="public" static="no">
        <name>EALREADY</name>
        <initializer>37</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="750" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c54507d66b43ad12f9356257323c0018" prot="public" static="no">
        <name>EBADF</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="740" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18368025077a0385849d6817b2007c095" prot="public" static="no">
        <name>EBUSY</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="765" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_147b42c351e0e011a048058d224205c0f" prot="public" static="no">
        <name>ECHILD</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="741" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_145342991e001e28bbf87916d92b7e09a" prot="public" static="no">
        <name>ECONNABORTED</name>
        <initializer>53</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="758" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ad88020b394ef1aa4af2f4ef9b4c8b39" prot="public" static="no">
        <name>ECONNREFUSED</name>
        <initializer>45</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="753" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1dd4258b08af02fbe4590fbaae7260037" prot="public" static="no">
        <name>ECONNRESET</name>
        <initializer>44</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="752" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15fe247e079b591a68e0fdbf7caec5b70" prot="public" static="no">
        <name>EDOM</name>
        <initializer>33</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="781" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_10a3bef9e5c47e42917692b5dae3b5498" prot="public" static="no">
        <name>EEXIST</name>
        <initializer>17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="766" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13f317946e043623f9d6b93dbf60e6316" prot="public" static="no">
        <name>EFAULT</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="763" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f5401a500939ed1812c04ca200b95eef" prot="public" static="no">
        <name>EFBIG</name>
        <initializer>27</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="775" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_16c045d5be06e715cc335784a7320714e" prot="public" static="no">
        <name>EINPROGRESS</name>
        <initializer>36</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="749" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_146b83d9f6c23b1b65a8cecfd775ddaed" prot="public" static="no">
        <name>EINTR</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="735" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12d1678d5a7cc8ce499643f3b8957def4" prot="public" static="no">
        <name>EINVAL</name>
        <initializer>22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="771" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="771" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_170979f50f9c83e5aebab3d6a1bd4cf35" prot="public" static="no">
        <name>EIO</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="736" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1164ca8549da7a385e2fe1cba823b9eaf" prot="public" static="no">
        <name>EISCONN</name>
        <initializer>56</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="755" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1e22c3a1e0a38f3896de238cc30d0e19b" prot="public" static="no">
        <name>EISDIR</name>
        <initializer>21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="770" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_164a75c174882ddbfa726c7fd040f87a1" prot="public" static="no">
        <name>EMFILE</name>
        <initializer>24</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="773" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_197f59fa1a5a2f61b792c1b9dfc218072" prot="public" static="no">
        <name>EMLINK</name>
        <initializer>31</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="779" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ac51995026fa19cdd0ad84a272304af0" prot="public" static="no">
        <name>ENETDOWN</name>
        <initializer>43</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="751" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="751" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13f91f1ad503432783c7a5d1481b45419" prot="public" static="no">
        <name>ENETUNREACH</name>
        <initializer>51</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="757" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15554094b3fb4bb6ebeb0157cb3f82a55" prot="public" static="no">
        <name>ENFILE</name>
        <initializer>23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="772" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b9b8cc17d1947160d13faaba7a18d6d1" prot="public" static="no">
        <name>ENODEV</name>
        <initializer>19</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="768" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_103e689f378f643d16ea7537918528a48" prot="public" static="no">
        <name>ENOENT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="733" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14d0b1b435ec441e7d50a430b83df5832" prot="public" static="no">
        <name>ENOEXEC</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="739" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_16a05c923dad0c1208043e9c20a58c8e5" prot="public" static="no">
        <name>ENOMEM</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="761" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1088abe8bad2df798edad3053d719b937" prot="public" static="no">
        <name>ENOSPC</name>
        <initializer>28</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="776" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="776" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19262fb92f7ef662d0bdd577912a5b101" prot="public" static="no">
        <name>ENOTDIR</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="769" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="769" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c3daf409082bb528032f4452a81e1034" prot="public" static="no">
        <name>ENOTTY</name>
        <initializer>25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="774" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="774" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12b3884b11e4932bd372bb6d899d6fbfe" prot="public" static="no">
        <name>ENXIO</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="737" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_173c26ec2299e03abff701454303a1b21" prot="public" static="no">
        <name>EOSERR</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="764" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="764" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1dd669d31505a077f769cff8e66c780b3" prot="public" static="no">
        <name>EPERM</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="732" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15f8d33deb08fa27c04897b278ac7f965" prot="public" static="no">
        <name>EPIPE</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="780" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a1591a4f3a86360108de5b9ba34980ca" prot="public" static="no">
        <name>ERANGE</name>
        <initializer>34</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="782" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1cb02bb67dddd7ca8cf82634a0781d58d" prot="public" static="no">
        <name>EROFS</name>
        <initializer>30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="778" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_10e42d4f9fecdcf5fcca2b333252173c3" prot="public" static="no">
        <name>ESPIPE</name>
        <initializer>29</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="777" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="777" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1462e47a8af6288232a5df548221ada4c" prot="public" static="no">
        <name>ESRCH</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="734" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14a3a0b3605fd3b2336455062ee8e25f0" prot="public" static="no">
        <name>EWOULDBLOCK</name>
        <initializer>EAGAIN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="748" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13396cf9fb0ff5af3a18dd2a2bbdb21e1" prot="public" static="no">
        <name>EXDEV</name>
        <initializer>18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="767" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f837744613408b57dc3654fbc3bcf900" prot="public" static="no">
        <name>F_OK</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="729" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_10e636fa2b17b2a8565f9b0b1feda3ef7" prot="public" static="no">
        <name>FILE_FLAG_FIRST_PIPE_INSTANCE</name>
        <initializer>0x00080000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="791" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="791" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12c12e4b6615ac6838a99d5b6fa619683" prot="public" static="no">
        <name>fileno</name>
        <initializer>_fileno</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="699" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="699" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a84a9ac582a3b7d9a0dea52e851855ea" prot="public" static="no">
        <name>fstat</name>
        <initializer>_fstat</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="700" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15e8e503c240e5fb2f033c4a27b2e3556" prot="public" static="no">
        <name>getcwd</name>
        <initializer>_getcwd</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="701" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1cf2940fe9f29eb438f40629fd4fbb2b6" prot="public" static="no">
        <name>getpid</name>
        <initializer>_getpid</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="702" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18740db2845242dbd24cab6dbdee80b6a" prot="public" static="no">
        <name>gettimezone</name>
        <initializer>_gettimezone</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="703" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="703" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_16a2c9a3bc3c1913f3268d4d980d68f29" prot="public" static="no">
        <name>HAVE_SOCKLEN_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="688" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_100d24c7231be28dbaf71f5408f30e44c" prot="public" static="no">
        <name>inline</name>
        <initializer>__inline</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="795" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a019dea17ce6a1c70bb0b9555a1c56a5" prot="public" static="no">
        <name>INT64</name>
        <param><defname>x</defname></param>
        <initializer>(x##i64)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="689" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a019dea17ce6a1c70bb0b9555a1c56a5" prot="public" static="no">
        <name>INT64</name>
        <param><defname>x</defname></param>
        <initializer>(x##LL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="598" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a019dea17ce6a1c70bb0b9555a1c56a5" prot="public" static="no">
        <name>INT64</name>
        <param><defname>x</defname></param>
        <initializer>(x##LL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="478" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b4f518dad3f3746d2d7dc2729b498844" prot="public" static="no">
        <name>isNan</name>
        <param><defname>f</defname></param>
        <initializer>(_isnan(f))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="797" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b4f518dad3f3746d2d7dc2729b498844" prot="public" static="no">
        <name>isNan</name>
        <param><defname>f</defname></param>
        <initializer>(f == FP_NAN)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="489" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15373d0c12c14bccc88aee5506f7adf73" prot="public" static="no">
        <name>ITOP</name>
        <param><defname>i</defname></param>
        <initializer>((void*) ((int) i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="361" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15ff196a41066e6303dcd9b13bf07c8fc" prot="public" static="no">
        <name>LD_LIBRARY_PATH</name>
        <initializer>&quot;DYLD_LIBRARY_PATH&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="627" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15ff196a41066e6303dcd9b13bf07c8fc" prot="public" static="no">
        <name>LD_LIBRARY_PATH</name>
        <initializer>&quot;LD_LIBRARY_PATH&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="514" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1217a0bd562b98ae8c2ffce44935351e1" prot="public" static="no">
        <name>likely</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="452" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1dcc28ed03a110e661058c2a3be6ae660" prot="public" static="no">
        <name>lock</name>
        <param><defname>arg</defname></param>
        <initializer>mprLock(arg-&gt;mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4227" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1159ca84d25a5487d8e81e4438725df19" prot="public" static="no">
        <name>LOG</name>
        <initializer>if (mprGetMpr()-&gt;logLevel &gt; 1) mprLog</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2737" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1160e48b6f44d4559f0859360a340cf23" prot="public" static="no">
        <name>lseek</name>
        <initializer>_lseek</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="704" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_185e43299f92931895c878db28d42dfe2" prot="public" static="no">
        <name>LTOP</name>
        <param><defname>i</defname></param>
        <initializer>((void*) ((int) i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="363" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15400848f66ece906e104c079e0f46968" prot="public" static="no">
        <name>MAIN</name>
        <param><defname>name</defname></param>
        <param><defname>argc</defname></param>
        <param><defname>argv</defname></param>
        <initializer>int main(argc, argv)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1469" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ffe776513b24d84b39af8ab0930fef7f" prot="public" static="no">
        <name>max</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(((a) &gt; (b)) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="423" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1fb31aa2d196755fb259d43a03c18c9d7" prot="public" static="no">
        <name>MAX_FLOAT</name>
        <initializer>DBL_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="788" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1fb31aa2d196755fb259d43a03c18c9d7" prot="public" static="no">
        <name>MAX_FLOAT</name>
        <initializer>MAXFLOAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="613" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1fb31aa2d196755fb259d43a03c18c9d7" prot="public" static="no">
        <name>MAX_FLOAT</name>
        <initializer>MAXFLOAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="488" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1da488b1a153e29f9ae0b098de0d6912d" prot="public" static="no">
        <name>MAXINT</name>
        <initializer>0x7fffffff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="405" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1df6529b6d72ba7238a6ef8ec08a79fa1" prot="public" static="no">
        <name>MAXINT64</name>
        <initializer>INT64(0x7fffffffffffffff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="409" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c6afabdc09a49a433ee19d8a9486056d" prot="public" static="no">
        <name>min</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(((a) &lt; (b)) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="426" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18643f5518196173a68f3f73d9636f534" prot="public" static="no">
        <name>mkdir</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>_mkdir(a)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="705" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f204108f9f9619d41a742f3ca271a4b9" prot="public" static="no">
        <name>MPR</name>
        <initializer>_globalMpr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6541" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14fcf8621ffc3e8b97555a9d581a16609" prot="public" static="no">
        <name>MPR_64_BIT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="360" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15bd8fcd00889a608037b233dc61639dc" prot="public" static="no">
        <name>MPR_ALLOC_ALIGN</name>
        <param><defname>x</defname></param>
        <initializer>(((x) + 7 ) &amp; ~7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4621" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_105d9bf559100dbe8e95954d8e146773b" prot="public" static="no">
        <name>MPR_ALLOC_ARENA_HEAP</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4669" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_117cce356fcd00552643aa606f53311a2" prot="public" static="no">
        <name>MPR_ALLOC_BIGGEST</name>
        <initializer>0x0FFFFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4616" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_10973ef9ec77e416d4aed95c933f7dd9b" prot="public" static="no">
        <name>MPR_ALLOC_FREE_CHILDREN</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4672" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c1d96966968d0673e51331a985254528" prot="public" static="no">
        <name>MPR_ALLOC_FROM_MALLOC</name>
        <initializer>0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4615" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4615" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_17921f9c81406700c54e0934693874be6" prot="public" static="no">
        <name>MPR_ALLOC_HAS_DESTRUCTOR</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4612" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14640acb577ab983a7f9b976db440dd60" prot="public" static="no">
        <name>MPR_ALLOC_HAS_ERROR</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4613" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1e033c06557eac3cb564f7f70e37a4098" prot="public" static="no">
        <name>MPR_ALLOC_HDR_SIZE</name>
        <initializer>(MPR_ALLOC_ALIGN(sizeof(struct <ref refid="struct_mpr_blk" kindref="compound">MprBlk</ref>)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4644" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d6216006cd7f8885080da07ed72a8373" prot="public" static="no">
        <name>MPR_ALLOC_IS_HEAP</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4614" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c381c99c899ce67e9cece3670005c60b" prot="public" static="no">
        <name>MPR_ALLOC_MAGIC</name>
        <initializer>0xe814ecab</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4580" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1571760a0054f5b11981533f99a6dae6b" prot="public" static="no">
        <name>MPR_ALLOC_MALLOC_HEAP</name>
        <initializer>0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4671" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_122571d52bcd725361e6462d6d08e4cab" prot="public" static="no">
        <name>MPR_ALLOC_PAGE_HEAP</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4668" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ff4c6104ecfdf1b784cfda83be0c74b7" prot="public" static="no">
        <name>MPR_ALLOC_SLAB_HEAP</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4670" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f1336f56ac3c2c091782b1924a649431" prot="public" static="no">
        <name>MPR_ALLOC_THREAD_SAFE</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4673" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1cc6038be47135551f98dc67ba85858e5" prot="public" static="no">
        <name>MPR_ASSERT_MSG</name>
        <initializer>0x400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1436" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1639e95b518a9e92095543e5184de15aa" prot="public" static="no">
        <name>MPR_ASSERT_SRC</name>
        <initializer>0x40</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1427" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15e2e7058ae62846bc72aa87a94998e35" prot="public" static="no">
        <name>MPR_BACKGROUND_PRIORITY</name>
        <initializer>15</initializer>
        <briefdescription>
<para>May only get CPU if idle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1191" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1698836ebc1230ae5b16b87398ad7fde8" prot="public" static="no">
        <name>MPR_BIG_ENDIAN</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="416" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18fb5481e2867e030c79bedc563fe8de2" prot="public" static="no">
        <name>MPR_BINARY</name>
        <initializer>&quot;b&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="692" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18fb5481e2867e030c79bedc563fe8de2" prot="public" static="no">
        <name>MPR_BINARY</name>
        <initializer>&quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="602" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18fb5481e2867e030c79bedc563fe8de2" prot="public" static="no">
        <name>MPR_BINARY</name>
        <initializer>&quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="482" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a2548e612d40219745d36809427d5fd0" prot="public" static="no">
        <name>MPR_BUF_INCR</name>
        <initializer>4096</initializer>
        <briefdescription>
<para>Default buffer growth inc. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1100" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d11f870f279dc0ae25037aa94cfb7159" prot="public" static="no">
        <name>MPR_BUFSIZE</name>
        <initializer>4096</initializer>
        <briefdescription>
<para>Reasonable size for buffers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1099" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_152dbd009cf7a2084be51ec5e9905bef1" prot="public" static="no">
        <name>MPR_CMD_DETACH</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6185" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_10e48de485aa92fd0537924b706e2539e" prot="public" static="no">
        <name>MPR_CMD_EOF_COUNT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6162" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19b6df9f53de6ce7f036a88eb57c4bdc4" prot="public" static="no">
        <name>MPR_CMD_ERR</name>
        <initializer>0x4000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6188" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d1983e4ebe978cc183518345b1b4f287" prot="public" static="no">
        <name>MPR_CMD_IN</name>
        <initializer>0x1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6186" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_145e9c439310f413d96a6f60a2169aeea" prot="public" static="no">
        <name>MPR_CMD_MAX_PIPE</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6172" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15b23440bb399d549cc8e21cf843f5e8a" prot="public" static="no">
        <name>MPR_CMD_NEW_SESSION</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6183" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1e0f5f7ba09817ec63dfb062ec9aef746" prot="public" static="no">
        <name>MPR_CMD_OUT</name>
        <initializer>0x2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6187" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15a431633c20c5ba9cb82245bb35cb970" prot="public" static="no">
        <name>MPR_CMD_SHOW</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6184" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18be319d56d0cb412db373c5a056084a4" prot="public" static="no">
        <name>MPR_CMD_STDERR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6171" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1622d43589bbed6dc91ad21764e718bd9" prot="public" static="no">
        <name>MPR_CMD_STDIN</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6169" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18ef3ba4052c1e6dbdf5437c2d99a2178" prot="public" static="no">
        <name>MPR_CMD_STDOUT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6170" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15214549dd6e4ab80869e42ee09329f95" prot="public" static="no">
        <name>MPR_CMD_TIMER_PERIOD</name>
        <initializer>5000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1238" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15b9e93e828d28c4f7af302fadfa82bec" prot="public" static="no">
        <name>MPR_CMD_VXWORKS_EOF</name>
        <initializer>&quot;_ _EOF_ _&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6163" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1297d74edde17d0138542113ef5f47175" prot="public" static="no">
        <name>MPR_CMD_VXWORKS_EOF_LEN</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6164" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_173c51f3a7939f023326f2ae4f70ea709" prot="public" static="no">
        <name>MPR_CONFIG</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1416" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1fb44c84e0e5e986d056db4e29bff7b34" prot="public" static="no">
        <name>MPR_CPU_68K</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="51" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d4309355fcaa40fc4eeca33f9e438716" prot="public" static="no">
        <name>MPR_CPU_ARM</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="49" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1feb42565cbdcdf8f5db8ec7b71c18b6e" prot="public" static="no">
        <name>MPR_CPU_IX64</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="54" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12cc1114d27590165c9ba6a50635d5feb" prot="public" static="no">
        <name>MPR_CPU_IX86</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="45" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14fa00eba5466bbc8808f72fcd4870b65" prot="public" static="no">
        <name>MPR_CPU_MIPS</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="50" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_122d1a9a68f1b429372c69f22fd3422e2" prot="public" static="no">
        <name>MPR_CPU_PPC</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="46" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d07a9a8380c16fdd910c3277cdc009ca" prot="public" static="no">
        <name>MPR_CPU_SH4</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="56" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1932aea9cacb12b0d833977ad5ee6f9d3" prot="public" static="no">
        <name>MPR_CPU_SIMNT</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="52" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_16ad3ebde100923523aefb437d7d78799" prot="public" static="no">
        <name>MPR_CPU_SIMSPARC</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="53" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_108cc14b0835d7363cba5a5eea187c312" prot="public" static="no">
        <name>MPR_CPU_SPARC</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="47" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_178aed56431b3de7d4839073dfacc0fd3" prot="public" static="no">
        <name>MPR_CPU_UNIVERSAL</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="55" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14c5486206d84ad28be06dc1b4d50f300" prot="public" static="no">
        <name>MPR_CPU_UNKNOWN</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="44" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1352e287617299e55508f17076dc2a849" prot="public" static="no">
        <name>MPR_CPU_XSCALE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="48" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1e06415ae3af35c8ac27f34b10d3001e3" prot="public" static="no">
        <name>MPR_CRITICAL_PRIORITY</name>
        <initializer>99</initializer>
        <briefdescription>
<para>May not yield. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1195" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1990bc0ed43b1479ca1ea9e9c81fbb13a" prot="public" static="no">
        <name>MPR_DEBUG</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1418" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_17b06f41accf7c6527c8e29f0ce93bce4" prot="public" static="no">
        <name>MPR_DEFAULT_ALLOC</name>
        <initializer>64</initializer>
        <briefdescription>
<para>Default small alloc size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1095" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b991acd3849c8afc8714bc86dffa422f" prot="public" static="no">
        <name>MPR_DEFAULT_BREAK_PORT</name>
        <initializer>9473</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1160" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c9fb49d5056d0731ac706c507d31d4e2" prot="public" static="no">
        <name>MPR_DEFAULT_DATE</name>
        <initializer>&quot;%a %b %d %T %Y %Z&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2227" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c984410ca2b9c805e56da89d0bfc6c6d" prot="public" static="no">
        <name>MPR_DEFAULT_HASH_SIZE</name>
        <initializer>23</initializer>
        <briefdescription>
<para>Default size of hash table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1096" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1efea53f554fcb794283095d3b96c34bd" prot="public" static="no">
        <name>MPR_DEFAULT_MAX_THREADS</name>
        <initializer>20</initializer>
        <briefdescription>
<para>Default max threads. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1223" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_173941169dddea56ea21e373e25d6f630" prot="public" static="no">
        <name>MPR_DEFAULT_MIN_THREADS</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Default min threads. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1222" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b682c50e795b73ee99bea8e24fc5c943" prot="public" static="no">
        <name>MPR_DEFAULT_STACK</name>
        <initializer>(64 * 1024)</initializer>
        <briefdescription>
<para>Default thread stack size (64K). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1093" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1093" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b6f99d19116e5ed72ba371a907cc58f4" prot="public" static="no">
        <name>MPR_DTOA_ALL_DIGITS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1539" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ad998f03e869e694ef5d42e071fbd1bd" prot="public" static="no">
        <name>MPR_DTOA_EXPONENT_FORM</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1546" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_137d32737da5ebd788bd1915ed3fa9998" prot="public" static="no">
        <name>MPR_DTOA_FIXED_FORM</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1547" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ab054201eaf0db5f9798276906aef48d" prot="public" static="no">
        <name>MPR_DTOA_N_DIGITS</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1540" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a92f422fc20cebea69d4479e22abbd18" prot="public" static="no">
        <name>MPR_DTOA_N_FRACTION_DIGITS</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1541" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ffeb4620b829d9448f900e48fb036946" prot="public" static="no">
        <name>MPR_ENCODE_HTML</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6770" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1fb056f8f0becaf6cc2a757e03f7a642c" prot="public" static="no">
        <name>MPR_ENCODE_SHELL</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6771" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6771" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_116f06e6c8b5e3e3deba25d8658aa11f4" prot="public" static="no">
        <name>MPR_ENCODE_URI</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6772" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1cd9d67124baa389668dfa31084fedd18" prot="public" static="no">
        <name>MPR_ENCODE_URI_COMPONENT</name>
        <initializer>0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6773" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_153e3db80f7709701d036358eb9cd12ef" prot="public" static="no">
        <name>MPR_ENDIAN</name>
        <initializer>BLD_ENDIAN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="420" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_17c35c619d08e3fc977e60b9b3d0dee15" prot="public" static="no">
        <name>MPR_EPOLL_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
<para>Epoll backlog. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1101" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14b27e0a286fd6975d08929c2ef931ab6" prot="public" static="no">
        <name>MPR_ERR</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>Default error code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1374" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15e8036f0bee810b7d0a3fa6a752c77b2" prot="public" static="no">
        <name>MPR_ERR_ABORTED</name>
        <initializer>-2</initializer>
        <briefdescription>
<para>Action aborted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1376" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_10a19880d5b8b35cbd243601c3fdebc9a" prot="public" static="no">
        <name>MPR_ERR_ALREADY_EXISTS</name>
        <initializer>-3</initializer>
        <briefdescription>
<para>Item already exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1377" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1919966956e7462c38d2a1575c32d9948" prot="public" static="no">
        <name>MPR_ERR_BAD_ARGS</name>
        <initializer>-4</initializer>
        <briefdescription>
<para>Bad arguments or paramaeters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1378" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1930ee0c1f493bf582c968c45b1670e3d" prot="public" static="no">
        <name>MPR_ERR_BAD_FORMAT</name>
        <initializer>-5</initializer>
        <briefdescription>
<para>Bad input format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1379" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14ca018e825a5209d1c781df4f6e7fcfb" prot="public" static="no">
        <name>MPR_ERR_BAD_HANDLE</name>
        <initializer>-6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1380" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c23aecc1451d49a5b30ec93eef8a82fa" prot="public" static="no">
        <name>MPR_ERR_BAD_STATE</name>
        <initializer>-7</initializer>
        <briefdescription>
<para>Module is in a bad state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1381" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ba09adbb870ee2f433345e2f149e7170" prot="public" static="no">
        <name>MPR_ERR_BAD_SYNTAX</name>
        <initializer>-8</initializer>
        <briefdescription>
<para>Input has bad syntax. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1382" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_168f2a1f86291ce6956ea1d8ff659f247" prot="public" static="no">
        <name>MPR_ERR_BAD_TYPE</name>
        <initializer>-9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1383" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_137d3461f89eba4f41854fca0374a3440" prot="public" static="no">
        <name>MPR_ERR_BAD_VALUE</name>
        <initializer>-10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1384" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1062b42b45d20dc6e53bbd50d56f7becf" prot="public" static="no">
        <name>MPR_ERR_BASE</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1373" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14489b24d6bd60c91a0caf473949cd22c" prot="public" static="no">
        <name>MPR_ERR_BUSY</name>
        <initializer>-11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1385" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12223fd269b22204735c86aedfb75498d" prot="public" static="no">
        <name>MPR_ERR_CANT_ACCESS</name>
        <initializer>-12</initializer>
        <briefdescription>
<para>Can&apos;t access the file or resource. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1386" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f37872c7dc5bd324d7257b0c182a5698" prot="public" static="no">
        <name>MPR_ERR_CANT_ALLOCATE</name>
        <initializer>-29</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1403" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c76e95eb4e012fdc44ddb139714d40ee" prot="public" static="no">
        <name>MPR_ERR_CANT_COMPLETE</name>
        <initializer>-13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1387" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11caca544ac924457005fbfb83212687b" prot="public" static="no">
        <name>MPR_ERR_CANT_CONNECT</name>
        <initializer>-32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1406" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19d015f30b291c6ddc172ee8401626201" prot="public" static="no">
        <name>MPR_ERR_CANT_CREATE</name>
        <initializer>-14</initializer>
        <briefdescription>
<para>Can&apos;t create the file or resource. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1388" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ac57866d33362bf21f652bd77d607550" prot="public" static="no">
        <name>MPR_ERR_CANT_DELETE</name>
        <initializer>-31</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1405" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1533ed601a14817b24a8d8c000ab4ecf3" prot="public" static="no">
        <name>MPR_ERR_CANT_INITIALIZE</name>
        <initializer>-15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1389" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1293c82c9a0891e2dcfd18caf2f515b87" prot="public" static="no">
        <name>MPR_ERR_CANT_OPEN</name>
        <initializer>-16</initializer>
        <briefdescription>
<para>Can&apos;t open the file or resource. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1390" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14dad0ac2657323d3e0790744560d4404" prot="public" static="no">
        <name>MPR_ERR_CANT_READ</name>
        <initializer>-17</initializer>
        <briefdescription>
<para>Can&apos;t read from the file or resource. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1391" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f8d350a5d245956ba8d0e6f461906d51" prot="public" static="no">
        <name>MPR_ERR_CANT_WRITE</name>
        <initializer>-18</initializer>
        <briefdescription>
<para>Can&apos;t write to the file or resource. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1392" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a82e6a65a7fc1ebeb32782cddaf74dcf" prot="public" static="no">
        <name>MPR_ERR_DELETED</name>
        <initializer>-19</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1393" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_190f611631651c3bc10a50d12a43a4891" prot="public" static="no">
        <name>MPR_ERR_GENERAL</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>General error. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1375" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d56afe1406a150e8f70ec9b4c5aa1b44" prot="public" static="no">
        <name>MPR_ERR_MAX</name>
        <initializer>-33</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1407" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1bce7cf0b20e11f626c6e7269c7f57585" prot="public" static="no">
        <name>MPR_ERR_NETWORK</name>
        <initializer>-20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1394" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_121c86bc598c8c86c0347dd2e7a5d2948" prot="public" static="no">
        <name>MPR_ERR_NO_MEMORY</name>
        <initializer>-30</initializer>
        <briefdescription>
<para>Memory allocation error. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1404" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1cf2522005c8722432170eaf62ef1b08d" prot="public" static="no">
        <name>MPR_ERR_NOT_FOUND</name>
        <initializer>-21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1395" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1dd3e5f02d6a87f8d974978e7a1bae790" prot="public" static="no">
        <name>MPR_ERR_NOT_INITIALIZED</name>
        <initializer>-22</initializer>
        <briefdescription>
<para>Module or resource is not initialized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1396" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_144c8cadbefc4c0ebc5a6d50fe0a2b35a" prot="public" static="no">
        <name>MPR_ERR_NOT_READY</name>
        <initializer>-23</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1397" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19f0e4f45ab378cf38c97d1f82ae97977" prot="public" static="no">
        <name>MPR_ERR_OK</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Standard MPR return and error codes. </para>        </briefdescription>
        <detaileddescription>
<para>Success </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1372" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11d01a181e24b717f7e8cc209ecf9a1fd" prot="public" static="no">
        <name>MPR_ERR_READ_ONLY</name>
        <initializer>-24</initializer>
        <briefdescription>
<para>The operation timed out. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1398" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15a93a590163db7efac72b4cdf1167028" prot="public" static="no">
        <name>MPR_ERR_TIMEOUT</name>
        <initializer>-25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1399" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1286d20a366b521bef2f888acb869ad32" prot="public" static="no">
        <name>MPR_ERR_TOO_MANY</name>
        <initializer>-26</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1400" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18e1a65eca999545a890045c42f0c02a8" prot="public" static="no">
        <name>MPR_ERR_WONT_FIT</name>
        <initializer>-27</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1401" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_103982e4028ce99a027b8ec4de803789f" prot="public" static="no">
        <name>MPR_ERR_WOULD_BLOCK</name>
        <initializer>-28</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1402" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b58f968604e9f630b90bd20b66f9fc6b" prot="public" static="no">
        <name>MPR_ERROR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Standard logging trace levels are 0 to 9 with 0 being the most verbose. </para>        </briefdescription>
        <detaileddescription>
<para>These are ored with the error source and type flags. The MPR_LOG_MASK is used to extract the trace level from a flags word. We expect most apps to run with level 2 trace enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1414" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b0cda84bdf832140a3ab2c9c68c4c30a" prot="public" static="no">
        <name>MPR_ERROR_MSG</name>
        <initializer>0x200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1435" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1258daf422e4a4c97a5fa67ca53cea296" prot="public" static="no">
        <name>MPR_ERROR_SRC</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1425" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1207b6b4c4dd69cefc5d48e0898677ff1" prot="public" static="no">
        <name>MPR_EVENT_CONTINUOUS</name>
        <initializer>0x1</initializer>
        <briefdescription>
<para>Auto reschedule the event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3794" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_135751841ed0361d40361c375bca122a4" prot="public" static="no">
        <name>MPR_EVENT_EPOLL</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1075" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b94396a6fa51b90bb13a749bf90e97db" prot="public" static="no">
        <name>MPR_EVENT_HAS_TIMER</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3795" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12a99bacd6ebae3f038383bf28e9c9b80" prot="public" static="no">
        <name>MPR_EVENT_PRIORITY</name>
        <initializer>50</initializer>
        <briefdescription>
<para>Normal priority. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1197" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c9caa92980fc78d01d0899c46ad35331" prot="public" static="no">
        <name>MPR_EVENT_TIME_SLICE</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1243" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19c40b4cbce575c5961e29e8b51361853" prot="public" static="no">
        <name>MPR_EXITING</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6472" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11ccc5bdcb4b81d863bc34c82156ac02e" prot="public" static="no">
        <name>MPR_FATAL_SRC</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1428" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18de0eff4bc3f89f8746efa960d78fed2" prot="public" static="no">
        <name>MPR_FD_MIN</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1161" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_137567848b830f5cf7daa9586c56b34e5" prot="public" static="no">
        <name>MPR_FILES_HASH_SIZE</name>
        <initializer>29</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1106" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1303836449890252fb0f2fd17ab85f2d5" prot="public" static="no">
        <name>MPR_GET_BLK</name>
        <param><defname>ptr</defname></param>
        <initializer>((<ref refid="struct_mpr_blk" kindref="compound">MprBlk</ref>*) (((char*) (ptr)) - MPR_ALLOC_HDR_SIZE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4645" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f7df974fdcc0b09a1d28585fae4bd555" prot="public" static="no">
        <name>MPR_GET_BLK_SIZE</name>
        <param><defname>bp</defname></param>
        <initializer>((bp)-&gt;size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4647" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c6e4143933edb5302d6ecce7de05145f" prot="public" static="no">
        <name>MPR_GET_PTR</name>
        <param><defname>bp</defname></param>
        <initializer>((void*) (((char*) (bp)) + MPR_ALLOC_HDR_SIZE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4646" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1bda61713e0213dce00097d61f54eb5f4" prot="public" static="no">
        <name>MPR_HEAP_OVERHEAD</name>
        <initializer>(MPR_ALLOC_HDR_SIZE + MPR_ALLOC_ALIGN(sizeof(MprRegion) + sizeof(MprHeap) + \
                                  sizeof(<ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref>)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4651" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_116410bb072017852a395c775e13ea8b7" prot="public" static="no">
        <name>MPR_HIGH_PRIORITY</name>
        <initializer>75</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1194" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_194d79684fe7d99bd0572d9d01e5fb27f" prot="public" static="no">
        <name>MPR_INFO</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1417" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ade595638d2979ee0c25593e5f0544d3" prot="public" static="no">
        <name>MPR_INLINE</name>
        <initializer>inline</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="441" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1bf11373096ecc123c0921e09e8551d89" prot="public" static="no">
        <name>MPR_LEVEL_MASK</name>
        <initializer>0xf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1420" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1866668761c5a29d7e44ab7de65d8e48b" prot="public" static="no">
        <name>MPR_LINE</name>
        <param><defname>s</defname></param>
        <initializer>#s</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1447" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14c2c56090ccb64c7946f328e4c4e4af2" prot="public" static="no">
        <name>MPR_LINE2</name>
        <param><defname>s</defname></param>
        <initializer>MPR_LINE(s)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1448" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14ff81aa9b81b2d76fcebb59b453ff36c" prot="public" static="no">
        <name>MPR_LINE3</name>
        <initializer>MPR_LINE2(__LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1449" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14c5e08a31ad4866aee0214fe9177d5f4" prot="public" static="no">
        <name>MPR_LIST_INCR</name>
        <initializer>8</initializer>
        <briefdescription>
<para>Default list growth inc. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1105" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_123487a6ca7c07a19f112a180985f8a63" prot="public" static="no">
        <name>MPR_LITTLE_ENDIAN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="415" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f6e7a6dc15ad100a40232648fcb3c72f" prot="public" static="no">
        <name>MPR_LOC</name>
        <initializer>__FILE__ &quot;:&quot; MPR_LINE3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1450" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_136a5ad5dd31abb5254888a1928b42498" prot="public" static="no">
        <name>MPR_LOCAL_TIMEZONE</name>
        <initializer>MAXINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2348" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_134dd02c4b3ad666298e6f1db05ca54e7" prot="public" static="no">
        <name>MPR_LOG_MSG</name>
        <initializer>0x100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1434" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_133bdbe3fb8480fd5629000097f92e441" prot="public" static="no">
        <name>MPR_LOG_SRC</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1426" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_16bdb574d5082b7dffeea0ac78b58f9b2" prot="public" static="no">
        <name>MPR_LOW_PRIORITY</name>
        <initializer>25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1192" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f8309c20cf2944ca170646c83639a60b" prot="public" static="no">
        <name>MPR_MAP_EXECUTE</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4739" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12e85fb4ca494981d7bd360515cfd5fb5" prot="public" static="no">
        <name>MPR_MAP_READ</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4737" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1647decb76da31290f1bc4e040dad0f41" prot="public" static="no">
        <name>MPR_MAP_WRITE</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4738" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d9fbd54076ade37688f1e5ca2784e271" prot="public" static="no">
        <name>MPR_MAX_ARGC</name>
        <initializer>128</initializer>
        <briefdescription>
<para>Reasonable max of args. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1097" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1097" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d28ce054bb9e4a1d91c14ed7a70ee5c7" prot="public" static="no">
        <name>MPR_MAX_BLOCKED_LOCKS</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1232" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1bd8f55c7f348c463079b9e3da32f9a9d" prot="public" static="no">
        <name>MPR_MAX_BUF</name>
        <initializer>4194304</initializer>
        <briefdescription>
<para>Max buffer size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1102" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a0b8717f01a9a8cb31d3c5c2d950f612" prot="public" static="no">
        <name>MPR_MAX_FILE</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1248" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_16301f3ae68d98c76debdfea9b2ece4bc" prot="public" static="no">
        <name>MPR_MAX_FNAME</name>
        <initializer>256</initializer>
        <briefdescription>
<para>Reasonable filename size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1090" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12d4abe0b302acbc73005e6b46be713c8" prot="public" static="no">
        <name>MPR_MAX_IP_ADDR</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1173" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1cb401d1b2e232005aec3c1330fe49063" prot="public" static="no">
        <name>MPR_MAX_IP_ADDR_PORT</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1175" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19e7e681e0a293c75d1eac0def1eae599" prot="public" static="no">
        <name>MPR_MAX_IP_NAME</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1172" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_133a1c78bb450a34548a2a858120630cb" prot="public" static="no">
        <name>MPR_MAX_IP_PORT</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1174" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_163c4937930147126b8596fa6728fbe99" prot="public" static="no">
        <name>MPR_MAX_LOCK_TIME</name>
        <initializer>(60 * 1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1235" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_148df95bedb47bf3b837dbe61f623731f" prot="public" static="no">
        <name>MPR_MAX_LOCKS</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1234" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19f0705ef414c63b94c34a8a4e0bb239a" prot="public" static="no">
        <name>MPR_MAX_LOG_STRING</name>
        <initializer>512</initializer>
        <briefdescription>
<para>Maximum log message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1098" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1098" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_106e26ea0168fbb293255ffdc62b288e0" prot="public" static="no">
        <name>MPR_MAX_PATH</name>
        <initializer>512</initializer>
        <briefdescription>
<para>Reasonable path name size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1091" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_161f9f81c66027def487acde268abff6e" prot="public" static="no">
        <name>MPR_MAX_RECURSION</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1233" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ab279a1400259da3572a2fd2a8681623" prot="public" static="no">
        <name>MPR_MAX_STRING</name>
        <initializer>1024</initializer>
        <briefdescription>
<para>Maximum (stack) string size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1094" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1094" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14b31c87cc1ce41278fae6a17c23e3199" prot="public" static="no">
        <name>MPR_MAX_URL</name>
        <initializer>512</initializer>
        <briefdescription>
<para>Max URL size. </para>        </briefdescription>
        <detaileddescription>
<para>Also request URL size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1092" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1092" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_100253cececc72225524d098e29d552a9" prot="public" static="no">
        <name>MPR_NORMAL_PRIORITY</name>
        <initializer>50</initializer>
        <briefdescription>
<para>Normal (default) priority. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1193" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b73d1854e1f08673cb3741228da7b587" prot="public" static="no">
        <name>MPR_PAGE_ALIGN</name>
        <param><defname>x</defname></param>
        <param><defname>pagesize</defname></param>
        <initializer>(((x) + (pagesize) - 1) &amp; ~(pagesize - 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4622" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11d1c9a995c25f91167b1588ed0e11642" prot="public" static="no">
        <name>MPR_PATH_ABS</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3468" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a3edcfc2422935523e7fca90de77cc84" prot="public" static="no">
        <name>MPR_PATH_CYGWIN</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3470" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_10fb01b16f62584da72eb71c7473f1789" prot="public" static="no">
        <name>MPR_PATH_NATIVE_SEP</name>
        <initializer>0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3471" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_197deee388fdad79a9a44a941f681b32a" prot="public" static="no">
        <name>MPR_PATH_REL</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3469" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1e22e813ec3ec62fa10aa6be80269be98" prot="public" static="no">
        <name>MPR_RAW</name>
        <initializer>0x1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1442" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1531bc0fb295e536a86344cfb5b405b56" prot="public" static="no">
        <name>MPR_READ_PIPE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5271" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_192106b0b98bcd8a8d346b690564fb7d5" prot="public" static="no">
        <name>MPR_READABLE</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5268" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_16072e168871ce4b65725049d214965a1" prot="public" static="no">
        <name>MPR_REQUEST_PRIORITY</name>
        <initializer>50</initializer>
        <briefdescription>
<para>Normal priority. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1199" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12d296ae2f6a17c92630402e2e81d185b" prot="public" static="no">
        <name>MPR_RFC_DATE</name>
        <initializer>&quot;%a, %d %b %Y %T %Z&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2226" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18b285324e8571e7086a7daeb0e7eb58b" prot="public" static="no">
        <name>MPR_SEARCH_EXE</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3611" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d9c6f2a7fee8d9376ded1e46f7999f2c" prot="public" static="no">
        <name>MPR_SEARCH_SEP</name>
        <initializer>&quot;;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3617" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_163550a2d0d9b1745fce32c6a385afc63" prot="public" static="no">
        <name>MPR_SEARCH_SEP_CHAR</name>
        <initializer>&apos;;&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3618" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_17bbe6982e4e64f2f034971b88d3da3af" prot="public" static="no">
        <name>MPR_SECURE_CLIENT</name>
        <initializer>((struct MprSsl*) 1)</initializer>
        <briefdescription>
<para>Flag for mprCreateSocket to use the default SSL provider. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5666" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c6d5205a6c355e6e3c5cb78db9b57a7f" prot="public" static="no">
        <name>MPR_SERVICE_ONE_THING</name>
        <initializer>0x4</initializer>
        <briefdescription>
<para>Wait for one event or one I/O. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3898" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3898" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1bc146cb7b57a8f9604ee0431b8d2c8f9" prot="public" static="no">
        <name>MPR_SET_SIZE</name>
        <param><defname>bp</defname></param>
        <param><defname>len</defname></param>
        <initializer>((bp)-&gt;size = (len))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4648" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a26b2bbf78247ef8fd3528aabea7aa32" prot="public" static="no">
        <name>MPR_SOCKET_BLOCK</name>
        <initializer>0x1</initializer>
        <briefdescription>
<para>Use blocking I/O. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5604" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_199a15ede7932c340743a75f118ca16c6" prot="public" static="no">
        <name>MPR_SOCKET_BROADCAST</name>
        <initializer>0x2</initializer>
        <briefdescription>
<para>Broadcast mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5605" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11f98ea149c4bce9ffe816678bbc49f0d" prot="public" static="no">
        <name>MPR_SOCKET_CLIENT</name>
        <initializer>0x800</initializer>
        <briefdescription>
<para>Socket is a client. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5614" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19899fbaf22958ef4d2fbb5bce6cbb898" prot="public" static="no">
        <name>MPR_SOCKET_CLOSED</name>
        <initializer>0x4</initializer>
        <briefdescription>
<para>MprSocket has been closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5606" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d5e870cae7f4f67d9d9da412128ee8f1" prot="public" static="no">
        <name>MPR_SOCKET_CONNECTING</name>
        <initializer>0x8</initializer>
        <briefdescription>
<para>MprSocket has been closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5607" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13af7ac22e43b6d66754503bf4b038823" prot="public" static="no">
        <name>MPR_SOCKET_DATAGRAM</name>
        <initializer>0x10</initializer>
        <briefdescription>
<para>Use datagrams. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5608" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_184190073ab879726ad4f3c97206fd01b" prot="public" static="no">
        <name>MPR_SOCKET_EOF</name>
        <initializer>0x20</initializer>
        <briefdescription>
<para>Seen end of file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5609" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c7b18f9e8d350a455c880030329ce305" prot="public" static="no">
        <name>MPR_SOCKET_GRACEFUL</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5593" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_10dcff326be6be22f7382a95cf01fcc15" prot="public" static="no">
        <name>MPR_SOCKET_LISTENER</name>
        <initializer>0x40</initializer>
        <briefdescription>
<para>MprSocket is server listener. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5610" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1cea3d5327a4499f74e28cc3830f94eef" prot="public" static="no">
        <name>MPR_SOCKET_MESSAGE</name>
        <initializer>(WM_USER + 32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1186" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_151675ba1c7573f654989a489c0803f8b" prot="public" static="no">
        <name>MPR_SOCKET_NODELAY</name>
        <initializer>0x100</initializer>
        <briefdescription>
<para>Disable Nagle algorithm. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5612" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_183a3df553a14edcbf46c671097860f20" prot="public" static="no">
        <name>MPR_SOCKET_NOREUSE</name>
        <initializer>0x80</initializer>
        <briefdescription>
<para>Dont set SO_REUSEADDR option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5611" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_138565a33ada00883ec935b577d1811ab" prot="public" static="no">
        <name>MPR_SOCKET_PENDING</name>
        <initializer>0x1000</initializer>
        <briefdescription>
<para>Pending buffered read data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5615" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5615" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_16f36c2f826291952482f84a18793bb8e" prot="public" static="no">
        <name>MPR_SOCKET_READABLE</name>
        <initializer>MPR_READABLE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5598" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f3d6547888a1ecdcb880bccfc8511dd0" prot="public" static="no">
        <name>MPR_SOCKET_THREAD</name>
        <initializer>0x400</initializer>
        <briefdescription>
<para>Process callbacks on a worker thread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5613" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15a2337ced6e458f9875d17944a634700" prot="public" static="no">
        <name>MPR_SOCKET_WRITABLE</name>
        <initializer>MPR_WRITABLE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5599" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1e2d5fc1b9d658c93d2833e75ed45eb99" prot="public" static="no">
        <name>MPR_SSL_BUFSIZE</name>
        <initializer>4096</initializer>
        <briefdescription>
<para>SSL has 16K max. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1104" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_102f1e1cc6a700feecac32b1a4c31b3c6" prot="public" static="no">
        <name>MPR_SSL_PROVIDER_LOADED</name>
        <initializer>0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6475" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d2902c2125e360fc124f72599753b0e2" prot="public" static="no">
        <name>MPR_START_EVENTS_THREAD</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6586" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c2701801406420a29c802fc274920157" prot="public" static="no">
        <name>MPR_STARTED</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6474" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f0854041ae3023c413365e4129daaff9" prot="public" static="no">
        <name>MPR_STOPPED</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6473" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12fc7b1a4c1a9477365cc61240ae42c86" prot="public" static="no">
        <name>MPR_STRINGIFY</name>
        <param><defname>s</defname></param>
        <initializer>#s</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1452" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_139d2600827551e2ba1fdd16c76ae1400" prot="public" static="no">
        <name>MPR_TEST</name>
        <param><defname>level</defname></param>
        <param><defname>functionName</defname></param>
        <initializer>{ #functionName, level, functionName, 0, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6988" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6988" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_107779c3ed0b094a85c5aa51210636ab7" prot="public" static="no">
        <name>MPR_TEST_LONG_TIMEOUT</name>
        <initializer>300000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6955" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_17f102aeacdd5e0cc6ec4133aae4b2c37" prot="public" static="no">
        <name>MPR_TEST_MAX_STACK</name>
        <initializer>(16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6952" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6952" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c51e7669bade5e2085e275d4c55c8ba7" prot="public" static="no">
        <name>MPR_TEST_NAP</name>
        <initializer>50</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6957" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d36a7cd56269d515739aab003175653c" prot="public" static="no">
        <name>MPR_TEST_POLL_NAP</name>
        <initializer>25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6950" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6950" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ac0a10fc6abe98d8356b7395092b0bac" prot="public" static="no">
        <name>MPR_TEST_SHORT_TIMEOUT</name>
        <initializer>200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6956" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6956" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15f14f6e2bbd80aa5aac48e0be7e91d67" prot="public" static="no">
        <name>MPR_TEST_SLEEP</name>
        <initializer>(60 * 1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6951" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ab6fe8806761a4148bc4050b6ac872cd" prot="public" static="no">
        <name>MPR_TEST_TIMEOUT</name>
        <initializer>10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6954" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18f50ef4672761b389fece6d14c158fe9" prot="public" static="no">
        <name>MPR_TEXT</name>
        <initializer>&quot;t&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="717" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18f50ef4672761b389fece6d14c158fe9" prot="public" static="no">
        <name>MPR_TEXT</name>
        <initializer>&quot;t&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="693" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18f50ef4672761b389fece6d14c158fe9" prot="public" static="no">
        <name>MPR_TEXT</name>
        <initializer>&quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="603" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18f50ef4672761b389fece6d14c158fe9" prot="public" static="no">
        <name>MPR_TEXT</name>
        <initializer>&quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="483" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13d29febaeaca5d39a1ad539c1a3b6225" prot="public" static="no">
        <name>MPR_TICKS_PER_SEC</name>
        <initializer>1000</initializer>
        <briefdescription>
<para>Time ticks per second. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1201" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1b7036c9221754a94303b38513be96606" prot="public" static="no">
        <name>MPR_TIME_HASH_SIZE</name>
        <initializer>67</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1107" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19900ec15eb1619e4a9bc5a675f0a4cdd" prot="public" static="no">
        <name>MPR_TIMEOUT_CMD</name>
        <initializer>60000</initializer>
        <briefdescription>
<para>Command Request timeout (60 sec). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1206" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1cd2002df57aac80b02daa2f187cd4b4c" prot="public" static="no">
        <name>MPR_TIMEOUT_HANDLER</name>
        <initializer>10000</initializer>
        <briefdescription>
<para>Wait period when removing a wait handler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1215" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13a9a50e1c8d7de296f8d822c1ecc24d3" prot="public" static="no">
        <name>MPR_TIMEOUT_LINGER</name>
        <initializer>2000</initializer>
        <briefdescription>
<para>Close socket linger timeout. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1214" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_17aac261496b3ad0f1adea76a959e34fd" prot="public" static="no">
        <name>MPR_TIMEOUT_LOG_STAMP</name>
        <initializer>3600000</initializer>
        <briefdescription>
<para>Time between log time stamps (1 hr). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1208" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1a2eb3f4af9584897ff6ec601fcca4c3c" prot="public" static="no">
        <name>MPR_TIMEOUT_PRUNER</name>
        <initializer>600000</initializer>
        <briefdescription>
<para>Time between pruner runs (10 min). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1209" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_10cefcf294650f2254b1fcb335af931da" prot="public" static="no">
        <name>MPR_TIMEOUT_SOCKETS</name>
        <initializer>10000</initializer>
        <briefdescription>
<para>General sockets timeout. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1207" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1edd536c5e56ec128b69e540bc2926dd3" prot="public" static="no">
        <name>MPR_TIMEOUT_START_TASK</name>
        <initializer>2000</initializer>
        <briefdescription>
<para>Time to start tasks running. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1210" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11b16c71cdee0d3ca77efef483c13ee84" prot="public" static="no">
        <name>MPR_TIMEOUT_STOP</name>
        <initializer>5000</initializer>
        <briefdescription>
<para>Wait when stopping resources. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1213" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13607582e032513bfb634178e569f6340" prot="public" static="no">
        <name>MPR_TIMEOUT_STOP_TASK</name>
        <initializer>10000</initializer>
        <briefdescription>
<para>Time to stop or reap tasks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1211" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c71168dee2c19a44b17981748e1127c3" prot="public" static="no">
        <name>MPR_TIMEOUT_STOP_THREAD</name>
        <initializer>10000</initializer>
        <briefdescription>
<para>Time to stop running threads. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1212" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15febff4595645cfc0a30b41ab430f64b" prot="public" static="no">
        <name>MPR_TIMER_TOLERANCE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1237" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_14fa636e8b6c40f1a7fa4f45043226c22" prot="public" static="no">
        <name>MPR_TUNE_BALANCED</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1064" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19c64d265f53f03a9419e18fbc79b1b08" prot="public" static="no">
        <name>MPR_TUNE_SIZE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1063" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1063" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19a3bbe0d1aa1c76e117799801d5c196d" prot="public" static="no">
        <name>MPR_TUNE_SPEED</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1065" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13b13de783231d2c733ec18784fcbbc05" prot="public" static="no">
        <name>MPR_USER_MSG</name>
        <initializer>0x800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1437" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1e1b2f2706fd6063db28397d25b18a18e" prot="public" static="no">
        <name>MPR_UTC_TIMEZONE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2349" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11c59802fc5285441e89e2c745b269700" prot="public" static="no">
        <name>MPR_VERBOSE</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1419" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_16c34a6c6e526d8151c128cfc2e984df3" prot="public" static="no">
        <name>MPR_WAIT_RECALL_HANDLER</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5376" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15f9fefa8ff2fd6de89d05e54c5b1e185" prot="public" static="no">
        <name>MPR_WAIT_SIGNAL</name>
        <initializer>(SIGUSR2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1181" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_17d4e688fcd1ef27f95e92853050fe446" prot="public" static="no">
        <name>MPR_WARN</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1415" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19008127e0539e689567741f1c2b066be" prot="public" static="no">
        <name>MPR_WORKER_BUSY</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6052" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6052" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1e5ae60758029aeea44588e981b15e3af" prot="public" static="no">
        <name>MPR_WORKER_DEDICATED</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6060" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6060" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1849aadf69f186ce445d2e68087816964" prot="public" static="no">
        <name>MPR_WORKER_IDLE</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6053" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11a46345d16dbc9d60b67e7418a2c2a09" prot="public" static="no">
        <name>MPR_WORKER_PRIORITY</name>
        <initializer>50</initializer>
        <briefdescription>
<para>Normal priority. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1198" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d14ed6a1a6b2b467a18b80b727f2978f" prot="public" static="no">
        <name>MPR_WORKER_PRUNED</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6054" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1660d238bf3d63e8a740e13c019ac1157" prot="public" static="no">
        <name>MPR_WORKER_SLEEPING</name>
        <initializer>0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6055" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6055" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11ff4bb5b07e0f1efbd40346ac4773154" prot="public" static="no">
        <name>MPR_WRITABLE</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5269" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_114b97737634f189da46bad52a95c2e7c" prot="public" static="no">
        <name>MPR_WRITE_PIPE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5272" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_199c147c92b721d610373d17a27328b20" prot="public" static="no">
        <name>MPR_XML_AFTER_LS</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4038" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4038" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c4c3caf4e3857f736a1b984bd2a6f32f" prot="public" static="no">
        <name>MPR_XML_ATT_EQ</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4042" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4042" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_105fdee2b677c56f79a64c44d2a4e0c06" prot="public" static="no">
        <name>MPR_XML_ATT_NAME</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4041" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4041" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ab77ddcbe5f99578ca0e9550083455f0" prot="public" static="no">
        <name>MPR_XML_BEGIN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4037" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4037" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15ea34ea35e2d8b1a0be44e799fa4d2fb" prot="public" static="no">
        <name>MPR_XML_BUFSIZE</name>
        <initializer>4096</initializer>
        <briefdescription>
<para>XML read buffer size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1103" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_162e114580e39697e37376d12ee7af1bb" prot="public" static="no">
        <name>MPR_XML_CDATA</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4049" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_190fd8a27c77c1c4748f621f25a1b499d" prot="public" static="no">
        <name>MPR_XML_COMMENT</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4039" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12790ee301de12fea5778679db28aab57" prot="public" static="no">
        <name>MPR_XML_ELT_DATA</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4046" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1bbeab1e910ce3f278f140583217df3c5" prot="public" static="no">
        <name>MPR_XML_ELT_DEFINED</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4045" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4045" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1dd77391c791825c39d18317fb3151776" prot="public" static="no">
        <name>MPR_XML_END_ELT</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4047" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4047" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c538a606669e884a98118de05ab717ea" prot="public" static="no">
        <name>MPR_XML_EOF</name>
        <initializer>-2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4036" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4036" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19d47ffef429d482cf9814ea7d920e6a2" prot="public" static="no">
        <name>MPR_XML_ERR</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4035" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4035" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15de28f7380d13547e4f5f01f062049a5" prot="public" static="no">
        <name>MPR_XML_NEW_ATT</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4043" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4043" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13e307166b15e6693d8dd8e70d84b43a0" prot="public" static="no">
        <name>MPR_XML_NEW_ELT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4040" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4040" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12d20eb2c2ed2903820ebf2c08ec42d66" prot="public" static="no">
        <name>MPR_XML_PI</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4048" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13967c9c48971ad228fd98b9caaccccb7" prot="public" static="no">
        <name>MPR_XML_SOLO_ELT_DEFINED</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4044" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4044" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1db3d9f284195de6fa0251aab0abef84b" prot="public" static="no">
        <name>mprAssert</name>
        <param><defname>C</defname></param>
        <initializer>if (C) ; else mprStaticAssert(MPR_LOC, #C)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1480" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1189f1a4ef454b1f134ca89b2bdc2a63f" prot="public" static="no">
        <name>mprGetBlockSize</name>
        <param><defname>ptr</defname></param>
        <initializer>((ptr) ? (MPR_GET_BLK_SIZE(MPR_GET_BLK(ptr)) - MPR_ALLOC_HDR_SIZE): 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4649" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_10b557e99eff31428682284d85e28b106" prot="public" static="no">
        <name>mprGetFirstChild</name>
        <param><defname>ctx</defname></param>
        <initializer>(void*) (MPR_GET_BLK(ctx)-&gt;children)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4652" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d21fb156907ea95e3f60a78a5faa3621" prot="public" static="no">
        <name>mprGetMpr</name>
        <param></param>
        <initializer>_globalMpr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6540" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19f55d0e90dc8cc6b2287312435cdde48" prot="public" static="no">
        <name>MSG_NOSIGNAL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="691" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19f55d0e90dc8cc6b2287312435cdde48" prot="public" static="no">
        <name>MSG_NOSIGNAL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="607" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_136fa9b2e726512bc17a7a6d3e39002be" prot="public" static="no">
        <name>O_BINARY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="604" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_136fa9b2e726512bc17a7a6d3e39002be" prot="public" static="no">
        <name>O_BINARY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="498" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19abb6d01b83e0bc5a6e2adeceb7dffd7" prot="public" static="no">
        <name>O_TEXT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="605" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19abb6d01b83e0bc5a6e2adeceb7dffd7" prot="public" static="no">
        <name>O_TEXT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="499" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_18854c2a82db965759bd6095a666ffb76" prot="public" static="no">
        <name>open</name>
        <initializer>_open</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="706" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_195ef5600c0e3c719f9f168602636d7a2" prot="public" static="no">
        <name>pclose</name>
        <initializer>_pclose</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="804" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_13ab357504c0e683607ef39af005551c4" prot="public" static="no">
        <name>popen</name>
        <initializer>_popen</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="803" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1f41a0a9441b1da20577215063408402f" prot="public" static="no">
        <name>PRINTF_ATTRIBUTE</name>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="437" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_124a251d355bd6ed4c72963740a579cc5" prot="public" static="no">
        <name>PTHREAD_MUTEX_RECURSIVE_NP</name>
        <initializer>PTHREAD_MUTEX_RECURSIVE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="610" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1730b1e8538e305bf868100ec75054e6f" prot="public" static="no">
        <name>PTOI</name>
        <param><defname>i</defname></param>
        <initializer>((int) i)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="362" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1ce65a4670a1afccd1742154588b78e28" prot="public" static="no">
        <name>PTOL</name>
        <param><defname>i</defname></param>
        <initializer>((int64) (int) i)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="364" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_17f3501cd06dda68c4b7d86da4a2ebf77" prot="public" static="no">
        <name>putenv</name>
        <initializer>_putenv</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="707" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_124a7a0ceb1e8f5f44cb1038bb829030d" prot="public" static="no">
        <name>R_OK</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="720" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_168dc4fd7189d34e2052e25ada13f89e0" prot="public" static="no">
        <name>read</name>
        <initializer>_read</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="708" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1300893865b11bb2026ac0a16502c0eea" prot="public" static="no">
        <name>rmdir</name>
        <param><defname>a</defname></param>
        <initializer>_rmdir(a)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="709" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1594a995175c307855c9af8151d1ba9a6" prot="public" static="no">
        <name>SET_SOCKOPT_CAST</name>
        <initializer>cchar*</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="794" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1594a995175c307855c9af8151d1ba9a6" prot="public" static="no">
        <name>SET_SOCKOPT_CAST</name>
        <initializer>void*</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="609" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1594a995175c307855c9af8151d1ba9a6" prot="public" static="no">
        <name>SET_SOCKOPT_CAST</name>
        <initializer>void*</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="485" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_180c54d1399557c97a0c81a319d08e9db" prot="public" static="no">
        <name>SHUT_RDWR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="785" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1633b0396ff93d336a088412a190a5072" prot="public" static="no">
        <name>SOCKET_ERROR</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="606" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1633b0396ff93d336a088412a190a5072" prot="public" static="no">
        <name>SOCKET_ERROR</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="484" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1380b2f1e1181d546a79e33e637c25177" prot="public" static="no">
        <name>spinlock</name>
        <param><defname>arg</defname></param>
        <initializer>mprSpinLock(arg-&gt;spin)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4229" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1e6149391556456327726b0bef24a0f98" prot="public" static="no">
        <name>spinunlock</name>
        <param><defname>arg</defname></param>
        <initializer>mprSpinUnlock(arg-&gt;spin)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4230" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1149da0702b060478da4d59ffe807adac" prot="public" static="no">
        <name>stat</name>
        <initializer>_stat</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="710" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_19254b089d435892385cf14d0ab4a7a2d" prot="public" static="no">
        <name>strdup</name>
        <initializer>_strdup</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="711" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_196451d4d3561fbf8d31d72b0100dd4d8" prot="public" static="no">
        <name>TIME_GENESIS</name>
        <initializer>UINT64(11644473600000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="810" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12ce0e35ee8d8dd4b3488d43a2b83bec1" prot="public" static="no">
        <name>UINT64</name>
        <param><defname>x</defname></param>
        <initializer>(x##Ui64)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="690" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12ce0e35ee8d8dd4b3488d43a2b83bec1" prot="public" static="no">
        <name>UINT64</name>
        <param><defname>x</defname></param>
        <initializer>(x##ULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="599" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_12ce0e35ee8d8dd4b3488d43a2b83bec1" prot="public" static="no">
        <name>UINT64</name>
        <param><defname>x</defname></param>
        <initializer>(x##ULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="479" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1d988592bdd4fffff448195f8a041fc92" prot="public" static="no">
        <name>umask</name>
        <initializer>_umask</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="712" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c6c45889010c1bd68631771b64f18101" prot="public" static="no">
        <name>unlikely</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="453" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11865e3e4dbf6644059d3e46946f7763e" prot="public" static="no">
        <name>unlink</name>
        <initializer>_unlink</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="713" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_11776d47b65f6ed1a074e7dc4388f5d9e" prot="public" static="no">
        <name>unlock</name>
        <param><defname>arg</defname></param>
        <initializer>mprUnlock(arg-&gt;mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4228" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1e5acf4043c0903cda7436b108e29e8e6" prot="public" static="no">
        <name>W_OK</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="723" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_1c40a1eaac5f8dbc1eef9b944d494770c" prot="public" static="no">
        <name>write</name>
        <initializer>_write</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="714" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mpr_8h_15e995ef7690698b62bf016b14fbc45ca" prot="public" static="no">
        <name>X_OK</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="726" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="726" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea70" prot="public" static="no">
        <name>MprXmlToken</name>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea7062f61d129b54cb22042ac01b986de2a1" prot="public">
          <name>MPR_XMLTOK_ERR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea709d6d45f82e9ee4ba3f25fec650aa3459" prot="public">
          <name>MPR_XMLTOK_TOO_BIG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea702e64d317909056b48b1e963bf8f73aa8" prot="public">
          <name>MPR_XMLTOK_CDATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea706e9e5f73363e24aa45f47097bba71ae1" prot="public">
          <name>MPR_XMLTOK_COMMENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea70b4940f86a7ec35362afb10ecc119e8b1" prot="public">
          <name>MPR_XMLTOK_INSTRUCTIONS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea70f308a3584121fd2339f5da0808cefbc7" prot="public">
          <name>MPR_XMLTOK_LS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea70d895e77df27ada77b235e64c1a4c6f5e" prot="public">
          <name>MPR_XMLTOK_LS_SLASH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea708ec3f5511774c83b37259d33c449abbe" prot="public">
          <name>MPR_XMLTOK_GR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea7056573f4cb30481a4d3b60d110ab43e82" prot="public">
          <name>MPR_XMLTOK_SLASH_GR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea706a59deccffa79663fb246b6f6d62ea7c" prot="public">
          <name>MPR_XMLTOK_TEXT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea7077e3589d7126728d53c6adbd2baeea22" prot="public">
          <name>MPR_XMLTOK_EQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea705a94d001486a4babda5caefbcf8ae110" prot="public">
          <name>MPR_XMLTOK_EOF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="mpr_8h_14febbf85974d3ae75fc1cb61b8f1ea70ff0cb27ca95f9d1cc7a958593cea9721" prot="public">
          <name>MPR_XMLTOK_SPACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4054" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4054" bodyend="4068"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="mpr_8h_1947150611d74d1400ef3f0af0776aadd" prot="public" static="no">
        <type>char *</type>
        <definition>typedef char* caddr_t</definition>
        <argsstring></argsstring>
        <name>caddr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="671" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_10f128c3e0c83721af0220c00554e9c4e" prot="public" static="no">
        <type>const char</type>
        <definition>typedef const char cchar</definition>
        <argsstring></argsstring>
        <name>cchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="372" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1d5d9ae5e2ea7e75aa605e36485987fc2" prot="public" static="no">
        <type>const unsigned char</type>
        <definition>typedef const unsigned char cuchar</definition>
        <argsstring></argsstring>
        <name>cuchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="373" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_155a59eccc12eeab92b32f7982d8b553d" prot="public" static="no">
        <type>const uni</type>
        <definition>typedef const uni cuni</definition>
        <argsstring></argsstring>
        <name>cuni</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="377" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1585ef5c0f4567945e1f3e7f32670accb" prot="public" static="no">
        <type>const unsigned short</type>
        <definition>typedef const unsigned short cushort</definition>
        <argsstring></argsstring>
        <name>cushort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="374" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_15272042f7e0f5c53e2fd4b49ff47d92d" prot="public" static="no">
        <type>const void</type>
        <definition>typedef const void cvoid</definition>
        <argsstring></argsstring>
        <name>cvoid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="375" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_178ecefd3a9f3f0c110b9f6f038b690eb" prot="public" static="no">
        <type>int</type>
        <definition>typedef int gid_t</definition>
        <argsstring></argsstring>
        <name>gid_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="673" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_14b866cc3f768e404aae00bd44baaec3b" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="670" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_112e765d06a529eac489e071583045dab" prot="public" static="no">
        <type>ushort</type>
        <definition>typedef ushort mode_t</definition>
        <argsstring></argsstring>
        <name>mode_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="674" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1393150ac1dc2a2add6f5a1c906bec6b1" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* MprAccessFileProc)(struct MprFileSystem *fs, cchar *path, int omode)</definition>
        <argsstring>)(struct MprFileSystem *fs, cchar *path, int omode)</argsstring>
        <name>MprAccessFileProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2924" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2924" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_mem_1ge0e48d1c33f626b414aa311fe400cbf0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* MprAllocFailure)(MprCtx ctx, int64 size, int64 total, bool granted)</definition>
        <argsstring>)(MprCtx ctx, int64 size, int64 total, bool granted)</argsstring>
        <name>MprAllocFailure</name>
        <briefdescription>
<para>Memory allocation error callback. </para>        </briefdescription>
        <detaileddescription>
<para>Notifiers are called if mprSetNotifier has been called on a context and a memory allocation fails. All notifiers up the parent context chain are called in order. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory allocation request that failed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>total</parametername>
</parameternamelist>
<parameterdescription>
<para>Total memory allocations so far </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>granted</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true if the request was actually granted, but the application is now exceeding its redline memory limit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4592" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_buf_1ga0f2f003728ef5bb244fdabe2edc56f7" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprBufProc)(struct MprBuf *bp, void *arg)</definition>
        <argsstring>)(struct MprBuf *bp, void *arg)</argsstring>
        <name>MprBufProc</name>
        <briefdescription>
<para>Buffer refill callback function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Function to call when the buffer is depleted and needs more data. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance of an MprBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Data argument supplied to <ref refid="group___mpr_buf_1g7f74f8c3d5af9db8c064b365f39cae2c" kindref="member">mprSetBufRefillProc</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The callback should return 0 if successful, otherwise a negative error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1861" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1614338968aad8695756f55115c49975e" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprCloseFileProc)(struct MprFile *file)</definition>
        <argsstring>)(struct MprFile *file)</argsstring>
        <name>MprCloseFileProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2929" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2929" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1a62a43eecfcf4e95b48de564923d37da" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprCmdProc)(struct MprCmd *cmd, int channel, void *data)</definition>
        <argsstring>)(struct MprCmd *cmd, int channel, void *data)</argsstring>
        <name>MprCmdProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6178" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* MprCtx</definition>
        <argsstring></argsstring>
        <name>MprCtx</name>
        <briefdescription>
<para>Memory context type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Blocks of memory are allocated using a memory context as the parent. Any allocated memory block may serve as the memory context for subsequent memory allocations. Freeing a block via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> will release the allocated block and all child blocks. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1513" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="1513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1a6e91b8ece1927bde07548ad3b034564" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprDeleteDirProc)(struct MprFileSystem *fs, cchar *path)</definition>
        <argsstring>)(struct MprFileSystem *fs, cchar *path)</argsstring>
        <name>MprDeleteDirProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2926" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1057affd6f0d2e7ff740fa76b742d022a" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprDeleteFileProc)(struct MprFileSystem *fs, cchar *path)</definition>
        <argsstring>)(struct MprFileSystem *fs, cchar *path)</argsstring>
        <name>MprDeleteFileProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2925" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2925" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_mem_1g9531f8722a082ef0334d496738303663" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprDestructor)(MprCtx ctx)</definition>
        <argsstring>)(MprCtx ctx)</argsstring>
        <name>MprDestructor</name>
        <briefdescription>
<para>Mpr memory block destructors prototype. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return zero if the memory was actually freed. Return non-zero to prevent the memory being freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4600" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_event_1g6777c813e9ab55b0e29dfa9d0d19f32b" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprEventProc)(void *data, struct MprEvent *event)</definition>
        <argsstring>)(void *data, struct MprEvent *event)</argsstring>
        <name>MprEventProc</name>
        <briefdescription>
<para>Event callback function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return non-zero if the dispatcher is deleted. Otherwise return 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3802" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_184cc59492d580d0035813a9260db5fe9" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprGetPathInfoProc)(struct MprFileSystem *fs, cchar *path, struct MprPath *info)</definition>
        <argsstring>)(struct MprFileSystem *fs, cchar *path, struct MprPath *info)</argsstring>
        <name>MprGetPathInfoProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2927" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_list_1ga4064169552596b7923bc734da239f96" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprListCompareProc)(cvoid *arg1, cvoid *arg2)</definition>
        <argsstring>)(cvoid *arg1, cvoid *arg2)</argsstring>
        <name>MprListCompareProc</name>
        <briefdescription>
<para>List comparison procedure for sorting. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Callback function signature used by <ref refid="group___mpr_list_1g50c9e84e551dffe01dfe6a2697464f5d" kindref="member">mprSortList</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg1</parametername>
</parameternamelist>
<parameterdescription>
<para>First list item to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second list item to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return zero if the items are equal. Return -1 if the first arg is less than the second. Otherwise return 1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2387" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_log_1g8ca7894a05a04dc473d942ffc7cd1689" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* MprLogHandler)(MprCtx ctx, int flags, int level, cchar *msg)</definition>
        <argsstring>)(MprCtx ctx, int flags, int level, cchar *msg)</argsstring>
        <name>MprLogHandler</name>
        <briefdescription>
<para>Log handler callback type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Callback prototype for the log handler. Used by mprSetLogHandler to define a message logging handler to process log and error messages. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source filename. Derived by using __FILE__. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source line number. Derived by using __LINE__. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Error flags. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Message logging level. Levels are 0-9 with zero being the most verbose. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message being logged. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2660" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_19aa622036e7706b1b95aa2f341322d24" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprMakeDirProc)(struct MprFileSystem *fs, cchar *path, int perms)</definition>
        <argsstring>)(struct MprFileSystem *fs, cchar *path, int perms)</argsstring>
        <name>MprMakeDirProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2928" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_module_1g12f3bd6503c42b00ef185eb5a7b3073f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprModuleEntry)(MprCtx ctx, void *data)</definition>
        <argsstring>)(MprCtx ctx, void *data)</argsstring>
        <name>MprModuleEntry</name>
        <briefdescription>
<para>Loadable module entry point signature. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Loadable modules can have an entry point that is invoked automatically when a module is loaded. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data passed to mprCreateModule </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new MprModule structure for the module. Return NULL if the module can&apos;t be initialized. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3710" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_11d9d70fd98eb69a8c870f2202bee22eb" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprModuleProc)(struct MprModule *mp)</definition>
        <argsstring>)(struct MprModule *mp)</argsstring>
        <name>MprModuleProc</name>
        <briefdescription>
<para>Module start/stop point function signature. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mp</parametername>
</parameternamelist>
<parameterdescription>
<para>Module object reference returned from <ref refid="group___mpr_module_1g63bd240ada3d4cb53ead7b4404fd5014" kindref="member">mprCreateModule</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if successful, otherwise return a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3684" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="3684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_13cf9dd5a34b297845c0f5678214bd70f" prot="public" static="no">
        <type>long(*</type>
        <definition>typedef long(* MprMsgCallback)(HWND hwnd, uint msg, uint wp, long lp)</definition>
        <argsstring>)(HWND hwnd, uint msg, uint wp, long lp)</argsstring>
        <name>MprMsgCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5275" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1831e73bdab48884aa044437317631191" prot="public" static="no">
        <type>off_t</type>
        <definition>typedef int64 MprOffset</definition>
        <argsstring></argsstring>
        <name>MprOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="475" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_17c5ca1c1ea9197509c0e60d9f6a8fed7" prot="public" static="no">
        <type>pthread_t</type>
        <definition>typedef pthread_t MprOsThread</definition>
        <argsstring></argsstring>
        <name>MprOsThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="388" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_117ee0ad60e6e294ed92891ccd8f871a7" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprReadFileProc)(struct MprFile *file, void *buf, uint size)</definition>
        <argsstring>)(struct MprFile *file, void *buf, uint size)</argsstring>
        <name>MprReadFileProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2930" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1b159f96ae5b4b5ea0d3025663625f668" prot="public" static="no">
        <type>long(*</type>
        <definition>typedef long(* MprSeekFileProc)(struct MprFile *file, int seekType, long distance)</definition>
        <argsstring>)(struct MprFile *file, int seekType, long distance)</argsstring>
        <name>MprSeekFileProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2931" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2931" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_142eb6021e2961577b1ca071d1268b220" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprSetBufferedProc)(struct MprFile *file, int initialSize, int maxSize)</definition>
        <argsstring>)(struct MprFile *file, int initialSize, int maxSize)</argsstring>
        <name>MprSetBufferedProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2932" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2932" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_186674106f5fcb47ba730f66375407e0a" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprSocketProc)(void *data, int mask)</definition>
        <argsstring>)(void *data, int mask)</argsstring>
        <name>MprSocketProc</name>
        <briefdescription>
<para>Socket I/O callback procedure. </para>        </briefdescription>
        <detaileddescription>
<para>Proc returns non-zero if the socket has been deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5530" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="5530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1484b47500c380dcfad3bf310058cf5f1" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* MprTestProc)(struct MprTestGroup *tp)</definition>
        <argsstring>)(struct MprTestGroup *tp)</argsstring>
        <name>MprTestProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6963" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6963" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1a80044a8a7f610a62acf33ff10cd809d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* MprThreadProc)(void *arg, struct MprThread *tp)</definition>
        <argsstring>)(void *arg, struct MprThread *tp)</argsstring>
        <name>MprThreadProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4392" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" prot="public" static="no">
        <type>int64</type>
        <definition>typedef int64 MprTime</definition>
        <argsstring></argsstring>
        <name>MprTime</name>
        <briefdescription>
<para>Mpr time structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>MprTime is the cross platform time abstraction structure. Time is stored as milliseconds since the epoch: 00:00:00 UTC Jan 1 1970. MprTime is typically a 64 bit quantity. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2243" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_11c2789aea11b60b13644c3b4e7c54f99" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* MprWorkerProc)(void *data, struct MprWorker *worker)</definition>
        <argsstring>)(void *data, struct MprWorker *worker)</argsstring>
        <name>MprWorkerProc</name>
        <briefdescription>
<para>Worker thread callback signature. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>worker callback data. Set via mprStartWorker or mprActivateWorker </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the worker thread object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6067" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="6067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_17b236223cf25d12854d937c2ed722de0" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprWriteFileProc)(struct MprFile *file, cvoid *buf, uint count)</definition>
        <argsstring>)(struct MprFile *file, cvoid *buf, uint count)</argsstring>
        <name>MprWriteFileProc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2933" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="2933" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1157f8f891909ac6dc28e542932e2d346" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprXmlHandler)(struct MprXml *xp, int state, cchar *tagName, cchar *attName, cchar *value)</definition>
        <argsstring>)(struct MprXml *xp, int state, cchar *tagName, cchar *attName, cchar *value)</argsstring>
        <name>MprXmlHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4070" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4070" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_18e9fc046de05f597bfe402c57e694c11" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* MprXmlInputStream)(struct MprXml *xp, void *arg, char *buf, int size)</definition>
        <argsstring>)(struct MprXml *xp, void *arg, char *buf, int size)</argsstring>
        <name>MprXmlInputStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4071" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4071" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1114f9c2461df851d2ad00aad8dcfa3f7" prot="public" static="no">
        <type>long</type>
        <definition>typedef long pid_t</definition>
        <argsstring></argsstring>
        <name>pid_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="672" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_19381070fa8dba3885c4c3c0fad10d866" prot="public" static="no">
        <type>intptr_t</type>
        <definition>typedef intptr_t pint</definition>
        <argsstring></argsstring>
        <name>pint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="476" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_10fd9ce9d735064461bebfe6037026093" prot="public" static="no">
        <type>signed char</type>
        <definition>typedef signed char schar</definition>
        <argsstring></argsstring>
        <name>schar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="371" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_14fa25e051b88844958ff845ee7c4f4b7" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* siginfo_t</definition>
        <argsstring></argsstring>
        <name>siginfo_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="675" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="675" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_16b82106923cc13b3a9734520ecc29514" prot="public" static="no">
        <type>int</type>
        <definition>typedef int socklen_t</definition>
        <argsstring></argsstring>
        <name>socklen_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="676" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1a49213f0ee6903f508c444506c07dae1" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* Type</definition>
        <argsstring></argsstring>
        <name>Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4810" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_165f85814a8290f9797005d3b28e7e5fc" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char uchar</definition>
        <argsstring></argsstring>
        <name>uchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="370" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1fc544433253791fc5f87b8203c9b6e63" prot="public" static="no">
        <type>int</type>
        <definition>typedef int uid_t</definition>
        <argsstring></argsstring>
        <name>uid_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="669" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_191ad9478d81a7aaf2593e8d9c3d06a14" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int uint</definition>
        <argsstring></argsstring>
        <name>uint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="663" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1718b4eb2652c286f4d42dc18a8e71a1a" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long ulong</definition>
        <argsstring></argsstring>
        <name>ulong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="592" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_12e2f575641f4b9206b0252a38a5263ea" prot="public" static="no">
        <type>short</type>
        <definition>typedef short uni</definition>
        <argsstring></argsstring>
        <name>uni</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="376" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mpr_8h_1b95f123a6c9bcfee6a343170ef8c5f69" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short ushort</definition>
        <argsstring></argsstring>
        <name>ushort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="665" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="665" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="mpr_8h_155b5516d4712c59ff4f7d37db3929f25" prot="public" static="no" mutable="no">
        <type>Mpr *</type>
        <definition>Mpr* _globalMpr</definition>
        <argsstring></argsstring>
        <name>_globalMpr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6539"/>
      </memberdef>
      <memberdef kind="variable" id="mpr_8h_1afdd786d44df7cc214184b34d61eec3e" prot="public" static="no" mutable="no">
        <type>char **</type>
        <definition>char ** environ</definition>
        <argsstring></argsstring>
        <name>environ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="511" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mpr_8h_192a47ab0e245f0ae4d01c38a64b6c427" prot="public" static="no" mutable="no">
        <type>__extension__ typedef long long int</type>
        <definition>typedef __int64 int64</definition>
        <argsstring></argsstring>
        <name>int64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="468" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mpr_8h_1d0d261dac5a4b28b1dc81caece080560" prot="public" static="no" mutable="no">
        <type>void *Type</type>
        <definition>void* Type type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4953" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4953" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mpr_8h_1c6afe794ed283c11fb63426a58188e5e" prot="public" static="no" mutable="no">
        <type>__extension__ typedef unsigned long long int</type>
        <definition>typedef unsigned __int64 uint64</definition>
        <argsstring></argsstring>
        <name>uint64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="469" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mpr_8h_17f44ec8c71e361a86def92a6d0911c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool assertTrue</definition>
        <argsstring>(MprTestGroup *gp, cchar *loc, bool success, cchar *msg)</argsstring>
        <name>assertTrue</name>
        <param>
          <type>MprTestGroup *</type>
          <declname>gp</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>success</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7069"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1074cffcbf494589b73970481ba4b29ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* dtoa</definition>
        <argsstring>(double d, int mode, int ndigits, int *decpt, int *sign, char **rve)</argsstring>
        <name>dtoa</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndigits</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>decpt</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sign</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>rve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6883"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1fd492e88c8d504b8d52b94b7ac77103b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freedtoa</definition>
        <argsstring>(char *ptr)</argsstring>
        <name>freedtoa</name>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6884"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1607d61702ad4757ed7c886e4c71267e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int geteuid</definition>
        <argsstring>(void)</argsstring>
        <name>geteuid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="817"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_121bba92a6ec320453542e7fd6069e5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getuid</definition>
        <argsstring>(void)</argsstring>
        <name>getuid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="816"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1f728ead9279a6966bb00e16bb9844971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long lrand48</definition>
        <argsstring>(void)</argsstring>
        <name>lrand48</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="813"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_18e5dff8e25775b63954faa81e54c7f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprSocket *</type>
        <definition>MprSocket* mprAcceptSocket</definition>
        <argsstring>(MprSocket *listen)</argsstring>
        <name>mprAcceptSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>listen</declname>
        </param>
        <briefdescription>
<para>Accept an incoming connection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listen</parametername>
</parameternamelist>
<parameterdescription>
<para>Listening server socket </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new socket connection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5729"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_11a5e45f5a4b0168be5f0a8528a76774a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprActivateWorker</definition>
        <argsstring>(MprWorker *worker, MprWorkerProc proc, void *data)</argsstring>
        <name>mprActivateWorker</name>
        <param>
          <type>MprWorker *</type>
          <declname>worker</declname>
        </param>
        <param>
          <type><ref refid="mpr_8h_11c2789aea11b60b13644c3b4e7c54f99" kindref="member">MprWorkerProc</ref></type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6083"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_hash_1g6cac9e79143bfdc2c884590446e5edaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHash *</type>
        <definition>MprHash* mprAddDuplicateHash</definition>
        <argsstring>(MprHashTable *table, cchar *key, cvoid *ptr)</argsstring>
        <name>mprAddDuplicateHash</name>
        <param>
          <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Add a duplicate symbol value into the hash table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Add a symbol to the hash which may clash with an existing entry. Duplicate symbols can be added to the hash, but only one may be retrieved via <ref refid="group___mpr_hash_1gf3613de4c34a09b684aebddadc0851cb" kindref="member">mprLookupHash</ref>. To recover duplicate entries walk the hash using <ref refid="group___mpr_hash_1gba1514fa60bf0b72bf528b2c1fbecfc3" kindref="member">mprGetNextHash</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol table returned via mprCreateSymbolTable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>String key of the symbole entry to delete. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Arbitrary pointer to associate with the key in the table. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer count of the number of entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2837"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_161b855a914190ce3e7708f824912103d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprAddFileSystem</definition>
        <argsstring>(MprCtx ctx, MprFileSystem *fs)</argsstring>
        <name>mprAddFileSystem</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="struct_mpr_file_system" kindref="compound">MprFileSystem</ref> *</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3008"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_hash_1gdd7d9c74e9073729c721efe1e5dec0aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHash *</type>
        <definition>MprHash* mprAddHash</definition>
        <argsstring>(MprHashTable *table, cchar *key, cvoid *ptr)</argsstring>
        <name>mprAddHash</name>
        <param>
          <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Add a symbol value into the hash table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Associate an arbitrary value with a string symbol key and insert into the symbol table. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol table returned via mprCreateSymbolTable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>String key of the symbole entry to delete. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Arbitrary pointer to associate with the key in the table. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer count of the number of entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2824"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1gbf10109abc063c47702769c0e89442cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprAddItem</definition>
        <argsstring>(MprList *list, cvoid *item)</argsstring>
        <name>mprAddItem</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Add an item to a list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Add the specified item to the list. The list must have been previously created via mprCreateList. The list will grow as required to store the item </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from <ref refid="group___mpr_list_1gd5e29adbb51053e84bcb52b9f6756e37" kindref="member">mprCreateList</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to item to store </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a positive integer list index for the inserted item. If the item cannot be inserted due to a memory allocation failure, -1 is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2399"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e01f70f0de5b46e9856f29af64460e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprAddNotifier</definition>
        <argsstring>(MprWaitService *ws, MprWaitHandler *wp, int mask)</argsstring>
        <name>mprAddNotifier</name>
        <param>
          <type>MprWaitService *</type>
          <declname>ws</declname>
        </param>
        <param>
          <type>MprWaitHandler *</type>
          <declname>wp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5518"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g159c096de4aec192e25b275f1f5e031d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprAddNullToBuf</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprAddNullToBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Add a null character to the buffer contents. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Add a null byte but do not change the buffer content lengths. The null is added outside the &quot;official&quot; content length. This is useful when calling <ref refid="group___mpr_buf_1gc982291efef3d49cce4bc2ecec6566e5" kindref="member">mprGetBufStart</ref> and using the returned pointer as a &quot;C&quot; string pointer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1935"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1cce17c35eeabad004c762116576636d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprTestGroup *</type>
        <definition>MprTestGroup* mprAddTestGroup</definition>
        <argsstring>(MprTestService *ts, MprTestDef *def)</argsstring>
        <name>mprAddTestGroup</name>
        <param>
          <type>MprTestService *</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>MprTestDef *</type>
          <declname>def</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7067"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g61c8f33c54c45ad4d6bf33d8d72543c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprAdjustBufEnd</definition>
        <argsstring>(MprBuf *buf, int count)</argsstring>
        <name>mprAdjustBufEnd</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Adjust the buffer end position. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Adjust the buffer start end position by the specified amount. This is typically used to advance the end position as content is appended to the buffer. Adjusting the start or end position will change the value returned by <ref refid="group___mpr_buf_1g4d39e8467818e491ecec68a4db8df054" kindref="member">mprGetBufLength</ref>. If using the mprPutBlock or mprPutChar routines, adjusting the end position is done automatically. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive or negative count of bytes to adjust the start position. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1959"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g1fbe536bbdd8bc3f68a5246f69305994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprAdjustBufStart</definition>
        <argsstring>(MprBuf *buf, int count)</argsstring>
        <name>mprAdjustBufStart</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Adjust the buffer start position. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Adjust the buffer start position by the specified amount. This is typically used to advance the start position as content is consumed. Adjusting the start or end position will change the value returned by <ref refid="group___mpr_buf_1g4d39e8467818e491ecec68a4db8df054" kindref="member">mprGetBufLength</ref>. If using the mprGetBlock or mprGetChar routines, adjusting the start position is done automatically. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive or negative count of bytes to adjust the start position. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1947"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g8453c59fd682fda78bbd18eb9f572dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAlloc</definition>
        <argsstring>(MprCtx ctx, uint size)</argsstring>
        <name>mprAlloc</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate a block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a block of memory using the supplied memory context <emphasis>ctx</emphasis> as the parent. <ref refid="group___mpr_mem_1g8453c59fd682fda78bbd18eb9f572dec" kindref="member">mprAlloc</ref> manages a tree structure of memory blocks. Freeing a block via mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory block to allocate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4824"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g1817af523c1a6f663c792c74190c7ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHeap *</type>
        <definition>MprHeap* mprAllocArena</definition>
        <argsstring>(MprCtx ctx, cchar *name, uint arenaSize, bool threadSafe, MprDestructor destructor)</argsstring>
        <name>mprAllocArena</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>arenaSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>threadSafe</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate a memory arena. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Memory arenas are virtual allocations. When subsequent allocations are done via mprAlloc, the memory will be pinned. On systems without virtual memory, the memory is physically allocated at the time of this call. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to give the arena. Name must be persistent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arenaSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the virtual arena. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threadSafe</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, allocations for memory from the arena will be thread safe. Allocations are faster if threadSafe is false. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the reserved arena. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4761"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_17eb85a1026a05d04dff73bccc1cf566a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_blk" kindref="compound">MprBlk</ref> *</type>
        <definition>MprBlk* mprAllocBlock</definition>
        <argsstring>(MprHeap *heap, MprBlk *parent, uint size)</argsstring>
        <name>mprAllocBlock</name>
        <param>
          <type>MprHeap *</type>
          <declname>heap</declname>
        </param>
        <param>
          <type><ref refid="struct_mpr_blk" kindref="compound">MprBlk</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4827"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g81a5827a39d536c462e9ed1145b50248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHeap *</type>
        <definition>MprHeap* mprAllocHeap</definition>
        <argsstring>(MprCtx ctx, cchar *name, uint heapSize, bool threadSafe, MprDestructor destructor)</argsstring>
        <name>mprAllocHeap</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>heapSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>threadSafe</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate a memory heap. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Memory heaps map onto the standard system malloc() system. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to give the heap. Name must be persistent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>heapSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory heap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threadSafe</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, allocations for memory from the heap will be thread safe. Allocations are faster if threadSafe is false. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the reserved heap. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4775"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g95dfa054deaafadfbfdb740f0d7d97c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocObj</definition>
        <argsstring>(MprCtx ctx, Type type)</argsstring>
        <name>mprAllocObj</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Allocate an object of a given type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a block of memory large enough to hold an instance of the specified type. This uses the supplied memory context <emphasis>ctx</emphasis> as the parent. This is implemented as a macro </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4903" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4903" bodyend="4903"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1gb61e0804fdc8e8398bacd18e06ed0b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocObjWithDestructor</definition>
        <argsstring>(MprCtx ctx, Type type, MprDestructor destructor) extern void *mprAllocObjWithDestructorZeroed(MprCtx ctx</argsstring>
        <name>mprAllocObjWithDestructor</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate an object of a given type with a destructor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a block of memory large enough to hold an instance of the specified type with a destructor. This uses the supplied memory context <emphasis>ctx</emphasis> as the parent. This is implemented as a macro. this call associates a destructor function with an object. This function will be invoked when the object is freed. Freeing a block will first call the destructor and if that returns zero, mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. Allocate a zeroed object of a given type with a destructor </para></simplesect>
<simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a zeroed block of memory large enough to hold an instance of the specified type with a destructor. This uses the supplied memory context <emphasis>ctx</emphasis> as the parent. This is implemented as a macro. this call associates a destructor function with an object. This function will be invoked when the object is freed. Freeing a block will first call the destructor and if that returns zero, mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4953"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g4681a304da368211a957c3d7f40c107e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocObjZeroed</definition>
        <argsstring>(MprCtx ctx, Type type)</argsstring>
        <name>mprAllocObjZeroed</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Allocate a zeroed object of a given type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a zeroed block of memory large enough to hold an instance of the specified type. This uses the supplied memory context <emphasis>ctx</emphasis> as the parent. This is implemented as a macro </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4917" bodyfile="/Users/mob/hg/mpr/all/mpr.h" bodystart="4917" bodyend="4917"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1gb4a28f8d8793b16758bef0cb22acc299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHeap *</type>
        <definition>MprHeap* mprAllocSlab</definition>
        <argsstring>(MprCtx ctx, cchar *name, uint objSize, uint count, bool threadSafe, MprDestructor destructor)</argsstring>
        <name>mprAllocSlab</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>objSize</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>threadSafe</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate a memory slab heap. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Memory slab heaps are heaps for constant sized object allocations. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to give the heap. Name must be persistent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>objSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the virtual heap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of objects in slab </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threadSafe</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, allocations for memory from the heap will be thread safe. Allocations are faster if threadSafe is false. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the reserved heap. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4790"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g354a006ab1b3afa765ecf52369df6def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocWithDestructor</definition>
        <argsstring>(MprCtx ctx, uint size, MprDestructor destructor)</argsstring>
        <name>mprAllocWithDestructor</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate an object block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a block of memory using the supplied memory context <emphasis>ctx</emphasis> as the parent. <ref refid="group___mpr_mem_1g354a006ab1b3afa765ecf52369df6def" kindref="member">mprAllocWithDestructor</ref> associates a destructor function with an object. This function will be invoked when the object is freed. Freeing a block will first call the destructor and if that returns zero, mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory block to allocate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4844"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g9765c5e6c3653ed716df99f1eb883fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocWithDestructorZeroed</definition>
        <argsstring>(MprCtx ctx, uint size, MprDestructor destructor)</argsstring>
        <name>mprAllocWithDestructorZeroed</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Allocate an object block of memory and zero it. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a zeroed block of memory using the supplied memory context <emphasis>ctx</emphasis> as the parent. <ref refid="group___mpr_mem_1g354a006ab1b3afa765ecf52369df6def" kindref="member">mprAllocWithDestructor</ref> associates a destructor function with an object. This function will be invoked when the object is freed. Freeing a block will first call the destructor and if that returns zero, mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory block to allocate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when the allocation is freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Prototype. This function names are highly likely to be refactored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4861"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1gb6e0fd9b58e841c28bb49ec2ab37072d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprAllocZeroed</definition>
        <argsstring>(MprCtx ctx, uint size)</argsstring>
        <name>mprAllocZeroed</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate a zeroed block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocates a zeroed block of memory using the supplied memory context <emphasis>ctx</emphasis> as the parent. <ref refid="group___mpr_mem_1g8453c59fd682fda78bbd18eb9f572dec" kindref="member">mprAlloc</ref> manages a tree structure of memory blocks. Freeing a block via mprFree will release the allocated block and all child blocks. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory block to allocate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to malloc and mprAlloc. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4875"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g5f81ae14eecf28b6e6bdd64677860e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprList *</type>
        <definition>MprList* mprAppendList</definition>
        <argsstring>(MprList *list, MprList *add)</argsstring>
        <name>mprAppendList</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>MprList *</type>
          <declname>add</declname>
        </param>
        <briefdescription>
<para>Append a list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Append the contents of one list to another. The list will grow as required to store the item </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from <ref refid="group___mpr_list_1gd5e29adbb51053e84bcb52b9f6756e37" kindref="member">mprCreateList</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>List whose contents are added </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the original list if successful. Returns NULL on memory allocation errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2409"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_147b6a089018e38316476e97b49bb8d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprAsprintf</definition>
        <argsstring>(MprCtx ctx, int maxSize, cchar *fmt,...)</argsstring>
        <name>mprAsprintf</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSize</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Format a string into an allocated buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call will dynamically allocate a buffer up to the specified maximum size and will format the supplied arguments into the buffer. A trailing null will always be appended. The call returns the size of the allocated string excluding the null. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size to allocate for the buffer including the trailing null. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of characters in the string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5080"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1b2b1ebf1965beac947ab9b77970f49c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64</type>
        <definition>int64 mprAtoi</definition>
        <argsstring>(cchar *str, int radix)</argsstring>
        <name>mprAtoi</name>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <briefdescription>
<para>Convert a string to an integer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call converts the supplied string to an integer using the specified radix (base). </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the string to parse. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>Base to use when parsing the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the integer equivalent value of the string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1659"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1ge05c883c658aef3c2e9da52e82e2a39b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprFile *</type>
        <definition>MprFile* mprAttachFd</definition>
        <argsstring>(MprCtx ctx, int fd, cchar *name, int omode)</argsstring>
        <name>mprAttachFd</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>omode</declname>
        </param>
        <briefdescription>
<para>Attach to an existing file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Attach a file to an open file decriptor and return a file object. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor to attach to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Descriptive name for the file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>omode</parametername>
</parameternamelist>
<parameterdescription>
<para>Posix style file open mode mask. The open mode may contain the following mask values ored together: <itemizedlist>
<listitem><para>O_RDONLY Open read only </para></listitem>
<listitem><para>O_WRONLY Open write only </para></listitem>
<listitem><para>O_RDWR Open for read and write </para></listitem>
<listitem><para>O_CREAT Create or re-create </para></listitem>
<listitem><para>O_TRUNC Truncate </para></listitem>
<listitem><para>O_BINARY Open for binary data </para></listitem>
<listitem><para>O_TEXT Open for text data </para></listitem>
<listitem><para>O_EXCL Open with an exclusive lock </para></listitem>
<listitem><para>O_APPEND Open to append </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an MprFile object to use in other file operations. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3060"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_1gc5203b2138474e781207b39ac4726c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprBreakpoint</definition>
        <argsstring>()</argsstring>
        <name>mprBreakpoint</name>
        <briefdescription>
<para>Trigger a breakpoint. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Triggers a breakpoint and traps to the debugger. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1477"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_12886f2b5f0b809591ab71fb9b41ecb86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprCalcDigest</definition>
        <argsstring>(MprCtx ctx, char **digest, cchar *userName, cchar *password, cchar *realm, cchar *uri, cchar *nonce, cchar *qop, cchar *nc, cchar *cnonce, cchar *method)</argsstring>
        <name>mprCalcDigest</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>digest</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>userName</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>password</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>realm</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>qop</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>cnonce</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6149"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_10f6f8d88927a7cf49e4b1fc86c497471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprCalcDigestNonce</definition>
        <argsstring>(MprCtx ctx, char **nonce, cchar *secret, cchar *etag, cchar *realm)</argsstring>
        <name>mprCalcDigestNonce</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>secret</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>etag</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>realm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6147"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1gcf49292693e22c7bdc43fbb41a83817d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprClearList</definition>
        <argsstring>(MprList *list)</argsstring>
        <name>mprClearList</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Clears the list of all items. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Resets the list length to zero and clears all items. Existing items are not freed, they are only removed from the list. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2450"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1gc48a59b1bfc4f3944a88e152863c3d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprCloseCmdFd</definition>
        <argsstring>(MprCmd *cmd, int channel)</argsstring>
        <name>mprCloseCmdFd</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Close the command channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number to close. Should be either MPR_CMD_STDIN, MPR_CMD_STDOUT or MPR_CMD_STDERR. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6260"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g5bd6e40cb8a29c92a8f5e1ce9529b726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprCloseSocket</definition>
        <argsstring>(MprSocket *sp, bool graceful)</argsstring>
        <name>mprCloseSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>graceful</declname>
        </param>
        <briefdescription>
<para>Close a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Close a socket. If the <emphasis>graceful</emphasis> option is true, the socket will first wait for written data to drain before doing a graceful close. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graceful</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to do a graceful close. Otherwise, an abortive close will be performed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5739"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1gab2501188e2f3f59008f8f27e14732e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprCompactBuf</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprCompactBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Compact the buffer contents. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Compact the buffer contents by copying the contents down to start the the buffer origin. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1967"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1087ffc47d75b5f88dbfcabb8c3cd2d21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprCompareTime</definition>
        <argsstring>(MprTime t1, MprTime t2)</argsstring>
        <name>mprCompareTime</name>
        <param>
          <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
          <declname>t1</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para>Compare two times. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>compare two times and return a code indicating which is greater, less or equal </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t1</parametername>
</parameternamelist>
<parameterdescription>
<para>First time </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second time </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if equal, -1 if t1 is less than t2 otherwise one. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2255"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_15f3e1db5d7e207edaa4dde272a63c5fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprConfigureSsl</definition>
        <argsstring>(struct MprSsl *ssl)</argsstring>
        <name>mprConfigureSsl</name>
        <param>
          <type>struct MprSsl *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Configure SSL based on the parsed MprSsl configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>MprSsl configuration </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5954"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_hash_1g84a5c66179387a6fc1090f5117d49af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
        <definition>MprHashTable* mprCopyHash</definition>
        <argsstring>(MprCtx ctx, MprHashTable *table)</argsstring>
        <name>mprCopyHash</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Copy a hash table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Create a new hash table and copy all the entries from an existing table. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol table returned via mprCreateSymbolTable. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new hash table initialized with the contents of the original hash table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2847"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g64b04ef8c2be20d2d952ecfa22b7ce54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprCopyList</definition>
        <argsstring>(MprList *dest, MprList *src)</argsstring>
        <name>mprCopyList</name>
        <param>
          <type>MprList *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MprList *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy a list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Copy the contents of a list into an existing list. The destination list is cleared first and has its dimensions set to that of the source clist. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination list for the copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2431"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g5819b28cca6734f98b1fe114c5620d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprCopyPath</definition>
        <argsstring>(MprCtx ctx, cchar *from, cchar *to, int omode)</argsstring>
        <name>mprCopyPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>omode</declname>
        </param>
        <briefdescription>
<para>Copy a file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Create a new copy of a file with the specified open permissions mode. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the existing file to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the new file copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>omode</parametername>
</parameternamelist>
<parameterdescription>
<para>Posix style file open mode mask. See <ref refid="group___mpr_file_1g4f97953317f303fe033be11fcbcec4e9" kindref="member">mprOpen</ref> for the various modes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the file exists and can be accessed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3309"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_1g4e84f505d5b6f74de677ffff29806906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mpr *</type>
        <definition>Mpr* mprCreate</definition>
        <argsstring>(int argc, char **argv, MprAllocFailure cback)</argsstring>
        <name>mprCreate</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1ge0e48d1c33f626b414aa311fe400cbf0" kindref="member">MprAllocFailure</ref></type>
          <declname>cback</declname>
        </param>
        <briefdescription>
<para>Create an instance of the MPR. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Initializes the MPR and creates an Mpr control object. The Mpr Object manages Mpr facilities and is the top level memory context. It may be used wherever a MprCtx parameter is required. This function must be called prior to calling any other Mpr API. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of command line args </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Command line arguments for the application. Arguments may be passed into the Mpr for retrieval by the unit test framework. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cback</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory allocation failure notification callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the Mpr object. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6569"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e06a886a6636c810c339ff1be65a8c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct Mpr *</type>
        <definition>struct Mpr* mprCreateAllocService</definition>
        <argsstring>(MprAllocFailure cback, MprDestructor destructor)</argsstring>
        <name>mprCreateAllocService</name>
        <param>
          <type><ref refid="group___mpr_mem_1ge0e48d1c33f626b414aa311fe400cbf0" kindref="member">MprAllocFailure</ref></type>
          <declname>cback</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4746"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1ga2d850779c9881637028fcf54a1ebe30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprBuf *</type>
        <definition>MprBuf* mprCreateBuf</definition>
        <argsstring>(MprCtx ctx, int initialSize, int maxSize)</argsstring>
        <name>mprCreateBuf</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initialSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSize</declname>
        </param>
        <briefdescription>
<para>Create a new buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Create a new buffer. Use mprFree to free the buffer </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial size of the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size the buffer can grow to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1903"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1gbc453ad9cdcd6046373ebfce72ce1fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprCmd *</type>
        <definition>MprCmd* mprCreateCmd</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateCmd</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Create a new Command object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated MprCmd object. Use mprFree to close and free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6268"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1g30046b7108565283ac168c6a90739a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_cond" kindref="compound">MprCond</ref> *</type>
        <definition>MprCond* mprCreateCond</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateCond</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Create a condition lock variable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call creates a condition variable object that can be used in <ref refid="group___mpr_synch_1g38ffd872f11254b3ca0a14e0388d98b5" kindref="member">mprWaitForCond</ref> and <ref refid="group___mpr_synch_1gb014329886bcb9a8cb9b970afc30378b" kindref="member">mprSignalCond</ref> calls. Use <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> to destroy the condition variable. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4131"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_139e6373ded494a2d3154004e58a53caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprDispatcher *</type>
        <definition>MprDispatcher* mprCreateDispatcher</definition>
        <argsstring>(MprCtx ctx, cchar *name, int enable)</argsstring>
        <name>mprCreateDispatcher</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Create a new event dispatcher. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Useful name for debugging </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, enable the dispatcher </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a Dispatcher object that can manage events and be used with mprCreateEvent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3869"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1495cea64ea5eae72dc7c8eb4c4a2064a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprDispatcherService *</type>
        <definition>MprDispatcherService* mprCreateDispatcherService</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateDispatcherService</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4023"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_event_1gf292a0f7982192dba8e5f7535d24377d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprEvent *</type>
        <definition>MprEvent* mprCreateEvent</definition>
        <argsstring>(MprDispatcher *dispatcher, cchar *name, int period, MprEventProc proc, void *data, int flags)</argsstring>
        <name>mprCreateEvent</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_event_1g6777c813e9ab55b0e29dfa9d0d19f32b" kindref="member">MprEventProc</ref></type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Create a new event. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Create a new event for service </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>Dispatcher object created via mprCreateDispatcher </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Debug name of the event </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds used by continuous events between firing of the event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke when the event is run </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to associate with the event and stored in event-&gt;data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to modify the behavior of the event. Valid values are: MPR_EVENT_CONTINUOUS to create an event which will be automatically rescheduled accoring to the specified period. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the event object if successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3941"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_1g045dc3d2476aebeecee838dacd0c63ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mpr *</type>
        <definition>Mpr* mprCreateEx</definition>
        <argsstring>(int argc, char **argv, MprAllocFailure cback, void *shell)</argsstring>
        <name>mprCreateEx</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1ge0e48d1c33f626b414aa311fe400cbf0" kindref="member">MprAllocFailure</ref></type>
          <declname>cback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>shell</declname>
        </param>
        <briefdescription>
<para>Create an instance of the MPR. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Alternate API to create and initialize the MPR. The Mpr object manages Mpr facilities and is the top level memory context. It may be used wherever a MprCtx parameter is required. This function, or <ref refid="group___mpr_1g4e84f505d5b6f74de677ffff29806906" kindref="member">mprCreate</ref> must be called prior to calling any other Mpr API. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of arguments supplied in argv </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Program arguments. The MPR can store the program arguments for retrieval by other parts of the program. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to be invoked on memory allocation errors. Set to null if not required. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shell</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional reference to an O/S implementation dependent shell object. Used by Brew. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the Mpr object. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6584"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1c29685394e5c63f1c6588a477eb3ba34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_file_system" kindref="compound">MprFileSystem</ref> *</type>
        <definition>MprFileSystem* mprCreateFileSystem</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprCreateFileSystem</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3000"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_hash_1gf653f8353d355f27d6fc00883daa82d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
        <definition>MprHashTable* mprCreateHash</definition>
        <argsstring>(MprCtx ctx, int hashSize)</argsstring>
        <name>mprCreateHash</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hashSize</declname>
        </param>
        <briefdescription>
<para>Create a hash table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Creates a hash table that can store arbitrary objects associated with string key values. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the hash table for the symbol table. Should be a prime number. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated symbol table. Caller should use mprFree to dispose of the table when complete. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2858"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g6dc1e2980f934578a5a88f9f987adcf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_key_value" kindref="compound">MprKeyValue</ref> *</type>
        <definition>MprKeyValue* mprCreateKeyPair</definition>
        <argsstring>(MprCtx ctx, cchar *key, cchar *value)</argsstring>
        <name>mprCreateKeyPair</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Create a key / value pair. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Allocate and initialize a key value pair for use by the MprList or MprHash modules. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Key value string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An initialized <ref refid="struct_mpr_key_value" kindref="compound">MprKeyValue</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2638"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1gd5e29adbb51053e84bcb52b9f6756e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprList *</type>
        <definition>MprList* mprCreateList</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateList</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Create a list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Creates an empty list. MprList&apos;s can store generic pointers. They automatically grow as required when items are added to the list. Callers should invoke mprFree when finished with the list to release allocated storage. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2420"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1g825387252381219bd94edfa9c60855fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref> *</type>
        <definition>MprMutex* mprCreateLock</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateLock</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Create a Mutex lock object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call creates a Mutex lock object that can be used in <ref refid="group___mpr_synch_1gd193cb5549a1101dc17177f046144ede" kindref="member">mprLock</ref>, <ref refid="group___mpr_synch_1g2b3b8e824b92499192ea48512e31c26d" kindref="member">mprTryLock</ref> and <ref refid="group___mpr_synch_1g40a516fe58b4b2998852cd0c853027ad" kindref="member">mprUnlock</ref> calls. Use <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> to destroy the lock. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4239"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_module_1g63bd240ada3d4cb53ead7b4404fd5014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprModule *</type>
        <definition>MprModule* mprCreateModule</definition>
        <argsstring>(MprCtx ctx, cchar *name, void *data)</argsstring>
        <name>mprCreateModule</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Create a module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call will create a module object for a loadable module. This should be invoked by the module itself in its module entry point to register itself with the MPR. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>to associate with this module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A module object for this module </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3743"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1224205625c6dd8c8eabb7f6a53dcb4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprModuleService *</type>
        <definition>MprModuleService* mprCreateModuleService</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateModuleService</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3675"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_18aa37eb2e397ec2d78e6df15a0d303c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprCreateNotifierService</definition>
        <argsstring>(MprWaitService *ws)</argsstring>
        <name>mprCreateNotifierService</name>
        <param>
          <type>MprWaitService *</type>
          <declname>ws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5510"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_123c2534e416bf0efd3d7ae9d1f20f153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprOsService *</type>
        <definition>MprOsService* mprCreateOsService</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateOsService</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3662"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1bc3bc06cd0a394c8aa66b160aaaaceef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprRomFileSystem *</type>
        <definition>MprRomFileSystem* mprCreateRomFileSystem</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprCreateRomFileSystem</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3002"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprSocket *</type>
        <definition>MprSocket* mprCreateSocket</definition>
        <argsstring>(MprCtx ctx, struct MprSsl *ssl)</argsstring>
        <name>mprCreateSocket</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct MprSsl *</type>
          <declname>ssl</declname>
        </param>
        <briefdescription>
<para>Create a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Create a new socket </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ssl</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional SSL context if the socket is to support SSL. Use the <ref refid="mpr_8h_17bbe6982e4e64f2f034971b88d3da3af" kindref="member">MPR_SECURE_CLIENT</ref> define to specify that mprCreateSocket should use the default SSL provider. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new socket object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5678"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a080f317d0405b2e25ab69fa1812e577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprSocketService *</type>
        <definition>MprSocketService* mprCreateSocketService</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateSocketService</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5571"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1ge63f87a8d093d294bd1ce6747cbb42ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref> *</type>
        <definition>MprSpin* mprCreateSpinLock</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateSpinLock</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Create a spin lock lock object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call creates a spinlock object that can be used in <ref refid="group___mpr_synch_1gf2a84bc9cee343c8ebfc3bfa49751795" kindref="member">mprSpinLock</ref>, and <ref refid="group___mpr_synch_1geb11c8a1f0c2c3f905967a932626121e" kindref="member">mprSpinUnlock</ref> calls. Spin locks using <ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref> are much faster than <ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref> based locks on some systems. Use <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> to destroy the lock. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4269"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_11edcbb0800991ef0ed35221c7147e1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprTestService *</type>
        <definition>MprTestService* mprCreateTestService</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateTestService</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7018"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprThread *</type>
        <definition>MprThread* mprCreateThread</definition>
        <argsstring>(MprCtx ctx, cchar *name, MprThreadProc proc, void *data, int stackSize)</argsstring>
        <name>mprCreateThread</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>MprThreadProc</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stackSize</declname>
        </param>
        <briefdescription>
<para>Create a new thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>MPR threads are usually real O/S threads and can be used with the various locking services (<ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref>, <ref refid="struct_mpr_cond" kindref="compound">MprCond</ref>, <ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref>) to enable scalable multithreaded applications. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique name to give the thread </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Entry point function for the thread. <ref refid="group___mpr_thread_1g35c53df918c2f52e2e1f6961e35ee8d1" kindref="member">mprStartThread</ref> will invoke this function to start the thread </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread private data stored in MprThread.data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stackSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack size to use for the thread. On VM based systems, increasing this value, does not necessarily incurr a real memory (working-set) increase. Set to zero for a default stack size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A MprThread object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4455"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_17d63b988a95120747da535a6d3f67fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_thread_local" kindref="compound">MprThreadLocal</ref> *</type>
        <definition>MprThreadLocal* mprCreateThreadLocal</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateThreadLocal</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4540"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1530d8bd3099eb822298ebf7589cb92a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprThreadService *</type>
        <definition>MprThreadService* mprCreateThreadService</definition>
        <argsstring>(struct Mpr *mpr)</argsstring>
        <name>mprCreateThreadService</name>
        <param>
          <type>struct Mpr *</type>
          <declname>mpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4394"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_event_1g67402fd2c25d36deed940433da8350d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprEvent *</type>
        <definition>MprEvent* mprCreateTimerEvent</definition>
        <argsstring>(MprDispatcher *dispatcher, cchar *name, int period, MprEventProc proc, void *data, int flags)</argsstring>
        <name>mprCreateTimerEvent</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_event_1g6777c813e9ab55b0e29dfa9d0d19f32b" kindref="member">MprEventProc</ref></type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Create a timer event. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Create and queue a timer event for service. This is a convenience wrapper to create continuous events over the <ref refid="group___mpr_event_1gf292a0f7982192dba8e5f7535d24377d" kindref="member">mprCreateEvent</ref> call. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>Dispatcher object created via mprCreateDispatcher </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Debug name of the event </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke when the event is run </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds used by continuous events between firing of the event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to associate with the event and stored in event-&gt;data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Not used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4011"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1af581970e91919861ff6895a0bfdb5d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprCreateTimeService</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateTimeService</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2246"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_wait_handler_1gcc222183cbeb335191a334899b5635bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprWaitHandler *</type>
        <definition>MprWaitHandler* mprCreateWaitHandler</definition>
        <argsstring>(MprCtx ctx, int fd, int mask, MprDispatcher *dispatcher, MprEventProc proc, void *data)</argsstring>
        <name>mprCreateWaitHandler</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_event_1g6777c813e9ab55b0e29dfa9d0d19f32b" kindref="member">MprEventProc</ref></type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Create a wait handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Create a wait handler that will be invoked when I/O of interest occurs on the specified file handle The wait handler is registered with the MPR event I/O mechanism. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of events of interest. This is made by oring MPR_READABLE and MPR_WRITABLE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>Dispatcher object to use for scheduling the I/O event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to invoke when an I/O event of interest has occurred. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data item to pass to the callback </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new wait handler registered with the MPR event mechanism </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5421"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_158a52465f08fdc63e58548045d5bfc16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprWaitService *</type>
        <definition>MprWaitService* mprCreateWaitService</definition>
        <argsstring>(struct Mpr *mpr)</argsstring>
        <name>mprCreateWaitService</name>
        <param>
          <type>struct Mpr *</type>
          <declname>mpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5336"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_195a0df271e231ca3a1c055b2421e3d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprWorkerService *</type>
        <definition>MprWorkerService* mprCreateWorkerService</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprCreateWorkerService</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5998"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_18c2d2e80b527c373c099f27ff4219698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprDebug</definition>
        <argsstring>(MprCtx ctx, int level, cchar *fmt,...)</argsstring>
        <name>mprDebug</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2731"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_16161ae2c822d03b9bda53ef7663f14f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprDecode64</definition>
        <argsstring>(char *buffer, int bufsize, cchar *str)</argsstring>
        <name>mprDecode64</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Deocde buffer using base-46 encoding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a buffer containing that data to decode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to decode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise returns MPR_ERR_WONT_FIT if the buffer is too small. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6126"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_date_1g1fe29b0b5a726295afe36d28ab027270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct tm *</type>
        <definition>struct tm* mprDecodeLocalTime</definition>
        <argsstring>(MprCtx ctx, struct tm *timep, MprTime time)</argsstring>
        <name>mprDecodeLocalTime</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct tm *</type>
          <declname>timep</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Decode a time value into a tokenized local time value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Safe replacement for localtime. This call converts the time value to local time and formats the as a struct tm. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timep</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a tm structure to hold the result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the tmBuf. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2267"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_date_1g4437f3ff3a58a9cf9d4d7d9e763fcc1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct tm *</type>
        <definition>struct tm* mprDecodeUniversalTime</definition>
        <argsstring>(MprCtx ctx, struct tm *timep, MprTime time)</argsstring>
        <name>mprDecodeUniversalTime</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct tm *</type>
          <declname>timep</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Decode a time value into a tokenized UTC time structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Safe replacement for gmtime. This call converts the supplied time value to UTC time and parses the result into a tm structure. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timep</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a tm structure to hold the result. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>The time to format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the tm structure reference </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2279"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_17fe4c3fb94490eb462405d86f71514d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprDedicateWorker</definition>
        <argsstring>(MprWorker *worker)</argsstring>
        <name>mprDedicateWorker</name>
        <param>
          <type>MprWorker *</type>
          <declname>worker</declname>
        </param>
        <briefdescription>
<para>Dedicate a worker thread to a current real thread. </para>        </briefdescription>
        <detaileddescription>
<para>This implements thread affinity and is required on some platforms where some APIs (waitpid on uClibc) cannot be called on a different thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker thread reference </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6101"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1f738be140726725efc160324b0d209e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprDedicateWorkerToHandler</definition>
        <argsstring>(MprWaitHandler *wp, struct MprWorker *worker)</argsstring>
        <name>mprDedicateWorkerToHandler</name>
        <param>
          <type>MprWaitHandler *</type>
          <declname>wp</declname>
        </param>
        <param>
          <type>struct MprWorker *</type>
          <declname>worker</declname>
        </param>
        <briefdescription>
<para>Dedicate a worker thread to a wait handler. </para>        </briefdescription>
        <detaileddescription>
<para>This implements thread affinity and is required on some platforms where some APIs (waitpid on uClibc) cannot be called on a different thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wp</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait handler created via <ref refid="group___mpr_wait_handler_1gcc222183cbeb335191a334899b5635bd" kindref="member">mprCreateWaitHandler</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker thread reference </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5497"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g4e9f46a4287d3c8392e2bacfc45fea75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprDeletePath</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprDeletePath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Delete a file or directory. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing the path to delete. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful otherwise a negative MPR error code is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3326"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g66cccaaaa550e9d2cf381ff8854c2d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprDisableCmdEvents</definition>
        <argsstring>(MprCmd *cmd, int channel)</argsstring>
        <name>mprDisableCmdEvents</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Disable command I/O events. </para>        </briefdescription>
        <detaileddescription>
<para>This disables events on a given channel. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number to close. Should be either MPR_CMD_STDIN, MPR_CMD_STDOUT or MPR_CMD_STDERR. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6284"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g457be50126337e42f1df6c30af9db510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprDisableFileBuffering</definition>
        <argsstring>(MprFile *file)</argsstring>
        <name>mprDisableFileBuffering</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Disable file buffering. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Disable any buffering of data when using the buffer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>File instance returned from <ref refid="group___mpr_file_1g4f97953317f303fe033be11fcbcec4e9" kindref="member">mprOpen</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3068"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_140585bcce880703910e75ff4599529da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprDisableSocketEvents</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprDisableSocketEvents</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Disable socket events for a socket callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5922"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_wait_handler_1gdb816527b96de477a69bb9e99098c9cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprDisableWaitEvents</definition>
        <argsstring>(MprWaitHandler *wp)</argsstring>
        <name>mprDisableWaitEvents</name>
        <param>
          <type>MprWaitHandler *</type>
          <declname>wp</declname>
        </param>
        <briefdescription>
<para>Disable wait events. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Disable wait events for a given file descriptor. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wp</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait handler created via <ref refid="group___mpr_wait_handler_1gcc222183cbeb335191a334899b5635bd" kindref="member">mprCreateWaitHandler</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5453"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g7562126cafba57260cd73634f1ee4aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprDisconnectCmd</definition>
        <argsstring>(MprCmd *cmd)</argsstring>
        <name>mprDisconnectCmd</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Disconnect a command its underlying I/O channels. </para>        </briefdescription>
        <detaileddescription>
<para>This is used to prevent further I/O wait events while still preserving the MprCmd object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6276"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_15f9301dbcddf9d1a62b40c69bc67fe40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprDisconnectSocket</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprDisconnectSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Disconnect a socket by closing its underlying file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para>This is used to prevent further I/O wait events while still preserving the socket object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5703"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_13eb63e57b0db54789686de75962dca27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprDispatchEvents</definition>
        <argsstring>(MprDispatcher *dispatcher, bool reschedule)</argsstring>
        <name>mprDispatchEvents</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reschedule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3925"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1176d0ea8501110003ec63c0e3ecf24f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprDtoa</definition>
        <argsstring>(MprCtx ctx, double value, int ndigits, int mode, int flags)</argsstring>
        <name>mprDtoa</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndigits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Convert a double to ascii. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndigits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of digits to render </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Modes are: 0 Shortest string, 1 Like 0, but with Steele &amp; White stopping rule, 2 Return ndigits of result, 3 Number of digits applies after the decimal point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Format flags </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1561"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1gc6512c8fa92c1d91cf99f4e3ad6af2f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprList *</type>
        <definition>MprList* mprDupList</definition>
        <argsstring>(MprCtx ctx, MprList *src)</argsstring>
        <name>mprDupList</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>MprList *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Duplicate a list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Copy the contents of a list into a new list. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory context from which to allocate the list. See <ref refid="group___mpr_mem_1g8453c59fd682fda78bbd18eb9f572dec" kindref="member">mprAlloc</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source list to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a new list reference </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2441"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g2fd38e2aaf8e7c2a1aed39aa1005155e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprEnableCmdEvents</definition>
        <argsstring>(MprCmd *cmd, int channel)</argsstring>
        <name>mprEnableCmdEvents</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Enable command I/O events. </para>        </briefdescription>
        <detaileddescription>
<para>This enables events on a given channel. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number to close. Should be either MPR_CMD_STDIN, MPR_CMD_STDOUT or MPR_CMD_STDERR. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6292"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1b9239642f6f3418d97c779c410a9aa91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprEnableDispatcher</definition>
        <argsstring>(MprDispatcher *dispatcher)</argsstring>
        <name>mprEnableDispatcher</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <briefdescription>
<para>Enable a dispatcher to service events. </para>        </briefdescription>
        <detaileddescription>
<para>The mprCreateDispatcher routiner creates dispatchers in the disabled state. Use mprEnableDispatcher to enable them to begin servicing events. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>Dispatcher to enable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3893"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g1912be708fa60f6afde7e174413507bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprEnableFileBuffering</definition>
        <argsstring>(MprFile *file, int size, int maxSize)</argsstring>
        <name>mprEnableFileBuffering</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSize</declname>
        </param>
        <briefdescription>
<para>Enable file buffering. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Enable data buffering when using the buffer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>File instance returned from <ref refid="group___mpr_file_1g4f97953317f303fe033be11fcbcec4e9" kindref="member">mprOpen</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size to allocate for the buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size the data buffer can grow to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3078"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a2b9f1eb8ccbe19f2ca1c277e9e714e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprEnableSocketEvents</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprEnableSocketEvents</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Enable socket events for a socket callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5916"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_wait_handler_1g3a2dba730e20be0baf6166050ac947d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprEnableWaitEvents</definition>
        <argsstring>(MprWaitHandler *wp, int desiredMask)</argsstring>
        <name>mprEnableWaitEvents</name>
        <param>
          <type>MprWaitHandler *</type>
          <declname>wp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>desiredMask</declname>
        </param>
        <briefdescription>
<para>Enable wait events. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Enable wait events for a given file descriptor. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wp</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait handler created via <ref refid="group___mpr_wait_handler_1gcc222183cbeb335191a334899b5635bd" kindref="member">mprCreateWaitHandler</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desiredMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of desirable events (MPR_READABLE | MPR_WRITABLE) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5462"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e57602feb972619422110f9fbd0d8341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprEncode64</definition>
        <argsstring>(char *buffer, int bufsize, cchar *str)</argsstring>
        <name>mprEncode64</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Encode buffer using base-46 encoding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a buffer that will contain the encoded data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to encode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise returns MPR_ERR_WONT_FIT if the buffer is too small. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6135"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1gba80d025830577c73b7fab45b3ecd256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log an error message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Send an error message to the MPR debug logging subsystem. The message will be to the log handler defined by <ref refid="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" kindref="member">mprSetLogHandler</ref>. It is up to the log handler to respond appropriately and log the message. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2692"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_143b32087d8a020c9fc1ed976a8e4371d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprEscapeCmd</definition>
        <argsstring>(MprCtx ctx, cchar *cmd, int escChar)</argsstring>
        <name>mprEscapeCmd</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>escChar</declname>
        </param>
        <briefdescription>
<para>Encode a string escaping typical command (shell) characters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Encode a string escaping all dangerous characters that have meaning for the unix or MS-DOS command shells. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command string to encode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>escChar</parametername>
</parameternamelist>
<parameterdescription>
<para>Escape character to use when encoding the command. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated string containing the escaped command. Caller must free using <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6783"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_14f15488d5680bfabf4f243c863d98314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprEscapeHtml</definition>
        <argsstring>(MprCtx ctx, cchar *html)</argsstring>
        <name>mprEscapeHtml</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>html</declname>
        </param>
        <briefdescription>
<para>Encode a string by escaping typical HTML characters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Encode a string escaping all dangerous characters that have meaning in HTML documents </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>html</parametername>
</parameternamelist>
<parameterdescription>
<para>HTML content to encode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated string containing the escaped HTML. Caller must free using <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6793"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g44e05f9b1cb74a3abd9271d140f5d66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprFatalError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprFatalError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a fatal error message and exit. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Send a fatal error message to the MPR debug logging subsystem and then exit the application by calling exit(). The message will be to the log handler defined by <ref refid="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" kindref="member">mprSetLogHandler</ref>. It is up to the log handler to respond appropriately and log the message. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2704"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g91dff182995e9e7f443373a5b27da4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprFlush</definition>
        <argsstring>(MprFile *file)</argsstring>
        <name>mprFlush</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Flush any buffered write data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Write buffered write data and then reset the internal buffers. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3087"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g453b62a6659fc9fa4d041165dad7461e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprFlushBuf</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprFlushBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Flush the buffer contents. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Discard the buffer contents and reset the start end content pointers. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1975"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g1e94b295effb81620c20b7ecf6e0e1d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprFlushSocket</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprFlushSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Flush a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Flush any buffered data in a socket. Standard sockets do not use buffering and this call will do nothing. SSL sockets do buffer and calling mprFlushSocket will write pending written data. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of bytes actually written. Return a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5749"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_date_1g70e43deb465cef84d2387800ae07a194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprFormatLocalTime</definition>
        <argsstring>(MprCtx ctx, MprTime time)</argsstring>
        <name>mprFormatLocalTime</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Convert a time value to local time and format as a string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Safe replacement for ctime. This call formats the time value supplied via <emphasis>timep</emphasis>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to format. Use mprGetTime to retrieve the current time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The formatting time string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2289"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_date_1g315d7591e179c57cd2072796a8dce0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprFormatTime</definition>
        <argsstring>(MprCtx ctx, cchar *fmt, struct tm *timep)</argsstring>
        <name>mprFormatTime</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>struct tm *</type>
          <declname>timep</declname>
        </param>
        <briefdescription>
<para>Format a time value as a local time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call formats the time value supplied via <emphasis>timep</emphasis>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>The time format to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timep</parametername>
</parameternamelist>
<parameterdescription>
<para>The time value to format. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The formatting time string. Caller should free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2300"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_107783ffc93b6fd136de7b927ccceed19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprFprintf</definition>
        <argsstring>(struct MprFile *file, cchar *fmt,...)</argsstring>
        <name>mprFprintf</name>
        <param>
          <type>struct MprFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print a formatted message to a file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This is a replacement for fprintf as part of the safe string MPR library. It minimizes memory use and uses a file descriptor instead of a File pointer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>MprFile object returned via mprOpen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of bytes written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1612"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprFree</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>mprFree</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free a block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>mprFree should be used to free memory allocated by mprAlloc, or mprRealloc. This call will ignore calls to free a null pointer, thus it is an acceptable idiom to free a pointer without testing its value for null. When mprFree is called it will first invoke any object destructor function for the allocated block. If this destructor returns zero, it will then proceed and free all allocated children before finally releasing the block. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory to free. If NULL, take no action. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if the block was actually freed. If the destructor prevented the freeing, a non-zero value will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5120"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_11d03816923ffb4392c095869ac37d0c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprFreeChildren</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprFreeChildren</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free all the children blocks allocated of a block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5135"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g6d804c1b812c9ea7a1d0fb09764def90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetAbsPath</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetAbsPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Convert a path to an absolute path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get an absolute (canonical) equivalent representation of a path. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An absolute path. Caller should free via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3336"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1c1c737cca87de821e71f45c89b965365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprAlloc *</type>
        <definition>MprAlloc* mprGetAllocStats</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetAllocStats</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Return the current allocation memory statistics block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to the allocation memory statistics. Do not modify its contents. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5234"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1de408e459ab57104df4b4c1376d3ff22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetAppDir</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetAppDir</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the application directory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the directory containing the application executable. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string containing the application directory. Caller must free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6649"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1ee21b01fdc7627c3511f24c98252a706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetAppName</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetAppName</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the application name defined via mprSetAppName. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the one-word lower case application name defined via mprSetAppName </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6634"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1b4545c6b9e0fc0e129525b3a7c3f41f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetAppPath</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetAppPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the application executable path. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string containing the application executable path. Caller must free </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6641"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_103c53a16b0c1cab8531f9b1034e7995b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetAppTitle</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetAppTitle</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6652"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_10d8d3dfd0ac5163adef2f5a324a976dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetAppVersion</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetAppVersion</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6653"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_worker_service_1gf26e38fd431360fd0099279a28acdd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetAvailableWorkers</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetAvailableWorkers</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the count of available worker threads Return the count of free threads in the worker thread pool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer count of worker threads. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6009"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g3a1388925b9ab4a209b0610cd674139f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetBlockFromBuf</definition>
        <argsstring>(MprBuf *buf, char *blk, int count)</argsstring>
        <name>mprGetBlockFromBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>blk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Get a block of data from the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get a block of data from the buffer start and advance the start position. If the requested length is greater than the available buffer content, then return whatever data is available. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination block for the read data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of bytes to read from the buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The count of bytes rread into the block or -1 if the buffer is empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1996"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1gbd1fae7a41a8c38220de4f06e6d0e053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetBufEnd</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprGetBufEnd</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get a reference to the end of the buffer contents. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get a pointer to the location immediately after the end of the buffer contents. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the end of the buffer data contents. Points to the location one after the last data byte. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2053"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g4d39e8467818e491ecec68a4db8df054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetBufLength</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprGetBufLength</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get the buffer content length. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the length of the buffer contents. This is not the same as the buffer size which may be larger. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the content stored in the buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2005"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g962aeff07a87ab52da3bcd1973fe801b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetBufOrigin</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprGetBufOrigin</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get the origin of the buffer content storage. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get a pointer to the start of the buffer content storage. This may not be equal to the start of the buffer content if <ref refid="group___mpr_buf_1g1fbe536bbdd8bc3f68a5246f69305994" kindref="member">mprAdjustBufStart</ref> has been called. Use <ref refid="group___mpr_buf_1ga609f1dc4e3f8315949c4cf93e27aff1" kindref="member">mprGetBufSize</ref> to determine the length of the buffer content storage array. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the buffer content storage. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2016"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g2791daeb72ae2e3f455250dfba72aa67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___mpr_buf_1ga0f2f003728ef5bb244fdabe2edc56f7" kindref="member">MprBufProc</ref></type>
        <definition>MprBufProc mprGetBufRefillProc</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprGetBufRefillProc</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get the buffer refill procedure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Return the buffer refill callback function. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The refill call back function if defined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2210"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1ga609f1dc4e3f8315949c4cf93e27aff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetBufSize</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprGetBufSize</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get the current size of the buffer content storage. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This returns the size of the memory block allocated for storing the buffer contents. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the buffer content storage. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2025"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g6c6646d8f5933dfbf31983a374b491e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetBufSpace</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprGetBufSpace</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get the space available to store content. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the number of bytes available to store content in the buffer </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes available </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2034"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1gc982291efef3d49cce4bc2ecec6566e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetBufStart</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprGetBufStart</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get the start of the buffer contents. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get a pointer to the start of the buffer contents. Use <ref refid="group___mpr_buf_1g4d39e8467818e491ecec68a4db8df054" kindref="member">mprGetBufLength</ref> to determine the length of the content. Use <ref refid="group___mpr_buf_1gbd1fae7a41a8c38220de4f06e6d0e053" kindref="member">mprGetBufEnd</ref> to get a pointer to the location after the end of the content. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the start of the buffer data contents </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2044"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g33e438e507e4e5effcddb2cc103e5c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetc</definition>
        <argsstring>(MprFile *file)</argsstring>
        <name>mprGetc</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Read a character from the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Read a single character from the file and advance the read position. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If successful, return the character just read. Otherwise return a negative MPR error code. End of file is signified by reading 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3128"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1gf128b71005bdd12507110e1f21b483d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetCharFromBuf</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprGetCharFromBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get a character from the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the next byte from the buffer start and advance the start position. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The character or -1 if the buffer is empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1984"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g68cf4226027c07ba3f3e5b30ecd48590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprBuf *</type>
        <definition>MprBuf* mprGetCmdBuf</definition>
        <argsstring>(MprCmd *cmd, int channel)</argsstring>
        <name>mprGetCmdBuf</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get the underlying buffer for a channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number to close. Should be either MPR_CMD_STDIN, MPR_CMD_STDOUT or MPR_CMD_STDERR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the MprBuf buffer structure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6319"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g4dcefa4a65ff85b78c9b6580abac0a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetCmdExitStatus</definition>
        <argsstring>(MprCmd *cmd, int *status)</argsstring>
        <name>mprGetCmdExitStatus</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get the command exit status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to an integer to receive the command exit status. This is typically zero for success, but this is platform specific. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6301"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1gb286ce3b057579a16b84ec56997ae63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetCmdFd</definition>
        <argsstring>(MprCmd *cmd, int channel)</argsstring>
        <name>mprGetCmdFd</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get the underlying file descriptor for an I/O channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number to close. Should be either MPR_CMD_STDIN, MPR_CMD_STDOUT or MPR_CMD_STDERR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The file descriptor </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6310"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1ga499ec9a691d9b74753edeac24afbcdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprOsThread</type>
        <definition>MprOsThread mprGetCurrentOsThread</definition>
        <argsstring>()</argsstring>
        <name>mprGetCurrentOsThread</name>
        <briefdescription>
<para>Get the O/S thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the O/S thread ID for the currently executing thread. </para></simplesect>
<simplesect kind="return"><para>Returns a platform specific O/S thread ID. On Unix, this is a pthread reference. On other systems it is a thread integer value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4516"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_18b5d0f5ed666f1ec48caaf65a9304acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetCurrentPath</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetCurrentPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Return the current working directory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an allocated string with the current working directory as an absolute path. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3316"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1gf7be9fb3ab99388b3e83093a78a74265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprThread *</type>
        <definition>MprThread* mprGetCurrentThread</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetCurrentThread</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the currently executing thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the thread object for the currently executing O/S thread. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a thread object representing the current O/S thread. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4507"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_109693a2d0138d474b5825bdc4d742fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetCurrentThreadName</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetCurrentThreadName</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Return the name of the current thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a static thread name. Caller must not free </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4575"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_13f2f40ded8900f8a9c3f5711c5821ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprWorker *</type>
        <definition>MprWorker* mprGetCurrentWorker</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetCurrentWorker</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6115"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_1g1392efc11ff7ec56f8cb2e3b6fa1168c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprGetDebugMode</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetDebugMode</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the debug mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns whether the debug mode is enabled. Some modules observe debug mode and disable timeouts and timers so that single-step debugging can be used. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if debug mode is enabled, otherwise returns false. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6673"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a3492a2cff32689b04b0989a834d7bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprDispatcher *</type>
        <definition>MprDispatcher* mprGetDispatcher</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetDispatcher</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the MPR primary dispatcher. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the MPR dispatcher object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3876"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a0d131d6b70694302db3db3d54e44018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetDomainName</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetDomainName</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6659"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1ebad4782acd4f2cd541ce68737f98471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
        <definition>MprTime mprGetElapsedTime</definition>
        <argsstring>(MprCtx ctx, MprTime mark)</argsstring>
        <name>mprGetElapsedTime</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
          <declname>mark</declname>
        </param>
        <briefdescription>
<para>Get the elapsed time since a time mark. </para>        </briefdescription>
        <detaileddescription>
<para>Create the time mark with <ref refid="group___mpr_date_1gedc887ffd106e62ff9f4e69044910c92" kindref="member">mprGetTime()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mark</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting time stamp </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the time elapsed since the mark was taken. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2327"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_11b5848190ea941dbefa280cbf60b921f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetEndian</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetEndian</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6765"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_1gf184a06275222c97f80e0a8d807418ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetError</definition>
        <argsstring>()</argsstring>
        <name>mprGetError</name>
        <briefdescription>
<para>Return the error code for the most recent system or library operation. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns an error code from the most recent system call. This will be mapped to be either a POSIX error code or an MPR error code. </para></simplesect>
<simplesect kind="return"><para>The mapped error code. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6700"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g96273fe03aa3e5e1de8820e8aaba7e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprOffset</type>
        <definition>MprOffset mprGetFilePosition</definition>
        <argsstring>(MprFile *file)</argsstring>
        <name>mprGetFilePosition</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Return the current file position. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Return the current read/write file position. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file object returned from <ref refid="group___mpr_file_1g4f97953317f303fe033be11fcbcec4e9" kindref="member">mprOpen</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current file offset position if successful. Returns a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3096"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1gb1ae4e8c4128773497a609e444dbe8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprOffset</type>
        <definition>MprOffset mprGetFileSize</definition>
        <argsstring>(MprFile *file)</argsstring>
        <name>mprGetFileSize</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Get the size of the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Return the current file size </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file object returned from <ref refid="group___mpr_file_1g4f97953317f303fe033be11fcbcec4e9" kindref="member">mprOpen</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current file size if successful. Returns a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3105"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_hash_1g56c37e6def80582b297fa3c27cd5a15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHash *</type>
        <definition>MprHash* mprGetFirstHash</definition>
        <argsstring>(MprHashTable *table)</argsstring>
        <name>mprGetFirstHash</name>
        <param>
          <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Return the first symbol in a symbol entry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Prepares for walking the contents of a symbol table by returning the first entry in the symbol table. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol table returned via mprCreateSymbolTable. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the first entry in the symbol table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2867"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g34b6f80710796e4d3d766299ebf37078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprGetFirstItem</definition>
        <argsstring>(MprList *list)</argsstring>
        <name>mprGetFirstItem</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Get the first item in the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns the value of the first item in the list. After calling this routine, the remaining list items can be walked using mprGetNextItem. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2468"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_hash_1gb18f7a0015706d7c7ded172357978875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetHashCount</definition>
        <argsstring>(MprHashTable *table)</argsstring>
        <name>mprGetHashCount</name>
        <param>
          <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Return the count of symbols in a symbol entry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns the number of symbols currently existing in a symbol table. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol table returned via mprCreateSymbolTable. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer count of the number of entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2889"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e4714dbb30cb0328b35b1ca4e91d01c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetHostName</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetHostName</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6655"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1ff9f9b5b06c7abbdd90387ecb20b0897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HWND</type>
        <definition>HWND mprGetHwnd</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetHwnd</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6755"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1242e323a9c46a5c30e9815aa01026af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long mprGetInst</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetInst</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6757"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_11289f36d9c819d04a6e3c4314e420ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetIpAddr</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetIpAddr</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6661"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g4535837cc644f208063b1ca3e2ae46c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprGetItem</definition>
        <argsstring>(MprList *list, int index)</argsstring>
        <name>mprGetItem</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get an list item. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get an list item specified by its index. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Item index into the list. Indexes have a range from zero to the lenghth of the list - 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2486"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g629c61d9bfbea110851227fd61569093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprGetLastItem</definition>
        <argsstring>(MprList *list)</argsstring>
        <name>mprGetLastItem</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Get the last item in the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns the value of the last item in the list. After calling this routine, the remaining list items can be walked using mprGetPrevItem. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2477"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1gc47331b3442493d84405d32ffcb98aba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetListCapacity</definition>
        <argsstring>(MprList *list)</argsstring>
        <name>mprGetListCapacity</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Get the current capacity of the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns the capacity of the list. This will always be equal to or greater than the list length. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2494"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g8710190bcf91677b3758890b7deefd75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetListCount</definition>
        <argsstring>(MprList *list)</argsstring>
        <name>mprGetListCount</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Get the number of items in the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns the number of items in the list. This will always be less than or equal to the list capacity. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2502"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1gdfefb0345bcaca30d7d86650b06d6bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___mpr_log_1g8ca7894a05a04dc473d942ffc7cd1689" kindref="member">MprLogHandler</ref></type>
        <definition>MprLogHandler mprGetLogHandler</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetLogHandler</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the current MPR debug log handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the log handler defined via <ref refid="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" kindref="member">mprSetLogHandler</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A function of the signature <ref refid="group___mpr_log_1g8ca7894a05a04dc473d942ffc7cd1689" kindref="member">MprLogHandler</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2680"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_15a047d643f4c0b4f2dc2760aeea3e61c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetLogLevel</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetLogLevel</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the current logging level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current log level. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6680"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_worker_service_1g5ec8913eb20bf209312f10f69005667a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetMaxWorkers</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetMaxWorkers</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the maximum count of worker pool threads Get the maximum limit of worker pool threads. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The maximum count of worker pool threads. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6045"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a5fff86cf2f5455dba2476c579ca3efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetMD5Hash</definition>
        <argsstring>(MprCtx ctx, cchar *buf, int len, cchar *prefix)</argsstring>
        <name>mprGetMD5Hash</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Get an MD5 checksum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to checksum </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>String prefix to insert at the start of the result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An MD5 checksum string. Caller must free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6145"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_module_1g33859b7b158056a95d73f106f76fe7fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetModuleSearchPath</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetModuleSearchPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the module search path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the directory search path used by the MPR when loading dynamic modules. This is a colon separated (or semicolon on Windows) set of directories. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The module search path. Caller must not free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3720"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g2de05fa43e494c05da7b2e941f3f407d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetNativePath</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetNativePath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get a path formatted according to the native O/S conventions. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get an equivalent absolute path formatted using the directory separators native to the O/S platform. On Windows, it will use backward slashes (&quot;\&quot;) as the directory separator and will contain a drive specification. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated string containing the new path. Caller must free using <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3347"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1824555d5ed37b9968f5a65042271f70f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprEvent *</type>
        <definition>MprEvent* mprGetNextEvent</definition>
        <argsstring>(MprDispatcher *dispatcher)</argsstring>
        <name>mprGetNextEvent</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4024"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_hash_1gba1514fa60bf0b72bf528b2c1fbecfc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHash *</type>
        <definition>MprHash* mprGetNextHash</definition>
        <argsstring>(MprHashTable *table, MprHash *last)</argsstring>
        <name>mprGetNextHash</name>
        <param>
          <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>MprHash *</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Return the next symbol in a symbol entry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Continues walking the contents of a symbol table by returning the next entry in the symbol table. A previous call to mprGetFirstSymbol or mprGetNextSymbol is required to supply the value of the <emphasis>last</emphasis> argument. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol table returned via mprCreateSymbolTable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol table entry returned via mprGetFirstSymbol or mprGetNextSymbol. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the first entry in the symbol table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2880"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1gf84ab68545207f073e9f916adc8817e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprGetNextItem</definition>
        <argsstring>(MprList *list, int *lastIndex)</argsstring>
        <name>mprGetNextItem</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lastIndex</declname>
        </param>
        <briefdescription>
<para>Get the next item in the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns the value of the next item in the list. Before calling this routine, mprGetFirstItem must be called to initialize the traversal of the list. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an integer that will hold the last index retrieved. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2512"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g94ae6e9571d7089105a11a38b758d808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetNormalizedPath</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetNormalizedPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Normalize a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>A path is normalized by redundant segments such as &quot;./&quot; and &quot;../dir&quot; and duplicate path separators. Path separators are mapped. Paths are not converted to absolute paths. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>First path to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated, clean path. Caller should free via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3545"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_1gd2fa15bdd6890ff1df432ae25f4c981c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetOsError</definition>
        <argsstring>()</argsstring>
        <name>mprGetOsError</name>
        <briefdescription>
<para>Return the O/S error code. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns an O/S error code from the most recent system call. This returns errno on Unix systems or GetLastError() on Windows.. </para></simplesect>
<simplesect kind="return"><para>The O/S error code. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6690"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1144c637773024a22bbc1be9a257555ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetPageSize</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetPageSize</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the current O/S virtual page size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the page size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5262"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1ga2917f1fe62535e7f18549bad3c87c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprGetParent</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetParent</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the memory parent of a block. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Return the parent memory context for a block </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return the memory owning this block </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5200"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g40b746d52c5d360b93e62cd7f151e790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetPathBase</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetPathBase</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get the base portion of a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the base portion of a path by stripping off all directory components </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A path without any directory portion. The path is a reference into the original file string and should not be freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3358"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g0b13450482bec406bd1ca4f97e8b0ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetPathDir</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetPathDir</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get the directory portion of a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the directory portion of a path by stripping off the base name. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new string containing the directory name. Caller must free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3368"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g2aca381507c3d8455a896015d3532421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetPathExtension</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetPathExtension</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get the file extension portion of a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the file extension portion of a path. The file extension is the portion starting with the last &quot;.&quot; in the path. It thus includes &quot;.&quot; as the first charcter. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A path extension. The extension is a reference into the original file string and should not be freed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3391"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1gbee132c7baac86f676fa60f28d387341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprList *</type>
        <definition>MprList* mprGetPathFiles</definition>
        <argsstring>(MprCtx ctx, cchar *dir, bool enumDirs)</argsstring>
        <name>mprGetPathFiles</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enumDirs</declname>
        </param>
        <briefdescription>
<para>Create a directory list of files. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the list of files in a directory and return a list. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory to list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enumDirs</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to enumerate directory entries as well as regular paths. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list (MprList) of directory paths. Each path is a regular string owned by the list object. Use <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> to free the memory for the list and directory paths. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3380"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g57c6c3e051b4c39dc2f320adbb27df9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetPathInfo</definition>
        <argsstring>(MprCtx ctx, cchar *path, MprPath *info)</argsstring>
        <name>mprGetPathInfo</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>MprPath *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Return information about a file represented by a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns file status information regarding the <emphasis>path</emphasis>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing the path to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated MprPath structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3402"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g85a7b4f2de356310207f30d416e4b64e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetPathNewline</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetPathNewline</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get the file newline character string for a given path. </para>        </briefdescription>
        <detaileddescription>
<para>Return the character string used to delimit new lines in text files. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Use this path to specify either the root of the file system or a file on the file system. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string used to delimit new lines. This is typically &quot;\n&quot; or &quot;\r\n&quot; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3432"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g962d4a24986091501b0db73e3d55d2b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetPathParent</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetPathParent</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get the parent directory of a path. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated string containing the parent directory. Caller must free using <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3411"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g15dd176c544a6d52fa77c32cec9ab45d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetPathSeparators</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetPathSeparators</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get the path directory separator. </para>        </briefdescription>
        <detaileddescription>
<para>Return the directory separator characters used to separate directories on a given file system. Typically &quot;/&quot; or &quot;\&quot; The first entry is the default separator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Use this path to specify either the root of the file system or a file on the file system. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string of path separators. The first entry is the default separator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3422"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g8679aa877fd97feb7173442aab53b308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetPortablePath</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetPortablePath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get a portable path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get an equivalent absolute path that is somewhat portable. This means it will use forward slashes (&quot;/&quot;) as the directory separator. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated string containing the new path. Caller must free using <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3443"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g701e2771ac787973c94e523898d596a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprGetPrevItem</definition>
        <argsstring>(MprList *list, int *lastIndex)</argsstring>
        <name>mprGetPrevItem</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lastIndex</declname>
        </param>
        <briefdescription>
<para>Get the previous item in the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns the value of the previous item in the list. Before calling this routine, mprGetFirstItem and/or mprGetNextItem must be called to initialize the traversal of the list. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an integer that will hold the last index retrieved. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2523"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1926e1c2b157390611fcd15a15e151458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetRandomBytes</definition>
        <argsstring>(MprCtx ctx, char *buf, int size, int block)</argsstring>
        <name>mprGetRandomBytes</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6762"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g947673b01c05ec0b68cdebb4159bddee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetRelPath</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprGetRelPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get a relative path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get an equivalent path that is relative to the application&apos;s current working directory. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated string containing the relative directory. Caller must free using <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3453"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_date_1gc0334d0cee72fb5d5bd9a5dd63b62b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
        <definition>MprTime mprGetRemainingTime</definition>
        <argsstring>(MprCtx ctx, MprTime mark, uint timeout)</argsstring>
        <name>mprGetRemainingTime</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
          <declname>mark</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Return the time remaining until a timeout has elapsed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mark</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting time stamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time in milliseconds until the timeout elapses </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2319"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g15a5b5e70b74166eb1aea7d278d11358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGets</definition>
        <argsstring>(MprFile *file, char *buf, uint size)</argsstring>
        <name>mprGets</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read a line from the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Read a single line from the file and advance the read position. Lines are delimited by the newline character. The newline is not included in the returned buffer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-allocated buffer to contain the line of data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <emphasis>buf</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters read into <emphasis>buf</emphasis>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3118"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a6b6a1e16b74b3d8bc0bbf9074e93e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetServerName</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetServerName</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6657"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g8240b2dc5540ae928d19410447c2bab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprGetSocketBlockingMode</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprGetSocketBlockingMode</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Get the socket blocking mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Return the current blocking mode setting. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the socket is in blocking mode. Otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5794"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g64ccf4250b432690a73bb66f0a639f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetSocketError</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprGetSocketError</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Get a socket error code. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This will map a Windows socket error code into a posix error code. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A posix error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5862"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g4ed3619958eac42ab4e8136464ae00c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetSocketFd</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprGetSocketFd</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Get the socket file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the file descriptor associated with a socket. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer file descriptor used by the O/S for the socket. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5821"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1ga4d2f67f80f168a4be7e5f3b96541bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetSocketPort</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprGetSocketPort</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Get the port used by a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the TCP/IP port number used by the socket. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer TCP/IP port number used by the socket. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5830"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_17084bfea78dcf720c82e7163b9dbc4da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprFile *</type>
        <definition>MprFile* mprGetStderr</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetStderr</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Return a file object for the Stderr I/O channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A file object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3149"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1f260b8f2c8c000a6f4ec1ac7569e8416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprFile *</type>
        <definition>MprFile* mprGetStdin</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetStdin</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Return a file object for the Stdin I/O channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A file object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3142"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_129ffea058d6f735313ee8a81fd3334dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprFile *</type>
        <definition>MprFile* mprGetStdout</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetStdout</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Return a file object for the Stdout I/O channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A file object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3135"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g5539f40a5da3f48b5b2db3ea90e28221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetTempPath</definition>
        <argsstring>(MprCtx ctx, cchar *tmpDir)</argsstring>
        <name>mprGetTempPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>tmpDir</declname>
        </param>
        <briefdescription>
<para>Make a temporary file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Thread-safe way to make a unique temporary file. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmpDir</parametername>
</parameternamelist>
<parameterdescription>
<para>Base directory in which the temp file will be allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated string containing the path of the temp file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3463"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1d313ee83ab5a8dadd84ecb23a9cb3637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprGetThreadData</definition>
        <argsstring>(MprThreadLocal *tls)</argsstring>
        <name>mprGetThreadData</name>
        <param>
          <type><ref refid="struct_mpr_thread_local" kindref="compound">MprThreadLocal</ref> *</type>
          <declname>tls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4539"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1gc98816057bf8f47f8d15131e68ae12f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetThreadName</definition>
        <argsstring>(MprThread *thread)</argsstring>
        <name>mprGetThreadName</name>
        <param>
          <type>MprThread *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Get the thread name. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>MPR threads are usually real O/S threads and can be used with the various locking services (<ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref>, <ref refid="struct_mpr_cond" kindref="compound">MprCond</ref>, <ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref>) to enable scalable multithreaded applications. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread object returned from <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a string name for the thread. Caller must not free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4475"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1g0edd7ee5a80c5566dbcd079293280b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetThreadPriority</definition>
        <argsstring>(MprThread *thread)</argsstring>
        <name>mprGetThreadPriority</name>
        <param>
          <type>MprThread *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Get the thread priroity. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the current priority for the specified thread. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread object returned by <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer MPR thread priority between 0 and 100 inclusive. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4484"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_date_1gedc887ffd106e62ff9f4e69044910c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
        <definition>MprTime mprGetTime</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetTime</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the system time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the system time in milliseconds. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the time in milliseconds since boot. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2309"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1gadb495c2337079742752f4e8e572d975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetTransformedPath</definition>
        <argsstring>(MprCtx ctx, cchar *path, int flags)</argsstring>
        <name>mprGetTransformedPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Transform a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>A path is transformed by cleaning and then transforming according to the flags. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>First path to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to modify the path representation. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly allocated, clean path. Caller should free via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3482"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a071656602927b54f839595f162336a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64</type>
        <definition>int64 mprGetUsedMemory</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetUsedMemory</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Return the amount of memory currently used by the application. </para>        </briefdescription>
        <detaileddescription>
<para>This only reports heap memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the amount of heap memory used by the application in bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5241"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_138c5795e4d552281fbf168b679d89704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprGetWordTok</definition>
        <argsstring>(char *buf, int bufsize, cchar *str, cchar *delim, cchar **tok)</argsstring>
        <name>mprGetWordTok</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>delim</declname>
        </param>
        <param>
          <type>cchar **</type>
          <declname>tok</declname>
        </param>
        <briefdescription>
<para>Get the next word token. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Split a string into word tokens using the supplied separator. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to use to hold the word token </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string to tokenize. Note this cannot be a const string. It will be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>String of separator characters to use when tokenizing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tok</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a word to hold a pointer to the next token in the original string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of bytes in the allocated block. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1675"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e49faf2b50582ee775949c454bb1d33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprGetWorkerServiceStats</definition>
        <argsstring>(MprWorkerService *ps, MprWorkerStats *stats)</argsstring>
        <name>mprGetWorkerServiceStats</name>
        <param>
          <type>MprWorkerService *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>MprWorkerStats *</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6047"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1g934273252bb4202c8adeb9d8841769a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprGlobalLock</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGlobalLock</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Globally lock the application. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call asserts the application global lock so that other threads calling mprGlobalLock will block until the current thread calls mprGlobalUnlock. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4371"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1g9af03d596ad19cd7974d85d82a8c27ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprGlobalUnlock</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGlobalUnlock</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Unlock the global mutex. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call unlocks the global mutex previously locked via mprGlobalLock. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4379"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g6c40bdb62af47cbae761c6bfdc7da11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGrowBuf</definition>
        <argsstring>(MprBuf *buf, int count)</argsstring>
        <name>mprGrowBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Grow the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Grow the storage allocated for content for the buffer. The new size must be less than the maximum limit specified via <ref refid="group___mpr_buf_1ga2d850779c9881637028fcf54a1ebe30" kindref="member">mprCreateBuf</ref> or <ref refid="group___mpr_buf_1gb66fa4b1cc3c02e8808811b027d54898" kindref="member">mprSetBufSize</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of bytes by which to grow the buffer content size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2064"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g46b725c5e3a7818e3051401b016f7902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprHasAllocError</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprHasAllocError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Determine if the MPR has encountered memory allocation errors. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns true if the MPR has had a memory allocation error. Allocation errors occur if any memory allocation would cause the application to exceed the configured redline limit, or if any O/S memory allocation request fails. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if a memory allocation error has occurred. Otherwise returns FALSE. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5175"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1634f21ee23b89c3612785f8a59d27103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprHasSecureSockets</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprHasSecureSockets</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Determine if SSL is available. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if SSL is available </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5581"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g9ba5a2637bcf166c5b3f4289e590bb39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprHasSocketPendingData</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprHasSocketPendingData</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Test if the socket has buffered read data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Use this function to avoid waiting for incoming I/O if data is already buffered. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the socket has pending read data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5803"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1b136a423c6fa64f6b9c3b05576ed07ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprInitBlock</definition>
        <argsstring>(void *ptr, uint size)</argsstring>
        <name>mprInitBlock</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Initialize a block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call initializes a static block of memory so it can be used as a memory context for subseqent allocations. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the memory block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4807"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_event_1gd1638be85f9f4424a91c7fff288a4f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprInitEvent</definition>
        <argsstring>(MprDispatcher *dispatcher, MprEvent *event, cchar *name, int period, MprEventProc proc, void *data, int flags)</argsstring>
        <name>mprInitEvent</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type>MprEvent *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_event_1g6777c813e9ab55b0e29dfa9d0d19f32b" kindref="member">MprEventProc</ref></type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Initialize an event. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Statically initialize an event. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>Dispatcher object created via mprCreateDispatcher </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event structure to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Debug name for the event. Should be static. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds used by continuous events between firing of the event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke when the event is run </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to associate with the event and stored in event-&gt;data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to modify the behavior of the event. Valid values are: MPR_EVENT_CONTINUOUS to create an event which will be automatically rescheduled accoring to the specified period. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3970"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_100f489882278fb6de357b9ea21a2c778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprInitEventQ</definition>
        <argsstring>(MprEvent *q)</argsstring>
        <name>mprInitEventQ</name>
        <param>
          <type>MprEvent *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4025"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1gc1b1433c9a3b963c78572f53cf2a6fd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprInitList</definition>
        <argsstring>(MprList *list)</argsstring>
        <name>mprInitList</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Initialize a list structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>If a list is statically declared inside another structure, mprInitList can be used to initialize it before use. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the MprList struct. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2532"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1ge5ac7172314ec00d74bc8a5b61ee98fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref> *</type>
        <definition>MprMutex* mprInitLock</definition>
        <argsstring>(MprCtx ctx, MprMutex *mutex)</argsstring>
        <name>mprInitLock</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Initialize a statically allocated Mutex lock object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call initialized a Mutex lock object without allocation. The object can then be used used in <ref refid="group___mpr_synch_1gd193cb5549a1101dc17177f046144ede" kindref="member">mprLock</ref>, <ref refid="group___mpr_synch_1g2b3b8e824b92499192ea48512e31c26d" kindref="member">mprTryLock</ref> and <ref refid="group___mpr_synch_1g40a516fe58b4b2998852cd0c853027ad" kindref="member">mprUnlock</ref> calls. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to an <ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref> structure to initialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the supplied mutex. Returns null on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4250"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1gd0e8debf5fc06d66c839ef8979d8e4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref> *</type>
        <definition>MprSpin* mprInitSpinLock</definition>
        <argsstring>(MprCtx ctx, MprSpin *lock)</argsstring>
        <name>mprInitSpinLock</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
<para>Initialize a statically allocated spinlock object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call initialized a spinlock lock object without allocation. The object can then be used used in <ref refid="group___mpr_synch_1gf2a84bc9cee343c8ebfc3bfa49751795" kindref="member">mprSpinLock</ref> and <ref refid="group___mpr_synch_1geb11c8a1f0c2c3f905967a932626121e" kindref="member">mprSpinUnlock</ref> calls. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lock</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a static <ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the <ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref> object. Returns null on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4280"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_wait_handler_1g4aba5720db6c4d68637f34019eea4559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprWaitHandler *</type>
        <definition>MprWaitHandler* mprInitWaitHandler</definition>
        <argsstring>(MprCtx ctx, MprWaitHandler *wp, int fd, int mask, MprDispatcher *dispatcher, MprEventProc proc, void *data)</argsstring>
        <name>mprInitWaitHandler</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>MprWaitHandler *</type>
          <declname>wp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_event_1g6777c813e9ab55b0e29dfa9d0d19f32b" kindref="member">MprEventProc</ref></type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Statically initialize a wait handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Initialize a wait handler that will be invoked when I/O of interest occurs on the specified file handle The wait handler is registered with the MPR event I/O mechanism. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wp</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait handler structure to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of events of interest. This is made by oring MPR_READABLE and MPR_WRITABLE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>Dispatcher object to use for scheduling the I/O event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to invoke when an I/O event of interest has occurred. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data item to pass to the callback </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new wait handler registered with the MPR event mechanism </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5438"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_150dd9619a651b429734b8cdbaee7026f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprInitWindow</definition>
        <argsstring>(MprWaitService *ws)</argsstring>
        <name>mprInitWindow</name>
        <param>
          <type>MprWaitService *</type>
          <declname>ws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5342"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g6f91b177cd36508c9d470636b04fa7b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprInsertCharToBuf</definition>
        <argsstring>(MprBuf *buf, int c)</argsstring>
        <name>mprInsertCharToBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Insert a character into the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Insert a character into to the buffer prior to the current buffer start point. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to append. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2074"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1gf3e8599ae4707459cf42ad960256af98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprInsertItemAtPos</definition>
        <argsstring>(MprList *list, int index, cvoid *item)</argsstring>
        <name>mprInsertItemAtPos</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Insert an item into a list at a specific position. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Insert the item into the list before the specified position. The list will grow as required to store the item </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from <ref refid="group___mpr_list_1gd5e29adbb51053e84bcb52b9f6756e37" kindref="member">mprCreateList</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Location at which to store the item. The previous item at this index is moved up to make room. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to item to store </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the position index (positive integer) if successful. If the item cannot be inserted due to a memory allocation failure, -1 is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2545"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g081cac7e87fa8a3800d0cdd3112d5c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprIsAbsPath</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprIsAbsPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Determine if a path is absolute. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the path is absolue </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3491"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g5ac545e5959e115b2cd633004f5d949b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprIsCmdRunning</definition>
        <argsstring>(MprCmd *cmd)</argsstring>
        <name>mprIsCmdRunning</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Test if the command is still running. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the command is still running </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6327"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_1g1dfe792f44331fa47bb8e8cb8c04a2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprIsExiting</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprIsExiting</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Determine if the MPR should exit. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Returns true if the MPR should exit gracefully. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the App has been instructed to exit. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6618"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_100cde73edc55911e4ba714f445544502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprIsInfinite</definition>
        <argsstring>(double value)</argsstring>
        <name>mprIsInfinite</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1564"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_105a04872e6d51bca40b2223e466984b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprIsNan</definition>
        <argsstring>(double value)</argsstring>
        <name>mprIsNan</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1566"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1ge2e81ff8178627822dcac584dc719326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprIsRelPath</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprIsRelPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Determine if a path is relative. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the path is relative </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3500"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_16ef7153bdb829156b883d7bb50d3ce75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprIsService</definition>
        <argsstring>(Mpr *mpr)</argsstring>
        <name>mprIsService</name>
        <param>
          <type>Mpr *</type>
          <declname>mpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6750"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g122966f272c5d7d00bab8f66d569d362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprIsSocketEof</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprIsSocketEof</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Test if the other end of the socket has been closed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Determine if the other end of the socket has been closed and the socket is at end-of-file. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the socket is at end-of-file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5812"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1gbeeb5c489632e55d36e2139f8ac0f423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprIsSocketSecure</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprIsSocketSecure</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Determine if the socket is secure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Determine if the socket is using SSL to provide enhanced security. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the socket is using SSL, otherwise zero. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5899"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1eb1d9013dbfca5d9080b881e0fde2cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprIsValid</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprIsValid</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Test is a pointer is a valid memory context. </para>        </briefdescription>
        <detaileddescription>
<para>This is used to test if a block has been dynamically allocated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5206"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1fb9eede8122d445daefbadd3122bba42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprIsZero</definition>
        <argsstring>(double value)</argsstring>
        <name>mprIsZero</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1565"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1c44ccf179c55dbbcf7aa04ba86090463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprItoa</definition>
        <argsstring>(char *buf, int size, int64 value, int radix)</argsstring>
        <name>mprItoa</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int64</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <briefdescription>
<para>Convert an integer to a string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call converts the supplied integer into a string formatted into the supplied buffer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer that will hold the string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer value to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>The base radix to use when encoding the number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of characters in the string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1649"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g4d312924fd21c6cb9067857a0225782f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprJoinPath</definition>
        <argsstring>(MprCtx ctx, cchar *dir, cchar *other)</argsstring>
        <name>mprJoinPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Join paths. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Resolve one path relative to another </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory path name to test use as the base/dir. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other path name to resolve against path. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated string containing the resolved path. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3511"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g4ef9ac6d0d8789279fef742255d56879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprJoinPathExt</definition>
        <argsstring>(MprCtx ctx, cchar *dir, cchar *ext)</argsstring>
        <name>mprJoinPathExt</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
<para>Join an extension to a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Add an extension to a path if it does not already have one. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory path name to test use as the base/dir. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ext</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension to add. Must have period prefix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated string containing the resolved path. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3522"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_12a2428b6fadabb9d2bcdad552967f33c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprListenOnSocket</definition>
        <argsstring>(MprSocket *sp)</argsstring>
        <name>mprListenOnSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5958"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_module_1g62c9cd99f99d97a0ee2cecfe6bc4cd06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprModule *</type>
        <definition>MprModule* mprLoadModule</definition>
        <argsstring>(MprCtx ctx, cchar *name, cchar *entryPoint, void *data)</argsstring>
        <name>mprLoadModule</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>entryPoint</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Load a module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Load a module into the MPR. This will load a dynamic shared object (shared library) and call the modules entry point. If the module has already been loaded, it this call will do nothing and will just return the already defined module object. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the module to load. The module will be searched using the defined module search path (see <ref refid="group___mpr_module_1g166fe35db17d76f46a260c4ecf72c438" kindref="member">mprSetModuleSearchPath</ref>). The filename may or may not include a platform specific shared library extension such as .dll, .so or .dylib. By omitting the library extension, code can portably load shared libraries. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entryPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of function to invoke after loading the module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Arbitrary data pointer. This will be defined in MprModule.data and passed into the module initialization entry point. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A module object for this module created in the module entry point by calling <ref refid="group___mpr_module_1g63bd240ada3d4cb53ead7b4404fd5014" kindref="member">mprCreateModule</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3760"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_17f73646ba41280e4da88fd7ff89bd383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprModule *</type>
        <definition>MprModule* mprLoadSsl</definition>
        <argsstring>(MprCtx ctx, bool lazy)</argsstring>
        <name>mprLoadSsl</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lazy</declname>
        </param>
        <briefdescription>
<para>Load the SSL module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lazy</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to delay initialization until SSL is actually used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5948"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1gd193cb5549a1101dc17177f046144ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprLock</definition>
        <argsstring>(MprMutex *lock)</argsstring>
        <name>mprLock</name>
        <param>
          <type><ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
<para>Lock access. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call asserts a lock on the given <emphasis>lock</emphasis> mutex so that other threads calling mprLock will block until the current thread calls mprUnlock. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4339"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g86f03e0fb54d0f897fec0981d3671c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprLog</definition>
        <argsstring>(MprCtx ctx, int level, cchar *fmt,...)</argsstring>
        <name>mprLog</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Write a message to the diagnostic log file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Send a message to the MPR logging subsystem. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Logging level for this message. The level is 0-9 with zero being the most verbose. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>mprLog is highly useful as a debugging aid when integrating or when developing new modules. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2730"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g9ae5abc2e8c8b3359ca450e505564359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprLookAtLastCharInBuf</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprLookAtLastCharInBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Peek at the last character in the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Non-destructively return the last character from just prior to the end position in the buffer. The character is returned and the end position is not altered. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2094"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1gbe01ab970d735db5a92cea5f9456de5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprLookAtNextCharInBuf</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprLookAtNextCharInBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Peek at the next character in the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Non-destructively return the next character from the start position in the buffer. The character is returned and the start position is not altered. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2084"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1d38b7c081baaa2e8f872ab4ae2827ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_mpr_file_system" kindref="compound">MprFileSystem</ref> *</type>
        <definition>MprFileSystem* mprLookupFileSystem</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprLookupFileSystem</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3009"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_hash_1gf3613de4c34a09b684aebddadc0851cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cvoid *</type>
        <definition>cvoid* mprLookupHash</definition>
        <argsstring>(MprHashTable *table, cchar *key)</argsstring>
        <name>mprLookupHash</name>
        <param>
          <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Lookup a symbol in the hash table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Lookup a symbol key and return the value associated with that key. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol table returned via mprCreateSymbolTable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>String key of the symbole entry to delete. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value associated with the key when the entry was inserted via mprInsertSymbol. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2899"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_hash_1g69e2a6c5e3b8f36892d841d7019a657f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprHash *</type>
        <definition>MprHash* mprLookupHashEntry</definition>
        <argsstring>(MprHashTable *table, cchar *key)</argsstring>
        <name>mprLookupHashEntry</name>
        <param>
          <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Lookup a symbol in the hash table and return the hash entry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Lookup a symbol key and return the hash table descriptor associated with that key. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol table returned via mprCreateSymbolTable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>String key of the symbole entry to delete. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MprHash table structure for the entry </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2909"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g8b3d6afe4be8d416e28f64d05e8391eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprLookupItem</definition>
        <argsstring>(MprList *list, cvoid *item)</argsstring>
        <name>mprLookupItem</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Find an item and return its index. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Search for an item in the list and return its index. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to value stored in the list. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2459"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_192480f400bf2488c4901993123df7de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprLookupMimeType</definition>
        <argsstring>(MprCtx ctx, cchar *ext)</argsstring>
        <name>mprLookupMimeType</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
<para>Get the mime type for an extension. </para>        </briefdescription>
        <detaileddescription>
<para>This call will return the mime type from a limited internal set of mime types for the given path or extension. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ext</parametername>
</parameternamelist>
<parameterdescription>
<para>Path or extension to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mime type. This is a static string. Caller must not free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6801"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_module_1g3ffc2650baf7a3b10490450ea5defb48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprModule *</type>
        <definition>MprModule* mprLookupModule</definition>
        <argsstring>(MprCtx ctx, cchar *name)</argsstring>
        <name>mprLookupModule</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Lookup a module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Lookup a module by name and return the module object. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the module specified to <ref refid="group___mpr_module_1g63bd240ada3d4cb53ead7b4404fd5014" kindref="member">mprCreateModule</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A module object for this module created in the module entry point by calling <ref refid="group___mpr_module_1g63bd240ada3d4cb53ead7b4404fd5014" kindref="member">mprCreateModule</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3779"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_191f2ebdddc5bc79846bc9cff6fd445b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprMakeArgv</definition>
        <argsstring>(MprCtx ctx, cchar *prog, cchar *cmd, int *argc, char ***argv)</argsstring>
        <name>mprMakeArgv</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>prog</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6702"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g79b9d648fb26331b46aab5d8d6b0bce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprMakeCmdIO</definition>
        <argsstring>(MprCmd *cmd)</argsstring>
        <name>mprMakeCmdIO</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Make the I/O channels to send and receive data to and from the command. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6335"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g3b396266e71364659d4d0fe25c41c052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprMakeDir</definition>
        <argsstring>(MprCtx ctx, cchar *path, int perms, bool makeMissing)</argsstring>
        <name>mprMakeDir</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>perms</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>makeMissing</declname>
        </param>
        <briefdescription>
<para>Make a directory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Make a directory using the supplied path. Intermediate directories are created as required. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing the directory pathname to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>makeMissing</parametername>
</parameternamelist>
<parameterdescription>
<para>If true make all required intervening directory segments. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perms</parametername>
</parameternamelist>
<parameterdescription>
<para>Posix style file permissions mask. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3534"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_168231a5f06da720e36a6e3b0296a1415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
        <definition>MprTime mprMakeTime</definition>
        <argsstring>(MprCtx ctx, struct tm *timep)</argsstring>
        <name>mprMakeTime</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct tm *</type>
          <declname>timep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2335"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_166666a9c398850fc24e634e5d1943fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref></type>
        <definition>MprTime mprMakeUniversalTime</definition>
        <argsstring>(MprCtx ctx, struct tm *tm)</argsstring>
        <name>mprMakeUniversalTime</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>struct tm *</type>
          <declname>tm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2343"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_16d8444f927dac1b01ccb48450c2cb0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprMapAlloc</definition>
        <argsstring>(uint size, int mode)</argsstring>
        <name>mprMapAlloc</name>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Memory virtual memory into the applications address space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>of virtual memory to map. This size will be rounded up to the nearest page boundary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask set to MPR_MAP_READ | MPR_MAP_WRITE </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5248"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_12c5d14b85515f1d8155856285e50611f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprMapFree</definition>
        <argsstring>(void *ptr, uint size)</argsstring>
        <name>mprMapFree</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Free (unpin) a mapped section of virtual memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Virtual address to free. Should be page aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory to free in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5255"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_13149eded739e87f2c4134af74a67f3fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprMapMprPriorityToOs</definition>
        <argsstring>(int mprPriority)</argsstring>
        <name>mprMapMprPriorityToOs</name>
        <param>
          <type>int</type>
          <declname>mprPriority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4535"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_10d541e2d1a3fad316e64ec4d40f0bd5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprMapOsPriorityToMpr</definition>
        <argsstring>(int nativePriority)</argsstring>
        <name>mprMapOsPriorityToMpr</name>
        <param>
          <type>int</type>
          <declname>nativePriority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4536"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g6f84759fa62171fd5ff1dae1bff70e08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprMapSeparators</definition>
        <argsstring>(MprCtx ctx, char *path, int separator)</argsstring>
        <name>mprMapSeparators</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>separator</declname>
        </param>
        <briefdescription>
<para>Map the separators in a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Map the directory separators in a path to the specified separators. This is useful to change from backward to forward slashes when dealing with Windows paths. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to examine </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>separator</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator character to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated string containing the parent directory. Caller must free using <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3557"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_11775b8543a4e3b0559f0e279bb5e37a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprMemcmp</definition>
        <argsstring>(cvoid *b1, int b1Len, cvoid *b2, int b2Len)</argsstring>
        <name>mprMemcmp</name>
        <param>
          <type>cvoid *</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b1Len</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b2Len</declname>
        </param>
        <briefdescription>
<para>Compare two byte strings. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Safely compare two byte strings. This is a safe replacement for memcmp. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b1</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first byte string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b1Len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the first byte string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b2</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second byte string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b2Len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the second byte string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if the byte strings are identical. Otherwise returns -1 if the first string is less than the second. Returns 1 if the first is greater than the first. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1702"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1bcb752b124b706ebff6798cfeafc9f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprMemcpy</definition>
        <argsstring>(void *dest, int destMax, cvoid *src, int nbytes)</argsstring>
        <name>mprMemcpy</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destMax</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Safe copy for a block of data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Safely copy a block of data into an existing memory block. The call ensures the destination block is not overflowed and returns the size of the block actually copied. This is similar to memcpy, but is a safer alternative. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the destination block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destMax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of the destination block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Block to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the source block </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of characters in the allocated block. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1689"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g53e8e5ceb47594177a2db18c5acc5f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprMemoryError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprMemoryError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a memory error message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Send a memory error message to the MPR debug logging subsystem. The message will be passed to the log handler defined by <ref refid="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" kindref="member">mprSetLogHandler</ref>. It is up to the log handler to respond appropriately to the fatal message, the MPR takes no other action other than logging the message. Typically, a memory message will be logged and the application will be shutdown. The preferred method of operation is to define a memory depletion callback via <ref refid="group___mpr_1g4e84f505d5b6f74de677ffff29806906" kindref="member">mprCreate</ref>. This will be invoked whenever a memory allocation error occurs. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2718"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g4f97953317f303fe033be11fcbcec4e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprFile *</type>
        <definition>MprFile* mprOpen</definition>
        <argsstring>(MprCtx ctx, cchar *filename, int omode, int perms)</argsstring>
        <name>mprOpen</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>omode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>perms</declname>
        </param>
        <briefdescription>
<para>Open a file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Open a file and return a file object. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing the filename to open or create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>omode</parametername>
</parameternamelist>
<parameterdescription>
<para>Posix style file open mode mask. The open mode may contain the following mask values ored together: <itemizedlist>
<listitem><para>O_RDONLY Open read only </para></listitem>
<listitem><para>O_WRONLY Open write only </para></listitem>
<listitem><para>O_RDWR Open for read and write </para></listitem>
<listitem><para>O_CREAT Create or re-create </para></listitem>
<listitem><para>O_TRUNC Truncate </para></listitem>
<listitem><para>O_BINARY Open for binary data </para></listitem>
<listitem><para>O_TEXT Open for text data </para></listitem>
<listitem><para>O_EXCL Open with an exclusive lock </para></listitem>
<listitem><para>O_APPEND Open to append </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perms</parametername>
</parameternamelist>
<parameterdescription>
<para>Posix style file permissions mask. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an MprFile object to use in other file operations. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3171"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g52aa9a1c6e3f411df5f4cdd9e787ed16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprOpenClientSocket</definition>
        <argsstring>(MprSocket *sp, cchar *hostName, int port, int flags)</argsstring>
        <name>mprOpenClientSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>hostName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Open a client socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Open a client connection </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned via <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostName</parametername>
</parameternamelist>
<parameterdescription>
<para>Host or IP address to connect to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP/IP port number to connect to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket flags may use the following flags ored together: <itemizedlist>
<listitem><para>MPR_SOCKET_BLOCK - to use blocking I/O. The default is non-blocking. </para></listitem>
<listitem><para>MPR_SOCKET_BROADCAST - Use IPv4 broadcast </para></listitem>
<listitem><para>MPR_SOCKET_DATAGRAM - Use IPv4 datagrams </para></listitem>
<listitem><para>MPR_SOCKET_NOREUSE - Set NOREUSE flag on the socket </para></listitem>
<listitem><para>MPR_SOCKET_NODELAY - Set NODELAY on the socket </para></listitem>
<listitem><para>MPR_SOCKET_THREAD - Process callbacks on a separate thread. </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the connection is successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5696"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1ge3e24d3cf87c63f71440aed20b5486cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprOpenServerSocket</definition>
        <argsstring>(MprSocket *sp, cchar *ip, int port, int flags)</argsstring>
        <name>mprOpenServerSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Open a server socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Open a server socket and listen for client connections. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned via <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ip</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address to bind to. Set to 0.0.0.0 to bind to all possible addresses on a given port. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP/IP port number to connect to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket flags may use the following flags ored together: <itemizedlist>
<listitem><para>MPR_SOCKET_BLOCK - to use blocking I/O. The default is non-blocking. </para></listitem>
<listitem><para>MPR_SOCKET_BROADCAST - Use IPv4 broadcast </para></listitem>
<listitem><para>MPR_SOCKET_DATAGRAM - Use IPv4 datagrams </para></listitem>
<listitem><para>MPR_SOCKET_NOREUSE - Set NOREUSE flag on the socket </para></listitem>
<listitem><para>MPR_SOCKET_NODELAY - Set NODELAY on the socket </para></listitem>
<listitem><para>MPR_SOCKET_THREAD - Process callbacks on a separate thread. </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the connection is successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5721"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1978aa9d1ee3d0fe7b50e566f3d471ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprParseIp</definition>
        <argsstring>(MprCtx ctx, cchar *ipSpec, char **ip, int *port, int defaultPort)</argsstring>
        <name>mprParseIp</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>ipSpec</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultPort</declname>
        </param>
        <briefdescription>
<para>Parse an IP address. </para>        </briefdescription>
        <detaileddescription>
<para>This parses a string containing an IP:PORT specification and returns the IP address and port components. Handles ipv4 and ipv6 addresses. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ipSpec</parametername>
</parameternamelist>
<parameterdescription>
<para>An IP:PORT specification. The :PORT is optional. When an IP address contains an ipv6 port it should be written as aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh:iiii or [aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh:iiii]:port </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ip</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to receive a dynamically allocated IP string. Caller should free. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an integer to receive the port value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultPort</parametername>
</parameternamelist>
<parameterdescription>
<para>The default port number to use if the ipSpec does not contain a port </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5936"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1bc09b3b27eebfadc5dda18dd9956c4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64</type>
        <definition>int64 mprParseNumber</definition>
        <argsstring>(cchar *str, int radix, int *err)</argsstring>
        <name>mprParseNumber</name>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1662"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_127f9cba2e919ad9e821d280635072b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprParseTestArgs</definition>
        <argsstring>(MprTestService *ts, int argc, char **argv)</argsstring>
        <name>mprParseTestArgs</name>
        <param>
          <type>MprTestService *</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7019"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1328ef0d0c185ec8b8f418ca975626ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprParseTime</definition>
        <argsstring>(MprCtx ctx, MprTime *time, cchar *dateString, int timezone, struct tm *defaults)</argsstring>
        <name>mprParseTime</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_date_1gdd377cb2c4ec9c665b99de02f87f768b" kindref="member">MprTime</ref> *</type>
          <declname>time</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>dateString</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timezone</declname>
        </param>
        <param>
          <type>struct tm *</type>
          <declname>defaults</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2360"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1gbdd09f63c16165c91f22a479d29c6ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprPathExists</definition>
        <argsstring>(MprCtx ctx, cchar *path, int omode)</argsstring>
        <name>mprPathExists</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>omode</declname>
        </param>
        <briefdescription>
<para>Determine if a file exists for a path name and can be accessed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Test if a file can be accessed for a given mode </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to test </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>omode</parametername>
</parameternamelist>
<parameterdescription>
<para>Posix style file open mode mask. See <ref refid="group___mpr_file_1g4f97953317f303fe033be11fcbcec4e9" kindref="member">mprOpen</ref> for the various modes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the file exists and can be accessed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3568"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1gb50f74711c89a6eb57363aee8090b6bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPeekc</definition>
        <argsstring>(MprFile *file)</argsstring>
        <name>mprPeekc</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Non-destructively read a character from the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Read a single character from the file without advancing the read position. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If successful, return the character just read. Otherwise return a negative MPR error code. End of file is signified by reading 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3181"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g9aee91a4b53a03ea5dcf603b3c2437b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprPollCmdPipes</definition>
        <argsstring>(MprCmd *cmd, int timeout)</argsstring>
        <name>mprPollCmdPipes</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Poll for I/O on the command pipes. </para>        </briefdescription>
        <detaileddescription>
<para>This is only used on windows which can&apos;t adequately detect EOF on a named pipe. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds to wait for the command to complete and exit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6455"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_13413b2b0b86894f0ca40efa0f7156bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprPrintAllocReport</definition>
        <argsstring>(MprCtx ctx, cchar *msg)</argsstring>
        <name>mprPrintAllocReport</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Print a memory usage report to stdout. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>New memory context for the block. Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix message to the report </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5164"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1dfbd1fa43e7b737e566661e5d6ab6c36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPrintf</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprPrintf</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Formatted print. </para>        </briefdescription>
        <detaileddescription>
<para>This is a secure verion of printf that can handle null args. <simplesect kind="par"><title><bold>Description</bold>:</title><para>This is a secure replacement for printf. It can handle null arguments without crashes. minimal footprint. The MPR can be build without using any printf routines. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of bytes written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1601"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_113f99df19731bdfca83cd7ab64b6dd90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPrintfError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprPrintfError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print a formatted message to the standard error channel. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This is a secure replacement for fprintf(stderr. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of bytes written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1534"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_event_1gba03b8d6ddac9b5e4dce96bc470e5af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPumpEvents</definition>
        <argsstring>(MprCtx ctx, int delay, int flags)</argsstring>
        <name>mprPumpEvents</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delay</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Pump events. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Service all dispatchers and pump events. This routine may be called by any thread at any time. It will block for the given delay until an event is ready to be serviced. Flags may modify the calls behavior. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory context object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds to block until an event occurs. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to MPR_SERVICE_ONE_THING, this call will service at most one event. Otherwise set to zero. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An approximate count of the number of events executed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3924"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g3a8934d430c8345cd1e19b42173b1336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPutBlockToBuf</definition>
        <argsstring>(MprBuf *buf, cchar *ptr, int size)</argsstring>
        <name>mprPutBlockToBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Put a block to the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Append a block of data to the buffer at the end position and increment the end pointer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Block to append </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of block to append </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2126"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1gda34b4c0fbd1cd04fd636ab49e7dcb71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPutc</definition>
        <argsstring>(MprFile *file, int c)</argsstring>
        <name>mprPutc</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Write a character to the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Writes a single character to the file. Output is buffered and is flushed as required or when mprClose is called. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One if successful, otherwise returns a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3192"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g5ab66b5d96db8b33e3bb0c3bbb9c90e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPutCharToBuf</definition>
        <argsstring>(MprBuf *buf, int c)</argsstring>
        <name>mprPutCharToBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Put a character to the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Append a character to the buffer at the end position and increment the end pointer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to append </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2104"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g87bc8fae31c0dc3ffae2c7d4fb4aa49b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPutFmtToBuf</definition>
        <argsstring>(MprBuf *buf, cchar *fmt,...)</argsstring>
        <name>mprPutFmtToBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Put a formatted string to the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Format a string and Append to the buffer at the end position and increment the end pointer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable arguments for the format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2168"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g117b7d1d0a1b08b7395a2ad67a1a5ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPutIntToBuf</definition>
        <argsstring>(MprBuf *buf, int i)</argsstring>
        <name>mprPutIntToBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Put an integer to the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Append a integer to the buffer at the end position and increment the end pointer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer to append to the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2136"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g3a72ff88a352a7d2a5cd01e46fb1fdd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPutPadToBuf</definition>
        <argsstring>(MprBuf *buf, int c, int count)</argsstring>
        <name>mprPutPadToBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Put padding characters to the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Append padding characters to the buffer at the end position and increment the end pointer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to append </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of pad characters to put </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2115"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1ge172b6c82656af8d7a4f82bdff01977c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPuts</definition>
        <argsstring>(MprFile *file, cchar *str)</argsstring>
        <name>mprPuts</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Write a string to the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Writes a string to the file. Output is buffered and is flushed as required or when mprClose is called. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters written to the file. Returns a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3202"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g482c21dd3356edd53d804b14c5c9f253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPutStringToBuf</definition>
        <argsstring>(MprBuf *buf, cchar *str)</argsstring>
        <name>mprPutStringToBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Put a string to the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Append a null terminated string to the buffer at the end position and increment the end pointer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to append </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2146"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g41b37490b7840471fb6a03288f00df06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprPutSubStringToBuf</definition>
        <argsstring>(MprBuf *buf, cchar *str, int count)</argsstring>
        <name>mprPutSubStringToBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Put a substring to the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Append a null terminated substring to the buffer at the end position and increment the end pointer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to append </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Put at most count characters to the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2157"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1693667d14ff6b8da6940d66090d91a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprQueueDispatcher</definition>
        <argsstring>(MprDispatcher *prior, MprDispatcher *dispatcher)</argsstring>
        <name>mprQueueDispatcher</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>prior</declname>
        </param>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4028"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_event_1g0a9fa25c6efe71b9f18314f79335fe2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprQueueEvent</definition>
        <argsstring>(MprDispatcher *dispatcher, MprEvent *event)</argsstring>
        <name>mprQueueEvent</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type>MprEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Queue a new event for service. </para>        </briefdescription>
        <detaileddescription>
<para>This is typically used if mprInitEvent is used to statically initialize an event. It is not used often as mprCreateEvent will create and queue the event. <simplesect kind="par"><title><bold>Description</bold>:</title><para>Queue an event for service </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>Dispatcher object created via mprCreateDispatcher </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event object to queue </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3954"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_152f88939c5c03270beff007574b4aeb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprQueueIOEvent</definition>
        <argsstring>(MprWaitHandler *wp)</argsstring>
        <name>mprQueueIOEvent</name>
        <param>
          <type>MprWaitHandler *</type>
          <declname>wp</declname>
        </param>
        <briefdescription>
<para>Queue an IO event for dispatch on the wait handler dispatcher. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wp</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait handler created via <ref refid="group___mpr_wait_handler_1gcc222183cbeb335191a334899b5635bd" kindref="member">mprCreateWaitHandler</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5488"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1d27131c80daaee8b622b65a25f233d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprQueueTimerEvent</definition>
        <argsstring>(MprDispatcher *dispatcher, MprEvent *event)</argsstring>
        <name>mprQueueTimerEvent</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type>MprEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4027"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g54e411388517de37fddd5537b0339e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprRawLog</definition>
        <argsstring>(MprCtx ctx, int level, cchar *fmt,...)</argsstring>
        <name>mprRawLog</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Write a raw log message to the diagnostic log file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Send a raw message to the MPR logging subsystem. Raw messages do not have any application prefix attached to the message and do not append a newline to the message. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Logging level for this message. The level is 0-9 with zero being the most verbose. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>mprLog is highly useful as a debugging aid when integrating or when developing new modules. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2753"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1ge3052b9893259fb2f245d5e08310d9c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprRead</definition>
        <argsstring>(MprFile *file, void *buf, uint size)</argsstring>
        <name>mprRead</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read data from a file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Reads data from a file. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to contain the read data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <emphasis>buf</emphasis> in characters. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters read from the file. Returns a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3213"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g4a9036d982e301eb389e36b3b6a2bee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprReadCmdPipe</definition>
        <argsstring>(MprCmd *cmd, int channel, char *buf, int bufsize)</argsstring>
        <name>mprReadCmdPipe</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
<para>Make the I/O channels to send and receive data to and from the command. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number to read from. Should be either MPR_CMD_STDIN, MPR_CMD_STDOUT or MPR_CMD_STDERR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to read into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6346"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1ac0920c37c41d2c93805b29723c7420d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprReadRegistry</definition>
        <argsstring>(MprCtx ctx, char **buf, int max, cchar *key, cchar *val)</argsstring>
        <name>mprReadRegistry</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6731"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1gbff8106d1e1a3b5aa108542d3241f0b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprReadSocket</definition>
        <argsstring>(MprSocket *sp, void *buf, int size)</argsstring>
        <name>mprReadSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read from a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Read data from a socket. The read will return with whatever bytes are available. If none and the socket is in blocking mode, it will block untill there is some data available or the socket is disconnected. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer to hold the read data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of bytes actually read. Return a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5785"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g3fa0c34d79f33c76f6d6813f0774b8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprRealloc</definition>
        <argsstring>(MprCtx ctx, void *ptr, uint size)</argsstring>
        <name>mprRealloc</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reallocate a block. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Reallocates a block increasing its size. If the specified size is less than the current block size, the call will ignore the request and simply return the existing block. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory to reallocate. If NULL, call malloc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>New size of the required memory block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the allocated block. If memory is not available the memory exhaustion handler specified via mprCreate will be called to allow global recovery. </para></simplesect>
<simplesect kind="remark"><para>Do not mix calls to realloc and mprRealloc. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4889"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_12493bcee3c3b7f8351e16c731dd401f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprReallocStrcat</definition>
        <argsstring>(MprCtx ctx, int max, char *buf, cchar *src,...)</argsstring>
        <name>mprReallocStrcat</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Append strings to an existing string and reallocate as required. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Append a list of strings to an existing string. The list of strings is terminated by a null argument. The call returns the size of the allocated block. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of the result string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Existing string to reallocate. May be null. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable list of strings to append. The final string argument must be null. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated result string. Caller must free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5107"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g5644e84254f86b9f85374e90d081f0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprReapCmd</definition>
        <argsstring>(MprCmd *cmd, int timeout)</argsstring>
        <name>mprReapCmd</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Reap the command. </para>        </briefdescription>
        <detaileddescription>
<para>This waits for and collect the command exit status. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds to wait for the command to complete and exit. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6355"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_wait_handler_1gd95b0d5c47ddbc6f5219a4a2c0678ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprRecallWaitHandler</definition>
        <argsstring>(MprCtx ctx, int fd)</argsstring>
        <name>mprRecallWaitHandler</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Recall a wait handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Signal that a wait handler should be recalled at the earliest opportunity. This is useful when a protocol stack has buffered data that must be processed regardless of whether more I/O occurs. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor to recall </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5472"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g9e7451ec61507706a06c6c8149bebc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprRefillBuf</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprRefillBuf</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Refill the buffer with data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Refill the buffer by calling the refill procedure specified via <ref refid="group___mpr_buf_1g7f74f8c3d5af9db8c064b365f39cae2c" kindref="member">mprSetBufRefillProc</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2177"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e1b227faa3ca55496a185e426184b664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprRelayEvent</definition>
        <argsstring>(MprDispatcher *dispatcher, MprEventProc proc, void *data, MprEvent *event)</argsstring>
        <name>mprRelayEvent</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_event_1g6777c813e9ab55b0e29dfa9d0d19f32b" kindref="member">MprEventProc</ref></type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>MprEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3944"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1dae3b874e39e0d5e0155d5179f1d83cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprReleaseWorker</definition>
        <argsstring>(MprWorker *worker)</argsstring>
        <name>mprReleaseWorker</name>
        <param>
          <type>MprWorker *</type>
          <declname>worker</declname>
        </param>
        <briefdescription>
<para>Release a worker thread. </para>        </briefdescription>
        <detaileddescription>
<para>This releases a worker thread to be assignable to any real thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker thread reference </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6108"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e0e96f55e5ae3bd167e1b51f563e580d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprReleaseWorkerFromHandler</definition>
        <argsstring>(MprWaitHandler *wp, struct MprWorker *worker)</argsstring>
        <name>mprReleaseWorkerFromHandler</name>
        <param>
          <type>MprWaitHandler *</type>
          <declname>wp</declname>
        </param>
        <param>
          <type>struct MprWorker *</type>
          <declname>worker</declname>
        </param>
        <briefdescription>
<para>Release a worker thread. </para>        </briefdescription>
        <detaileddescription>
<para>This releases a worker thread to be assignable to any other wait handler. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wp</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait handler created via <ref refid="group___mpr_wait_handler_1gcc222183cbeb335191a334899b5635bd" kindref="member">mprCreateWaitHandler</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>worker</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker thread reference </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5504"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_event_1g9163bc8e37a8ff05c0c957cfcc86e02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprRemoveEvent</definition>
        <argsstring>(MprEvent *event)</argsstring>
        <name>mprRemoveEvent</name>
        <param>
          <type>MprEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Remove an event. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Remove a queued event. This is useful to remove continuous events from the event queue. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event object returned from <ref refid="group___mpr_event_1gf292a0f7982192dba8e5f7535d24377d" kindref="member">mprCreateEvent</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3978"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_hash_1g18a3c4ccbb662c68f32d6eff52f045bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprRemoveHash</definition>
        <argsstring>(MprHashTable *table, cchar *key)</argsstring>
        <name>mprRemoveHash</name>
        <param>
          <type><ref refid="struct_mpr_hash_table" kindref="compound">MprHashTable</ref> *</type>
          <declname>table</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Remove a symbol entry from the hash table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Removes a symbol entry from the symbol table. The entry is looked up via the supplied <emphasis>key</emphasis>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol table returned via mprCreateSymbolTable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>String key of the symbole entry to delete. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2919"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g2206c8d8a7049ad6f26ff74c215f32a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprRemoveItem</definition>
        <argsstring>(MprList *list, void *item)</argsstring>
        <name>mprRemoveItem</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Remove an item from the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Search for a specified item and then remove it from the list. Existing items are not freed, they are only removed from the list. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Item pointer to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2556"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1gc758d5af71b0bbf943bb6a1e263a494c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprRemoveItemAtPos</definition>
        <argsstring>(MprList *list, int index)</argsstring>
        <name>mprRemoveItemAtPos</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Remove an item from the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Removes the element specified by <emphasis>index</emphasis>, from the list. The list index is provided by mprInsertItem. </para></simplesect>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2565"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g85633d8034896cf4f056caa1857bf4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprRemoveLastItem</definition>
        <argsstring>(MprList *list)</argsstring>
        <name>mprRemoveLastItem</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Remove the last item from the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Remove the item at the highest index position. Existing items are not freed, they are only removed from the list. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2575"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_17c13afaabe375cbfb490eef63784ae2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprRemoveNotifier</definition>
        <argsstring>(MprWaitHandler *wp)</argsstring>
        <name>mprRemoveNotifier</name>
        <param>
          <type>MprWaitHandler *</type>
          <declname>wp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5525"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g16748fa2520761d373cebe4b39be3e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprRemoveRangeOfItems</definition>
        <argsstring>(MprList *list, int start, int end)</argsstring>
        <name>mprRemoveRangeOfItems</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Remove a range of items from the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Remove a range of items from the list. The range is specified from the <emphasis>start</emphasis> index up to and including the <emphasis>end</emphasis> index. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting item index to remove (inclusive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Ending item index to remove (inclusive) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2587"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a7e94f04dd2634590ebf35d099bc3c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprRemoveWaitHandler</definition>
        <argsstring>(MprWaitHandler *wp)</argsstring>
        <name>mprRemoveWaitHandler</name>
        <param>
          <type>MprWaitHandler *</type>
          <declname>wp</declname>
        </param>
        <briefdescription>
<para>Disconnect a wait handler from its underlying file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para>This is used to prevent further I/O wait events while still preserving the wait handler. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wp</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait handler object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5445"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_11f9db7dccdae9651f616f3e0740d6c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprReparent</definition>
        <argsstring>(MprCtx ctx, cvoid *ptr)</argsstring>
        <name>mprReparent</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Reparent a block. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Moves a block from one memory context to another within a single memory heap or arena. This call is fast and is not thread-safe. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>New memory context for the block. Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5151"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e79967995b916b70f64cae51867d0705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprReportTestResults</definition>
        <argsstring>(MprTestService *sp)</argsstring>
        <name>mprReportTestResults</name>
        <param>
          <type>MprTestService *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7021"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_event_1gf33d646f5cdb5e2e798b22e1b941e79b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprRescheduleEvent</definition>
        <argsstring>(MprEvent *event, int period)</argsstring>
        <name>mprRescheduleEvent</name>
        <param>
          <type>MprEvent *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>int</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Reschedule an event. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Reschedule a continuous event by modifying its period. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event object returned from <ref refid="group___mpr_event_1gf292a0f7982192dba8e5f7535d24377d" kindref="member">mprCreateEvent</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds used by continuous events between firing of the event. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4020"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g8a1a2ca6fb1f9e1cd45660ba1004e9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprResetAllocError</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprResetAllocError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Reset the memory allocation error flag. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Reset the alloc error flag triggered. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5183"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1ge6f9d70c3aab3eb2d9235a1c2a8f63a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprResetBufIfEmpty</definition>
        <argsstring>(MprBuf *buf)</argsstring>
        <name>mprResetBufIfEmpty</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Reset the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>If the buffer is empty, reset the buffer start and end pointers to the beginning of the buffer. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2185"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_13db47bdecb58c2c52197d625377cf71b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprResetCond</definition>
        <argsstring>(MprCond *cond)</argsstring>
        <name>mprResetCond</name>
        <param>
          <type><ref refid="struct_mpr_cond" kindref="compound">MprCond</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Reset a condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>This sets the condition variable to the unsignalled condition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition variable object created via <ref refid="group___mpr_synch_1g30046b7108565283ac168c6a90739a3f" kindref="member">mprCreateCond</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4137"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1eb846dc87e4083577ca675746525425a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprResetTestGroup</definition>
        <argsstring>(MprTestGroup *gp)</argsstring>
        <name>mprResetTestGroup</name>
        <param>
          <type>MprTestGroup *</type>
          <declname>gp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7068"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g413a694581512471730fcc80c2b5338a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprResolvePath</definition>
        <argsstring>(MprCtx ctx, cchar *path, cchar *other)</argsstring>
        <name>mprResolvePath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Resolve paths. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Resolve one path relative to another. If the other path is absolute, it is returned. Otherwise it is resolved relative to the directory containing the first path. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to test use as the base. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other path name to resolve against path. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated string containing the resolved path. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3580"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_event_1g6fa51ab06c56baaad50f1b4df7efc1d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprRestartContinuousEvent</definition>
        <argsstring>(MprEvent *event)</argsstring>
        <name>mprRestartContinuousEvent</name>
        <param>
          <type>MprEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Restart an event. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Restart a continuous event after it has been stopped via <ref refid="group___mpr_event_1g1f2c85a20242ec0c1e4830ccd25c7bb7" kindref="member">mprStopContinuousEvent</ref>. This call will add the event to the event queue and it will run after the configured event period has expired. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event object returned from <ref refid="group___mpr_event_1gf292a0f7982192dba8e5f7535d24377d" kindref="member">mprCreateEvent</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3996"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g7f80cf889cf937a284d78552298667b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprRunCmd</definition>
        <argsstring>(MprCmd *cmd, cchar *command, char **out, char **err, int flags)</argsstring>
        <name>mprRunCmd</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>command</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Run a command using a string command line. </para>        </briefdescription>
        <detaileddescription>
<para>This starts the command via <ref refid="group___mpr_cmd_1g63558463aa20f047dbd03cae5b6dab7b" kindref="member">mprStartCmd()</ref> and waits for its completion. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>Command line to run </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a string to receive the stdout from the command. Caller must free. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a string to receive the stderr from the command. Caller must free. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to modify execution. Valid flags are: MPR_CMD_NEW_SESSION Create a new session on Unix MPR_CMD_SHOW Show the commands window on Windows MPR_CMD_IN Connect to stdin </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6370"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1gfcea6f14d60761368a0644eb0c0de2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprRunCmdV</definition>
        <argsstring>(MprCmd *cmd, int argc, char **argv, char **out, char **err, int flags)</argsstring>
        <name>mprRunCmdV</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>err</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Run a command using an argv[] array of arguments. </para>        </briefdescription>
        <detaileddescription>
<para>This invokes <ref refid="group___mpr_cmd_1g63558463aa20f047dbd03cae5b6dab7b" kindref="member">mprStartCmd()</ref> and waits for its completion. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of arguments in argv </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Command arguments array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a string to receive the stdout from the command. Caller must free. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a string to receive the stderr from the command. Caller must free. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to modify execution. Valid flags are: MPR_CMD_NEW_SESSION Create a new session on Unix MPR_CMD_SHOW Show the commands window on Windows MPR_CMD_IN Connect to stdin </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6386"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_10a6621b197330deb30981f0d3d9e35dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprRunTests</definition>
        <argsstring>(MprTestService *sp)</argsstring>
        <name>mprRunTests</name>
        <param>
          <type>MprTestService *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7020"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g1fe179d2b59869522057af90f9d0e28e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSamePath</definition>
        <argsstring>(MprCtx ctx, cchar *path1, cchar *path2)</argsstring>
        <name>mprSamePath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path1</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path2</declname>
        </param>
        <briefdescription>
<para>Compare two paths if they are the same. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Compare two paths to see if they are equal. This normalizes the paths to absolute paths first before comparing. It does handle case sensitivity appropriately. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path1</parametername>
</parameternamelist>
<parameterdescription>
<para>First path to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second path to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the file exists and can be accessed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3592"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g00858c33bad20e8a653f74078fcc4a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSamePathCount</definition>
        <argsstring>(MprCtx ctx, cchar *path1, cchar *path2, int len)</argsstring>
        <name>mprSamePathCount</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path1</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Compare two paths if they are the same for a given length. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Compare two paths to see if they are equal. This normalizes the paths to absolute paths first before comparing. It does handle case sensitivity appropriately. The len parameter if non-zero, specifies how many characters of the paths to compare. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path1</parametername>
</parameternamelist>
<parameterdescription>
<para>First path to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second path to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>How many characters to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the file exists and can be accessed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3606"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_100fb3b7fd94fca2b0d1c08cc88b6ea81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprScheduleDispatcher</definition>
        <argsstring>(MprDispatcher *dispatcher, int period)</argsstring>
        <name>mprScheduleDispatcher</name>
        <param>
          <type>MprDispatcher *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type>int</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4026"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e1063b22696a3419f15470bfc8f4d68a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSearchForModule</definition>
        <argsstring>(MprCtx ctx, cchar *module, char **path)</argsstring>
        <name>mprSearchForModule</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Search for a module on the current module path. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the module to locate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a string that will receive the module path. Caller should free. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the module was found and path set to the location of the module. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3769"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g158aef4d8a9c0162832198421198f6e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprSearchPath</definition>
        <argsstring>(MprCtx ctx, cchar *path, int flags, cchar *search,...)</argsstring>
        <name>mprSearchPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>search</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Search for a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Search for a file using a given set of search directories </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path name to locate. Must be an existing file or directory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>search</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of directories to search. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated string containing the full path name of the located file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3634"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g6510f5de249f68beee6bbbe880549793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long mprSeek</definition>
        <argsstring>(MprFile *file, int seekType, long distance)</argsstring>
        <name>mprSeek</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seekType</declname>
        </param>
        <param>
          <type>long</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Seek the I/O pointer to a new location in the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Move the position in the file to/from which I/O will be performed in the file. Seeking prior to a read or write will cause the next I/O to occur at that location. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekType</parametername>
</parameternamelist>
<parameterdescription>
<para>Seek type may be one of the following three values: <itemizedlist>
<listitem><para>SEEK_SET Seek to a position relative to the start of the file </para></listitem>
<listitem><para>SEEK_CUR Seek relative to the current position </para></listitem>
<listitem><para>SEEK_END Seek relative to the end of the file </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>A positive or negative byte offset. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the new file position if successful otherwise a negative MPR error code is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3228"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_event_1gd10813ca9e8ff44df3a8116171d44246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprServiceEvents</definition>
        <argsstring>(MprCtx ctx, int delay, int flags)</argsstring>
        <name>mprServiceEvents</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delay</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Service events. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Service all dispatchers. This should only be called by one thread in the application. It must not be called by worker threads. This call will block for the given delay until an event is ready to be serviced. Flags may modify the calls behavior. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory context object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds to block until an event occurs. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to MPR_SERVICE_ONE_THING, this call will service at most one event. Otherwise set to zero. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An approximate count of the number of events serviced </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3911"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_19cbe65250966da9fa5aa61d026eab325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprServiceWinIO</definition>
        <argsstring>(MprWaitService *ws, int sockFd, int winMask)</argsstring>
        <name>mprServiceWinIO</name>
        <param>
          <type>MprWaitService *</type>
          <declname>ws</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sockFd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>winMask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5344"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1468c8ed0890483fb12b7630afcfc72d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetAllocCallback</definition>
        <argsstring>(MprCtx ctx, MprAllocFailure cback)</argsstring>
        <name>mprSetAllocCallback</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1ge0e48d1c33f626b414aa311fe400cbf0" kindref="member">MprAllocFailure</ref></type>
          <declname>cback</declname>
        </param>
        <briefdescription>
<para>Define a notifier callback. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>A notifier callback will be invoked for memory allocation errors for the given memory context. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cback</parametername>
</parameternamelist>
<parameterdescription>
<para>Notifier callback function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4798"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_15afb03370eb13fda6f023dc6d928b477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetAllocError</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprSetAllocError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Set an memory allocation error condition on a memory context. </para>        </briefdescription>
        <detaileddescription>
<para>This will set an allocation error condition on the given context and all its parents. This way, you can test the ultimate parent and detect if any memory allocation errors have occurred. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5191"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g1aba81525e6f3570db267f1a71c96d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetAllocLimits</definition>
        <argsstring>(MprCtx ctx, uint redline, uint maxMemory)</argsstring>
        <name>mprSetAllocLimits</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>redline</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>maxMemory</declname>
        </param>
        <briefdescription>
<para>Configure the application memory limits. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Configure memory limits to constrain memory usage by the application. The memory allocation subsystem will check these limits before granting memory allocation requrests. The redLine is a soft limit that if exceeded will invoke the memory allocation callback, but will still honor the request. The maxMemory limit is a hard limit. The MPR will prevent allocations which exceed this maximum. The memory callback handler is defined via the <ref refid="group___mpr_1g4e84f505d5b6f74de677ffff29806906" kindref="member">mprCreate</ref> call. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>redline</parametername>
</parameternamelist>
<parameterdescription>
<para>Soft memory limit. If exceeded, the request will be granted, but the memory handler will be invoked. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxMemory</parametername>
</parameternamelist>
<parameterdescription>
<para>Hard memory limit. If exceeded, the request will not be granted, and the memory handler will be invoked. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5227"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_17e77eb84ba0cafd84b73bcc10a95376e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSetAppName</definition>
        <argsstring>(MprCtx ctx, cchar *name, cchar *title, cchar *version)</argsstring>
        <name>mprSetAppName</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Set the application name, title and version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>One word, lower case name for the app. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>Pascal case multi-word descriptive name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>Version of the app. Major-Minor-Patch. E.g. 1.2.3. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6628"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1gea06aa1b68fc99c1038e07066136fee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetBufMax</definition>
        <argsstring>(MprBuf *buf, int maxSize)</argsstring>
        <name>mprSetBufMax</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSize</declname>
        </param>
        <briefdescription>
<para>Set the maximum buffer size. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Update the maximum buffer size set when the buffer was created </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>New maximum size the buffer can grow to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1912"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g7f74f8c3d5af9db8c064b365f39cae2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetBufRefillProc</definition>
        <argsstring>(MprBuf *buf, MprBufProc fn, void *arg)</argsstring>
        <name>mprSetBufRefillProc</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_buf_1ga0f2f003728ef5bb244fdabe2edc56f7" kindref="member">MprBufProc</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Set the buffer refill procedure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Define a buffer refill procedure. The MprBuf module will not invoke or manage this refill procedure. It is simply stored to allow upper layers to use and provide their own auto-refill mechanism. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to store. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback data argument. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2221"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1gb66fa4b1cc3c02e8808811b027d54898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSetBufSize</definition>
        <argsstring>(MprBuf *buf, int size, int maxSize)</argsstring>
        <name>mprSetBufSize</name>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSize</declname>
        </param>
        <briefdescription>
<para>Set the buffer size. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the current buffer content size and maximum size limit. Setting a current size will immediately grow the buffer to be this size. If the size is less than the current buffer size, the requested size will be ignored. ie. this call will not shrink the buffer. Setting a maxSize will define a maximum limit for how big the buffer contents can grow. Set either argument to -1 to be ignored. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size to immediately make the buffer. If size is less than the current buffer size, it will be ignored. Set to -1 to ignore this parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size the buffer contents can grow to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful and otherwise a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2201"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g8288e08dc7387c14e0536d214eba6049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetCmdCallback</definition>
        <argsstring>(MprCmd *cmd, MprCmdProc callback, void *data)</argsstring>
        <name>mprSetCmdCallback</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>MprCmdProc</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Define a callback to be invoked to receive response data from the command. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function of the signature MprCmdProc which will be invoked for receive notification for data from the commands stdout and stderr channels. MprCmdProc has the signature: int callback(MprCmd *cmd, int channel, void *data) {} </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>User defined data to be passed to the callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6397"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1ga0e753a2136410b79e480713aaf97b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetCmdDir</definition>
        <argsstring>(MprCmd *cmd, cchar *dir)</argsstring>
        <name>mprSetCmdDir</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Set the home directory for the command. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>String directory path name. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6405"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g731bf3b3b53862f42249d5a771107363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetCmdEnv</definition>
        <argsstring>(MprCmd *cmd, cchar **env)</argsstring>
        <name>mprSetCmdEnv</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>cchar **</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set the command environment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of environment strings. Each environment string should be of the form: &quot;KEY=VALUE&quot;. The array must be null terminated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6414"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1ga809ed728aec623d30af5c895d3bd5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetCurrentThreadPriority</definition>
        <argsstring>(MprCtx ctx, int priority)</argsstring>
        <name>mprSetCurrentThreadPriority</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Set the thread priroity for the current thread. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the current priority for the specified thread. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority to associate with the thread. Mpr thread priorities are are integer values between 0 and 100 inclusive with 50 being a normal priority. The MPR maps these priorities in a linear fashion onto native O/S priorites. Useful constants are: <itemizedlist>
<listitem><para>MPR_LOW_PRIORITY </para></listitem>
<listitem><para>MPR_NORMAL_PRIORITY </para></listitem>
<listitem><para>MPR_HIGH_PRIORITY </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4530"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a0451f6be62ac9d8c4c9d57df6a4acfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetDebugMode</definition>
        <argsstring>(MprCtx ctx, bool on)</argsstring>
        <name>mprSetDebugMode</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Turn on debug mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Debug mode disables timeouts and timers. This makes debugging much easier. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to enable debugging mode. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6712"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1gdeb570e7b9f2ee67eef01e574baaecb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetDestructor</definition>
        <argsstring>(void *ptr, MprDestructor destructor)</argsstring>
        <name>mprSetDestructor</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_mem_1g9531f8722a082ef0334d496738303663" kindref="member">MprDestructor</ref></type>
          <declname>destructor</declname>
        </param>
        <briefdescription>
<para>Update the destructor for a block of memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call updates the destructor for a block of memory allocated via mprAllocWithDestructor. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory to free. If NULL, take no action. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to invoke when <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref> is called. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5129"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_106d2f705db7b9a9dea2c0813d9e7f659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetDomainName</definition>
        <argsstring>(MprCtx ctx, cchar *s)</argsstring>
        <name>mprSetDomainName</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6658"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1c15efb351a63f9b02545bc8015e55265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetHostName</definition>
        <argsstring>(MprCtx ctx, cchar *s)</argsstring>
        <name>mprSetHostName</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6654"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_12f76399728bbf0954c355b0b9b1398c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetHwnd</definition>
        <argsstring>(MprCtx ctx, HWND h)</argsstring>
        <name>mprSetHwnd</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>HWND</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6756"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_14dfd0e11e49928b5cf8390cb70f47113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetInst</definition>
        <argsstring>(MprCtx ctx, long inst)</argsstring>
        <name>mprSetInst</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>long</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6758"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_11130c9b95e9806f751307a5a8a6f4c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetIpAddr</definition>
        <argsstring>(MprCtx ctx, cchar *s)</argsstring>
        <name>mprSetIpAddr</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6660"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g20dffb6f04ddb568db844dd1a83025f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprSetItem</definition>
        <argsstring>(MprList *list, int index, cvoid *item)</argsstring>
        <name>mprSetItem</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Set a list item. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Update the list item stored at the specified index </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Location to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to item to store </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the old item previously at that location index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2598"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g38bd862a8bc3076d86b0185d5bd81aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSetListLimits</definition>
        <argsstring>(MprList *list, int initialSize, int maxSize)</argsstring>
        <name>mprSetListLimits</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initialSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSize</declname>
        </param>
        <briefdescription>
<para>Define the list size limits. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Define the list initial size and maximum size it can grow to. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial size for the list. This call will allocate space for at least this number of items. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Set the maximum limit the list can grow to become. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2609"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1gb2ac022607500626163a8c3bb997c5c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetLogHandler</definition>
        <argsstring>(MprCtx ctx, MprLogHandler handler, void *handlerData)</argsstring>
        <name>mprSetLogHandler</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_log_1g8ca7894a05a04dc473d942ffc7cd1689" kindref="member">MprLogHandler</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>handlerData</declname>
        </param>
        <briefdescription>
<para>Set an MPR debug log handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Defines a callback handler for MPR debug and error log messages. When output is sent to the debug channel, the log handler will be invoked to accept the output message. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handlerData</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback handler data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2671"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g303a698e00e918f656e35e450f0ec7eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetLogLevel</definition>
        <argsstring>(MprCtx ctx, int level)</argsstring>
        <name>mprSetLogLevel</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set the current logging level. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call defines the maximum level of messages that will be logged. Calls to mprLog specify a message level. If the message level is greater than the defined logging level, the message is ignored. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>New logging level. Must be 0-9 inclusive. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the previous logging level. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6725"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1c6a350c9fbbcd569b8c265b9c65845cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSetMaxSocketClients</definition>
        <argsstring>(MprCtx ctx, int max)</argsstring>
        <name>mprSetMaxSocketClients</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Set the maximum number of client sockets that are permissable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>New maximum number of client sockets. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5588"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_worker_service_1gdb937865f624afea0be874b043260672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetMaxWorkers</definition>
        <argsstring>(MprCtx ctx, int count)</argsstring>
        <name>mprSetMaxWorkers</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Set the maximum count of worker threads Set the maximum number of worker pool threads for the MPR. </para>        </briefdescription>
        <detaileddescription>
<para>If this number if less than the current number of threads, excess threads will be gracefully pruned as they exit. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum limit of threads to define. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6036"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_worker_service_1g2c7a32b885496896b69c928c7f08ffe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetMinWorkers</definition>
        <argsstring>(MprCtx ctx, int count)</argsstring>
        <name>mprSetMinWorkers</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Set the minimum count of worker threads Set the count of threads the worker pool will have. </para>        </briefdescription>
        <detaileddescription>
<para>This will cause the worker pool to pre-create at least this many threads. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum count of threads to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6026"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_module_1g166fe35db17d76f46a260c4ecf72c438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetModuleSearchPath</definition>
        <argsstring>(MprCtx ctx, char *searchPath)</argsstring>
        <name>mprSetModuleSearchPath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>searchPath</declname>
        </param>
        <briefdescription>
<para>Set the module search path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the directory search path used by the MPR when loading dynamic modules. This path string must should be a colon separated (or semicolon on Windows) set of directories. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>searchPath</parametername>
</parameternamelist>
<parameterdescription>
<para>Colon separated set of directories </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The module search path. Caller must not free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3731"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1560e57f3a159309418e5d71640d0117d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetPathNewline</definition>
        <argsstring>(MprCtx ctx, cchar *path, cchar *newline)</argsstring>
        <name>mprSetPathNewline</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>newline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3011"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1352de1bd123add2da04be3a19fb06287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetPathSeparators</definition>
        <argsstring>(MprCtx ctx, cchar *path, cchar *separators)</argsstring>
        <name>mprSetPathSeparators</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>separators</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3010"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_13eceb4f18edfe7e17b207afab6add5cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetPriority</definition>
        <argsstring>(Mpr *mpr, int pri)</argsstring>
        <name>mprSetPriority</name>
        <param>
          <type>Mpr *</type>
          <declname>mpr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6751"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_195e6a39e134f685452a8594eab758967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSetRomFileSystem</definition>
        <argsstring>(MprCtx ctx, MprRomInode *inodeList)</argsstring>
        <name>mprSetRomFileSystem</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>MprRomInode *</type>
          <declname>inodeList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3003"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1aaabdb0d055523289f97a7d0be8bc12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetSecureProvider</definition>
        <argsstring>(MprCtx ctx, MprSocketProvider *provider)</argsstring>
        <name>mprSetSecureProvider</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>MprSocketProvider *</type>
          <declname>provider</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5574"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_19d9753907d9b9e8aceaee6ef167d6b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetServerName</definition>
        <argsstring>(MprCtx ctx, cchar *s)</argsstring>
        <name>mprSetServerName</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6656"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1ge2baa591f0466c9c64f0cf0147ada904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSetSocketBlockingMode</definition>
        <argsstring>(MprSocket *sp, bool on)</argsstring>
        <name>mprSetSocketBlockingMode</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Set the socket blocking mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the blocking mode for a socket. By default a socket is in non-blocking mode where read / write calls will not block. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to zero to put the socket into non-blocking mode. Set to non-zero to enable blocking mode. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The old blocking mode if successful or a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5841"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_127866b4c10d6e45ffd96604b221cf314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetSocketEof</definition>
        <argsstring>(MprSocket *sp, bool eof)</argsstring>
        <name>mprSetSocketEof</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>eof</declname>
        </param>
        <briefdescription>
<para>Set an EOF condition on the socket. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eof</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to set an EOF condition. Set to false to clear it. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5890"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1f759777d060bec9053464d3d074d908c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetSocketMessage</definition>
        <argsstring>(MprCtx ctx, int message)</argsstring>
        <name>mprSetSocketMessage</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6759"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g51594bafaa2003511990ffd804189a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSetSocketNoDelay</definition>
        <argsstring>(MprSocket *sp, bool on)</argsstring>
        <name>mprSetSocketNoDelay</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>Set the socket delay mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the socket delay behavior (nagle algorithm). By default a socket will partial packet writes a little to try to accumulate data and coalesce TCP/IP packages. Setting the delay mode to false may result in higher performance for interactive applications. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to non-zero to put the socket into no delay mode. Set to zero to enable the nagle algorithm. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The old delay mode if successful or a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5853"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e019342574ff5a155c770c43e2eb7d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprSetThreadData</definition>
        <argsstring>(MprThreadLocal *tls, void *value)</argsstring>
        <name>mprSetThreadData</name>
        <param>
          <type><ref refid="struct_mpr_thread_local" kindref="compound">MprThreadLocal</ref> *</type>
          <declname>tls</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4538"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1g60bd7071428f6043d834c48ee8914560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetThreadPriority</definition>
        <argsstring>(MprThread *thread, int priority)</argsstring>
        <name>mprSetThreadPriority</name>
        <param>
          <type>MprThread *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>int</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Set the thread priroity. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the current priority for the specified thread. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread object returned by <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority to associate with the thread. Mpr thread priorities are are integer values between 0 and 100 inclusive with 50 being a normal priority. The MPR maps these priorities in a linear fashion onto native O/S priorites. Useful constants are: <itemizedlist>
<listitem><para>MPR_LOW_PRIORITY </para></listitem>
<listitem><para>MPR_NORMAL_PRIORITY </para></listitem>
<listitem><para>MPR_HIGH_PRIORITY </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4498"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1b8de251868d67acc5080a470475dab34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetThreadStackSize</definition>
        <argsstring>(MprCtx ctx, int size)</argsstring>
        <name>mprSetThreadStackSize</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4537"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_163cac282e2c6207b24b089b9634e052d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetWaitServiceThread</definition>
        <argsstring>(MprWaitService *ws, MprThread *thread)</argsstring>
        <name>mprSetWaitServiceThread</name>
        <param>
          <type>MprWaitService *</type>
          <declname>ws</declname>
        </param>
        <param>
          <type>MprThread *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5348"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_126fde4aed2a6f7962bb12fc56c9a7cdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetWinMsgCallback</definition>
        <argsstring>(MprWaitService *ws, MprMsgCallback callback)</argsstring>
        <name>mprSetWinMsgCallback</name>
        <param>
          <type>MprWaitService *</type>
          <declname>ws</declname>
        </param>
        <param>
          <type>MprMsgCallback</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5343"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_133ba4772eb9d6ea4725f2c3bec6947f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetWorkerStackSize</definition>
        <argsstring>(MprCtx ctx, int size)</argsstring>
        <name>mprSetWorkerStackSize</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the default worker stack size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack size in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6016"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1gb014329886bcb9a8cb9b970afc30378b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSignalCond</definition>
        <argsstring>(MprCond *cond)</argsstring>
        <name>mprSignalCond</name>
        <param>
          <type><ref refid="struct_mpr_cond" kindref="compound">MprCond</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Signal a condition lock variable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Signal a condition variable and set it to the <emphasis>triggered</emphasis> status. Existing or future callers of <ref refid="group___mpr_synch_1g38ffd872f11254b3ca0a14e0388d98b5" kindref="member">mprWaitForCond</ref> will be awakened. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition variable object created via <ref refid="group___mpr_synch_1g30046b7108565283ac168c6a90739a3f" kindref="member">mprCreateCond</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4170"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_1gf86c5f0e03d6476670810091ba6a8d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSignalExit</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprSignalExit</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Signal the MPR to exit gracefully. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the must exit flag for the MPR. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6608"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1fc5c0f319089d68b7ddc4838aec22db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSignalTest2Complete</definition>
        <argsstring>(MprTestGroup *gp)</argsstring>
        <name>mprSignalTest2Complete</name>
        <param>
          <type>MprTestGroup *</type>
          <declname>gp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7071"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1bc396ef1ecce963fbcb17ee8d713d3c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSignalTestComplete</definition>
        <argsstring>(MprTestGroup *gp)</argsstring>
        <name>mprSignalTestComplete</name>
        <param>
          <type>MprTestGroup *</type>
          <declname>gp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7070"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1da6017471afc52a50c468f204952ff60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSleep</definition>
        <argsstring>(MprCtx ctx, int msec)</argsstring>
        <name>mprSleep</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>msec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6728"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_list_1g50c9e84e551dffe01dfe6a2697464f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSortList</definition>
        <argsstring>(MprList *list, MprListCompareProc compare)</argsstring>
        <name>mprSortList</name>
        <param>
          <type>MprList *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="group___mpr_list_1ga4064169552596b7923bc734da239f96" kindref="member">MprListCompareProc</ref></type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>Sort a list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Sort a list using the sort ordering dictated by the supplied compare function. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>List pointer returned from mprCreateList. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison function. If null, then a default string comparison is used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2618"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1gf2a84bc9cee343c8ebfc3bfa49751795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSpinLock</definition>
        <argsstring>(MprSpin *lock)</argsstring>
        <name>mprSpinLock</name>
        <param>
          <type><ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
<para>Lock a spinlock. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call asserts a lock on the given <emphasis>spinlock</emphasis> so that other threads calling mprSpinLock will block until the curren thread calls mprSpinUnlock. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4354"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1geb11c8a1f0c2c3f905967a932626121e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSpinUnlock</definition>
        <argsstring>(MprSpin *lock)</argsstring>
        <name>mprSpinUnlock</name>
        <param>
          <type><ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
<para>Unlock a spinlock. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call unlocks a spinlock previously locked via mprSpinLock or mprTrySpinLock. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4361"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_16cedd059c2f7ea313fbf7bc136ab2909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprSprintf</definition>
        <argsstring>(char *buf, int maxSize, cchar *fmt,...)</argsstring>
        <name>mprSprintf</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSize</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Format a string into a statically allocated buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call format a string using printf style formatting arguments. A trailing null will always be appended. The call returns the size of the allocated string excluding the null. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1624"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1efdcc565b19075801a65604d388715d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprStackCheck</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprStackCheck</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Monitory stack usage and check if the stack has grown since last monitoring. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the stack has grown </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5213"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1721856d6348713ef443f924013c42349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStart</definition>
        <argsstring>(Mpr *mpr, int startEventsThread)</argsstring>
        <name>mprStart</name>
        <param>
          <type>Mpr *</type>
          <declname>mpr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>startEventsThread</declname>
        </param>
        <briefdescription>
<para>Start the Mpr services. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mpr</parametername>
</parameternamelist>
<parameterdescription>
<para>Mpr object created via mprCreateMpr </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startEventsThread</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to start an events thread. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6593"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g63558463aa20f047dbd03cae5b6dab7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartCmd</definition>
        <argsstring>(MprCmd *cmd, int argc, char **argv, char **envp, int flags)</argsstring>
        <name>mprStartCmd</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>envp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Start the command. </para>        </briefdescription>
        <detaileddescription>
<para>This starts the command but does not wait for its completion. Once started, mprWriteCmdPipe can be used to write to the command and response data can be received via mprReadCmdPipe. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of arguments in argv </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Command arguments array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>envp</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of environment strings. Each environment string should be of the form: &quot;KEY=VALUE&quot;. The array must be null terminated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to modify execution. Valid flags are: MPR_CMD_NEW_SESSION Create a new session on Unix MPR_CMD_SHOW Show the commands window on Windows MPR_CMD_IN Connect to stdin </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6431"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1f5e4f016fb28021901c7cc4d7b26f390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartEventsThread</definition>
        <argsstring>(Mpr *mpr)</argsstring>
        <name>mprStartEventsThread</name>
        <param>
          <type>Mpr *</type>
          <declname>mpr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6736"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_14fe2ac111e6b8c1adead78e8d19274c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartModuleService</definition>
        <argsstring>(MprModuleService *os)</argsstring>
        <name>mprStartModuleService</name>
        <param>
          <type>MprModuleService *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3676"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1ee2abbdb83d3e6eba057bb4ee144cc57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartOsService</definition>
        <argsstring>(MprOsService *os)</argsstring>
        <name>mprStartOsService</name>
        <param>
          <type>MprOsService *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3663"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_19f64640f70bca90706332786b28c3ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartSocketService</definition>
        <argsstring>(MprSocketService *ss)</argsstring>
        <name>mprStartSocketService</name>
        <param>
          <type>MprSocketService *</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5572"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1g35c53df918c2f52e2e1f6961e35ee8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartThread</definition>
        <argsstring>(MprThread *thread)</argsstring>
        <name>mprStartThread</name>
        <param>
          <type>MprThread *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Start a thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Start a thread previously created via <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref>. The thread will begin at the entry function defined in <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread object returned from <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4465"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1c63844c05ea284291510e9383fa88276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartThreadService</definition>
        <argsstring>(MprThreadService *ts)</argsstring>
        <name>mprStartThreadService</name>
        <param>
          <type>MprThreadService *</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4395"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_160c40a5b3507a77e33af06aa5947f6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartWaitService</definition>
        <argsstring>(MprWaitService *ws)</argsstring>
        <name>mprStartWaitService</name>
        <param>
          <type>MprWaitService *</type>
          <declname>ws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5338"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1da0a427a03ab3475fb0faab39d3f5459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartWorker</definition>
        <argsstring>(MprCtx ctx, MprWorkerProc proc, void *data)</argsstring>
        <name>mprStartWorker</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="mpr_8h_11c2789aea11b60b13644c3b4e7c54f99" kindref="member">MprWorkerProc</ref></type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Start a worker thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Start a worker thread executing the given worker procedure callback. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker procedure callback </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data parameter to the callback </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6093"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_12db6fd43521835702c43a62ee9ae1928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartWorkerService</definition>
        <argsstring>(MprWorkerService *ws)</argsstring>
        <name>mprStartWorkerService</name>
        <param>
          <type>MprWorkerService *</type>
          <declname>ws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5999"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g0c03cfaa89967bee56ef3eebb36b4713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStaticAssert</definition>
        <argsstring>(cchar *loc, cchar *msg)</argsstring>
        <name>mprStaticAssert</name>
        <param>
          <type>cchar *</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output an assertion failed message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This will emit an assertion failed message to the standard error output. It will bypass the logging system. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>Source code location string. Use MPR_LOC to define a file name and line number string suitable for this parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Simple string message to output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2764"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g4d8c3a25cdbb3771266ee265a46156dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStaticError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprStaticError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Write a message to the diagnostic log file without allocating any memory. </para>        </briefdescription>
        <detaileddescription>
<para>Useful for log messages from within the memory allocator. <simplesect kind="par"><title><bold>Description</bold>:</title><para>Send a message to the MPR logging subsystem. This will not allocate any memory while formatting the message. The formatted message string will be truncated in size to <ref refid="mpr_8h_1ab279a1400259da3572a2fd2a8681623" kindref="member">MPR_MAX_STRING</ref> bytes. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2776"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_14d6edb96beee6c995edc3197556536f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStaticPrintf</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprStaticPrintf</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print a message to the applications standard output without allocating memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This is a secure replacement for printf that will not allocate memory. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. This is used to locate the standard output channel and not to allocate memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of bytes written </para></simplesect>
<simplesect kind="remark"><para>The maximum output is MPR_MAX_STRING - 1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1578"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1ba7d5ea137f728040a397b62bb308455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStaticPrintfError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprStaticPrintfError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print a message to the standard error channel without allocating memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This is a secure replacement for fprintf(stderr that will not allocate memory. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. This is used to locate the standard output channel and not to allocate memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of bytes written </para></simplesect>
<simplesect kind="remark"><para>The maximum output is MPR_MAX_STRING - 1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1590"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_10174635f1fe63aac33da9554b476c3f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStealBlock</definition>
        <argsstring>(MprCtx ctx, cvoid *ptr)</argsstring>
        <name>mprStealBlock</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Reassign a block from its current parent context to a new context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. This will be the new owning context of the ptr. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a block to reassign. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5142"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_buf_1g5800cbdbb6bac03b54fba8af893603b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStealBuf</definition>
        <argsstring>(MprCtx ctx, MprBuf *buf)</argsstring>
        <name>mprStealBuf</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>MprBuf *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Steal the buffer memory from a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Steal ownership of the buffer memory from the buffer structure. All MPR memory is owned by a memory context and the contents of the buffer is owned by the MprBuf object. Stealing the buffer content memory is useful to preserve the buffer contents after the buffer is freed </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory context to won the memory for the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer created via mprCreateBuf </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the buffer contents. Use mprGetBufLength before calling mprStealBuf to determine the resulting size of the contents. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1925"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1f3f765dac52a91c673b6ff9f5d24da68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStop</definition>
        <argsstring>(Mpr *mpr)</argsstring>
        <name>mprStop</name>
        <param>
          <type>Mpr *</type>
          <declname>mpr</declname>
        </param>
        <briefdescription>
<para>Stop the MPR and shutdown all services. </para>        </briefdescription>
        <detaileddescription>
<para>After this call, the MPR cannot be used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mpr</parametername>
</parameternamelist>
<parameterdescription>
<para>Mpr object created via mprCreateMpr </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6599"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g73dbe983174ac25e4af6a1fea4d8f966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStopCmd</definition>
        <argsstring>(MprCmd *cmd)</argsstring>
        <name>mprStopCmd</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Stop the command. </para>        </briefdescription>
        <detaileddescription>
<para>The command is immediately killed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6438"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_event_1g1f2c85a20242ec0c1e4830ccd25c7bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStopContinuousEvent</definition>
        <argsstring>(MprEvent *event)</argsstring>
        <name>mprStopContinuousEvent</name>
        <param>
          <type>MprEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Stop an event. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Stop a continuous event and remove from the queue. The event object is not freed, but simply removed from the event queue. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event object returned from <ref refid="group___mpr_event_1gf292a0f7982192dba8e5f7535d24377d" kindref="member">mprCreateEvent</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3987"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1d464a672709feff68271f72b57b5d77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStopModuleService</definition>
        <argsstring>(MprModuleService *os)</argsstring>
        <name>mprStopModuleService</name>
        <param>
          <type>MprModuleService *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3677"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1b030e3c0a704a861de0624cf0bab1611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStopOsService</definition>
        <argsstring>(MprOsService *os)</argsstring>
        <name>mprStopOsService</name>
        <param>
          <type>MprOsService *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3664"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_178d6a5fa0c8e7a28b9d315af382fd740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStopSocketService</definition>
        <argsstring>(MprSocketService *ss)</argsstring>
        <name>mprStopSocketService</name>
        <param>
          <type>MprSocketService *</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5573"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_126d9e1651ac38747d0ab62ec3fe484af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStopThreadService</definition>
        <argsstring>(MprThreadService *ts, int timeout)</argsstring>
        <name>mprStopThreadService</name>
        <param>
          <type>MprThreadService *</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4396"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a604d50d1b14b09c6ce5455c9617614c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStopWaitService</definition>
        <argsstring>(MprWaitService *ws)</argsstring>
        <name>mprStopWaitService</name>
        <param>
          <type>MprWaitService *</type>
          <declname>ws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5339"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1fe7b540df4fbf6c645efa1b414dfcaac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprStopWorkerService</definition>
        <argsstring>(MprWorkerService *ws, int timeout)</argsstring>
        <name>mprStopWorkerService</name>
        <param>
          <type>MprWorkerService *</type>
          <declname>ws</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6000"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1d3156f9075164b2fee835a66f62eb4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrcat</definition>
        <argsstring>(MprCtx ctx, int max, cchar *src,...)</argsstring>
        <name>mprStrcat</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Catenate strings. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Safe replacement for strcat. Catenates a string onto an existing string. This call accepts a variable list of strings to append. The list of strings is terminated by a null argument. The call returns the length of the resulting string. This call is similar to strcat, but it will enforce a maximum size for the resulting string and will ensure it is terminated with a null. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of the new block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable list of strings to append. The final string argument must be null. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an allocated string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1716"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1184b8ba1d8e9fbc222e5edfcabc74824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrcatV</definition>
        <argsstring>(MprCtx ctx, int max, cchar *src, va_list args)</argsstring>
        <name>mprStrcatV</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1718"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1937b35fb3e4a7cdac84e1c6985db6cc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStrcmp</definition>
        <argsstring>(cchar *str1, cchar *str2)</argsstring>
        <name>mprStrcmp</name>
        <param>
          <type>cchar *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
<para>Compare strings. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Compare two strings. This is a safe replacement for strcmp. It can handle null args. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>First string to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second string to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if the strings are identical. Return -1 if the first string is less than the second. Return 1 if the first string is greater than the second. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1769"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1e15c6b644b07a706125e13656d3be03b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStrcmpAnyCase</definition>
        <argsstring>(cchar *str1, cchar *str2)</argsstring>
        <name>mprStrcmpAnyCase</name>
        <param>
          <type>cchar *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
<para>Compare strings ignoring case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Compare two strings ignoring case differences. This call operates similarly to strcmp. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>First string to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second string to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if the strings are equivalent, &lt; 0 if s1 sorts lower than s2 in the collating sequence or &gt; 0 if it sorts higher. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1780"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_112ece4a3c6060f5c09051b17212f14f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStrcmpAnyCaseCount</definition>
        <argsstring>(cchar *str1, cchar *str2, int len)</argsstring>
        <name>mprStrcmpAnyCaseCount</name>
        <param>
          <type>cchar *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Compare strings ignoring case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Compare two strings ignoring case differences for a given string length. This call operates similarly to strncmp. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>First string to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second string to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of characters to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if the strings are equivalent, &lt; 0 if s1 sorts lower than s2 in the collating sequence or &gt; 0 if it sorts higher. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1793"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1239b2debb47dd4553372d0ad89294521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStrcpy</definition>
        <argsstring>(char *dest, int destMax, cchar *src)</argsstring>
        <name>mprStrcpy</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destMax</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy a string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Safe replacement for strcpy. Copy a string and ensure the target string is not overflowed. The call returns the length of the resultant string or an error code if it will not fit into the target string. This is similar to strcpy, but it will enforce a maximum size for the copied string and will ensure it is terminated with a null. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pointer that will hold the address of the allocated block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destMax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of the target string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>String to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of characters in the target string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1732"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1af8ce98847bb93316ca5f0c0ca9fcb67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStrcpyCount</definition>
        <argsstring>(char *dest, int destMax, cchar *src, int count)</argsstring>
        <name>mprStrcpyCount</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destMax</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Copy characters from a string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Safe replacement for strncpy. Copy bytes from a string and ensure the target string is not overflowed. The call returns the length of the resultant string or an error code if it will not fit into the target string. This is similar to strcpy, but it will enforce a maximum size for the copied string and will ensure it is terminated with a null. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pointer that will hold the address of the allocated block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destMax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of the target string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>String to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum count of characters to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of characters in the target string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1747"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1ga08b7e0447aa2f5a380d9d3daa1f5f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrdup</definition>
        <argsstring>(MprCtx ctx, cchar *str)</argsstring>
        <name>mprStrdup</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Safe replacement for strdup. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title><bold>Description</bold>:</title><para><ref refid="group___mpr_mem_1ga08b7e0447aa2f5a380d9d3daa1f5f86" kindref="member">mprStrdup()</ref> should be used as a replacement for <bold>strdup</bold> wherever possible. It allows the strdup to be copied to be NULL, in which case it will allocate an empty string. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to string to duplicate. If <bold>str</bold> is NULL, allocate a new string containing only a trailing NULL character. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an allocated string including trailing null. </para></simplesect>
<simplesect kind="remark"><para>Memory allocated via <ref refid="group___mpr_mem_1ga08b7e0447aa2f5a380d9d3daa1f5f86" kindref="member">mprStrdup()</ref> must be freed via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4989"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1d672f4f5cd20ea78325864b263460133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStrlen</definition>
        <argsstring>(cchar *src, int max)</argsstring>
        <name>mprStrlen</name>
        <param>
          <type>cchar *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Return the length of a string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Safe replacement for strlen. This call returns the length of a string and tests if the length is less than a given maximum. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>String to measure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum length for the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the length of the string or MPR_ERR_WONT_FIT if the length is greater than <emphasis>max</emphasis>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1804"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1b9c7e8c93945fa0bc4aa3608ea2b9802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrLower</definition>
        <argsstring>(char *str)</argsstring>
        <name>mprStrLower</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Convert a string to lower case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Convert a string to its lower case equivalent. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the converted string. Will always equal str. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1813"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_mem_1g857ed05b61f4112d319fe75545d0a081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrndup</definition>
        <argsstring>(MprCtx ctx, cchar *str, uint size)</argsstring>
        <name>mprStrndup</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Duplicate a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title><bold>Description</bold>:</title><para>Copy a string into a newly allocated block. The new block will be sized to the maximum of the length of the existing string (plus a null) and the requested size. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the block to duplicate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested minimum size of the allocated block holding the duplicated string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an allocated block. Caller must free via <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4976"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_13707c7892d469df5810a249fa1a51a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrnstr</definition>
        <argsstring>(cchar *str, cchar *pattern, int len)</argsstring>
        <name>mprStrnstr</name>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Find a substring. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Locate the first occurrence of pattern in a string, but do not search more than the given length. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the string to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>String pattern to search for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of characters in the pattern to actually search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of characters in the target string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1758"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1607579dc34bc84ebea2b67d7f9d55641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrTok</definition>
        <argsstring>(char *str, cchar *delim, char **last)</argsstring>
        <name>mprStrTok</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>delim</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Tokenize a string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Split a string into tokens. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to tokenize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>String of characters to use as token separators. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Last token pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the next token. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1844"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1cab0129f8454deb9debf1513ddf15738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrTrim</definition>
        <argsstring>(char *str, cchar *set)</argsstring>
        <name>mprStrTrim</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Trim a string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Trim leading and trailing characters off a string. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to trim. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>String of characters to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the trimmed string. May not equal <emphasis>str</emphasis>. If <emphasis>str</emphasis> was dynamically allocated, do not call mprFree on the returned trimmed pointer. You must use <emphasis>str</emphasis> when calling mprFree. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1833"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1f746a3a94464da0f6991d88d3d76ae75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprStrUpper</definition>
        <argsstring>(char *str)</argsstring>
        <name>mprStrUpper</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Convert a string to upper case. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Convert a string to its upper case equivalent. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to the converted string. Will always equal str. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1822"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_1gedafb2bdaadd9bccf0938e8e6e31f539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprTerminate</definition>
        <argsstring>(MprCtx ctx, bool graceful)</argsstring>
        <name>mprTerminate</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>graceful</declname>
        </param>
        <briefdescription>
<para>Terminate the MPR. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Terminates the MPR and disposes of all allocated resources. The mprTerminate function will recursively free all memory allocated by the MPR. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context object returned by <ref refid="group___mpr_mem_1g8453c59fd682fda78bbd18eb9f572dec" kindref="member">mprAlloc</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graceful</parametername>
</parameternamelist>
<parameterdescription>
<para>Shutdown gracefully waiting for all events to drain. Otherise exit immediately without waiting for any threads or events to complete. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6748"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1bb22e13c8bbf88d6aedc5023b1fc5227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprTermOsWait</definition>
        <argsstring>(MprWaitService *ws)</argsstring>
        <name>mprTermOsWait</name>
        <param>
          <type>MprWaitService *</type>
          <declname>ws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5337"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_190d1e66ecbeecbb4873a82b9997074f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprToAsc</definition>
        <argsstring>(MprCtx ctx, cuni *u)</argsstring>
        <name>mprToAsc</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cuni *</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6825"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a1b7a086fefe07cf78aa824fe1bbb978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uni *</type>
        <definition>uni* mprToUni</definition>
        <argsstring>(MprCtx ctx, cchar *a)</argsstring>
        <name>mprToUni</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6826"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1gb8e93fa1d44e924d6bb6845c86d5607d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprTrimPathExtension</definition>
        <argsstring>(MprCtx ctx, cchar *path)</argsstring>
        <name>mprTrimPathExtension</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Trim an extension from a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Trim a file extension (&quot;.ext&quot;) from a path name. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>First path to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated string with the trimmed path. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3655"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_path_1g5d652358240a8e968114cfa718b420ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprTruncatePath</definition>
        <argsstring>(MprCtx ctx, cchar *path, int size)</argsstring>
        <name>mprTruncatePath</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Truncate a path. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Truncate a file to a given size </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>First path to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>New maximum size for the file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3645"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1g2b3b8e824b92499192ea48512e31c26d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprTryLock</definition>
        <argsstring>(MprMutex *lock)</argsstring>
        <name>mprTryLock</name>
        <param>
          <type><ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
<para>Attempt to lock access. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call attempts to assert a lock on the given <emphasis>lock</emphasis> mutex so that other threads calling mprLock or mprTryLock will block until the current thread calls mprUnlock. </para></simplesect>
<simplesect kind="return"><para>Returns zero if the successful in locking the mutex. Returns a negative MPR error code if unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4259"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1gc257b932fcc7140852e6830640d2301b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprTrySpinLock</definition>
        <argsstring>(MprSpin *lock)</argsstring>
        <name>mprTrySpinLock</name>
        <param>
          <type><ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
<para>Attempt to lock access on a spin lock. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call attempts to assert a lock on the given <emphasis>spin</emphasis> lock so that other threads calling mprSpinLock or mprTrySpinLock will block until the current thread calls mprSpinUnlock. </para></simplesect>
<simplesect kind="return"><para>Returns zero if the successful in locking the spinlock. Returns a negative MPR error code if unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4289"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_module_1g7850e66f8a93866bbf3c149a65f33172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprUnloadModule</definition>
        <argsstring>(MprModule *mp)</argsstring>
        <name>mprUnloadModule</name>
        <param>
          <type>MprModule *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
<para>Unload a module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Unload a module from the MPR. This will unload a dynamic shared object (shared library). This routine is not fully supported by the MPR and is often fraught with issues. A module must usually be completely inactive with no allocated memory when it is unloaded. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mp</parametername>
</parameternamelist>
<parameterdescription>
<para>Module object returned via <ref refid="group___mpr_module_1g3ffc2650baf7a3b10490450ea5defb48" kindref="member">mprLookupModule</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3789"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1g40a516fe58b4b2998852cd0c853027ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprUnlock</definition>
        <argsstring>(MprMutex *lock)</argsstring>
        <name>mprUnlock</name>
        <param>
          <type><ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref> *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
<para>Unlock a mutex. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call unlocks a mutex previously locked via mprLock or mprTryLock. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4346"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_164b669a1f52e62b8010fe14094db885b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprUpdateWaitHandler</definition>
        <argsstring>(MprWaitHandler *wp, bool wakeup)</argsstring>
        <name>mprUpdateWaitHandler</name>
        <param>
          <type>MprWaitHandler *</type>
          <declname>wp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wakeup</declname>
        </param>
        <briefdescription>
<para>Apply wait handler updates. </para>        </briefdescription>
        <detaileddescription>
<para>While a wait handler is in use, wait event updates are buffered. This routine applies such buffered updates. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wp</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait handler created via <ref refid="group___mpr_wait_handler_1gcc222183cbeb335191a334899b5635bd" kindref="member">mprCreateWaitHandler</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wakeup</parametername>
</parameternamelist>
<parameterdescription>
<para>Wake up the service events thread. Typically it is safest to wake up the service events thread if the wait handler event masks have been modified. However, there are some cases where it can be useful to suppress this behavior. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5482"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_142505a60e5679606bc22d8c1aa1dc4ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprUriDecode</definition>
        <argsstring>(MprCtx ctx, cchar *uri)</argsstring>
        <name>mprUriDecode</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
<para>Decode a URI string by de-scaping URI characters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Decode a string with www-encoded characters that have meaning for URIs. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>URI to decode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the buf argument. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6820"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1ff8a0ff793cc8e580ace3501d6949173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprUriEncode</definition>
        <argsstring>(MprCtx ctx, cchar *uri, int map)</argsstring>
        <name>mprUriEncode</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>int</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Encode a string by escaping URI characters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Encode a string escaping all characters that have meaning for URIs. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uri</parametername>
</parameternamelist>
<parameterdescription>
<para>URI to encode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to encode characters. Select from MPR_ENCODE_URI or MPR_ENCODE_URI_COMPONENT. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An allocated string containing the encoded URI. Caller must free using <ref refid="group___mpr_mem_1g6d2fdfc4a34dc8ef4e7172fbcf977045" kindref="member">mprFree</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6811"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_log_1g0b7873bee991ee0160420868906eeb8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprUserError</definition>
        <argsstring>(MprCtx ctx, cchar *fmt,...)</argsstring>
        <name>mprUserError</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Display an error message to the user. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Display an error message to the user and then send it to the MPR debug logging subsystem. The message will be passed to the log handler defined by mprSetLogHandler. It is up to the log handler to respond appropriately and display the message to the user. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string. Variable number of arguments to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable number of arguments for printf data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="2789"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1d5c8927e1a2c78d302726c41cd6da6cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprValidateBlock</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprValidateBlock</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Validate a memory block and issue asserts if the memory block or any children blocks do not validate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>New memory context for the block. Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5157"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1bd8e3ce747235f08bf1fca492a653f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprVasprintf</definition>
        <argsstring>(MprCtx ctx, int maxSize, cchar *fmt, va_list arg)</argsstring>
        <name>mprVasprintf</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSize</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Allocate a buffer of sufficient length to hold the formatted string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call will dynamically allocate a buffer up to the specified maximum size and will format the supplied arguments into the buffer. A trailing null will always be appended. The call returns the size of the allocated string excluding the null. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size to allocate for the buffer including the trailing null. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Varargs argument obtained from va_start. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of characters in the string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5094"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_15bba3c0b15d48ec6cc90966f14ae663a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mprVsprintf</definition>
        <argsstring>(char *buf, int maxSize, cchar *fmt, va_list args)</argsstring>
        <name>mprVsprintf</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSize</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Format a string into a statically allocated buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>This call format a string using printf style formatting arguments. A trailing null will always be appended. The call returns the size of the allocated string excluding the null. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Printf style format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Varargs argument obtained from va_start. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the buffer; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1637"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1g86f4815eb5e4cdd4695ecfd17f8eb360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWaitForCmd</definition>
        <argsstring>(MprCmd *cmd, int timeout)</argsstring>
        <name>mprWaitForCmd</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for the command to complete. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds to wait for the command to complete and exit. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if successful. Otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6447"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1g38ffd872f11254b3ca0a14e0388d98b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWaitForCond</definition>
        <argsstring>(MprCond *cond, int timeout)</argsstring>
        <name>mprWaitForCond</name>
        <param>
          <type><ref refid="struct_mpr_cond" kindref="compound">MprCond</ref> *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for a condition lock variable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Wait for a condition lock variable to be signaled. If the condition is signaled before the timeout expires this call will reset the condition variable and return. This way, it automatically resets the variable for future waiters. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition variable object created via <ref refid="group___mpr_synch_1g30046b7108565283ac168c6a90739a3f" kindref="member">mprCreateCond</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds to wait for the condition variable to be signaled. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the event was signalled. Returns &lt; 0 for a timeout. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4149"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_synch_1g4ce11896445416406d85d4d7a18bac7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWaitForCondWithService</definition>
        <argsstring>(MprCond *cond, int timeout)</argsstring>
        <name>mprWaitForCondWithService</name>
        <param>
          <type><ref refid="struct_mpr_cond" kindref="compound">MprCond</ref> *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for a condition lock variable and pump events while waiting. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Wait for a condition lock variable to be signaled. If the condition is signaled before the timeout expires this call will reset the condition variable and return. This way, it automatically resets the variable for future waiters. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition variable object created via <ref refid="group___mpr_synch_1g30046b7108565283ac168c6a90739a3f" kindref="member">mprCreateCond</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds to wait for the condition variable to be signaled. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the event was signalled. Returns &lt; 0 for a timeout. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4161"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1aabd29f554c4fa6b528f5c9587a7adb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWaitForIO</definition>
        <argsstring>(MprWaitService *ws, int timeout)</argsstring>
        <name>mprWaitForIO</name>
        <param>
          <type>MprWaitService *</type>
          <declname>ws</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for I/O. </para>        </briefdescription>
        <detaileddescription>
<para>This call waits for any I/O events on wait handlers until the given timeout expires. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ws</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait service object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds to wait for an event. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of events received. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5371"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1f1b9807f41341d92c190f8ae71390e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWaitForSingleIO</definition>
        <argsstring>(MprCtx ctx, int fd, int mask, int timeout)</argsstring>
        <name>mprWaitForSingleIO</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for I/O on a file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para>No processing of the I/O event is done. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory allocation context created by MprAlloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor to examine </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of events of interest (MPR_READABLE | MPR_WRITABLE) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds to wait for an event. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of events received. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5363"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1d367b029b758a79b64078ef47ead2f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprWaitForTest2ToComplete</definition>
        <argsstring>(MprTestGroup *gp, int timeout)</argsstring>
        <name>mprWaitForTest2ToComplete</name>
        <param>
          <type>MprTestGroup *</type>
          <declname>gp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7073"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_134372e529cb6436d7f20194ab6d9bc3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mprWaitForTestToComplete</definition>
        <argsstring>(MprTestGroup *gp, int timeout)</argsstring>
        <name>mprWaitForTestToComplete</name>
        <param>
          <type>MprTestGroup *</type>
          <declname>gp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="7072"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1ffed14ffe657703bf2577f91e424d6f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprWakeDispatcherService</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprWakeDispatcherService</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Wakeup the dispatcher. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3883"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_11757bd615c35570495c3dcef5d60cabd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprWakeNotifier</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprWakeNotifier</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5350"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_14d8fe59f1d7a659756e025c5c76cf48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprWakeWaitService</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprWakeWaitService</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5349"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g1ccf3d98a34232049c0e97384fca88c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWrite</definition>
        <argsstring>(MprFile *file, cvoid *buf, uint count)</argsstring>
        <name>mprWrite</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>cvoid *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Write data to a file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Writes data to a file. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the data to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Cound of characters in <emphasis>buf</emphasis> to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters actually written to the file. Returns a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3239"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_cmd_1gc69adc9b03e41150d6d79512c0895c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWriteCmdPipe</definition>
        <argsstring>(MprCmd *cmd, int channel, char *buf, int bufsize)</argsstring>
        <name>mprWriteCmdPipe</name>
        <param>
          <type>MprCmd *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
<para>Write data to an I/O channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>MprCmd object created via mprCreateCmd </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number to read from. Should be either MPR_CMD_STDIN, MPR_CMD_STDOUT or MPR_CMD_STDERR. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to read into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6465"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g7acf925a7a7f34a50f45e72e34ccc2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWriteFormat</definition>
        <argsstring>(MprFile *file, cchar *fmt,...)</argsstring>
        <name>mprWriteFormat</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Write formatted data to a file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Writes a formatted string to a file. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters actually written to the file. Returns a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3259"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_192c683746905c5730e2e6ec07f960d14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWriteRegistry</definition>
        <argsstring>(MprCtx ctx, cchar *key, cchar *name, cchar *value)</argsstring>
        <name>mprWriteRegistry</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6732"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1gbd2ae7ff08fb05f45d78f728a3af93a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWriteSocket</definition>
        <argsstring>(MprSocket *sp, void *buf, int len)</argsstring>
        <name>mprWriteSocket</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Write to a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Write a block of data to a socket. If the socket is in non-blocking mode (the default), the write may return having written less than the required bytes. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a block to write to the socket </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data to write. This may be less than the requested write length if the socket is in non-blocking mode. Will return a negative MPR error code on errors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of bytes actually written. Return a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5762"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1gbf3c8418ff828a0301005b26ae06df92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWriteSocketString</definition>
        <argsstring>(MprSocket *sp, cchar *str)</argsstring>
        <name>mprWriteSocketString</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Write to a string to a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Write a string to a socket. If the socket is in non-blocking mode (the default), the write may return having written less than the required bytes. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Null terminated string to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of bytes actually written. Return a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5773"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_socket_1g50a28b5aac234b66ad03d0e3a8e38038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWriteSocketVector</definition>
        <argsstring>(MprSocket *sp, MprIOVec *iovec, int count)</argsstring>
        <name>mprWriteSocketVector</name>
        <param>
          <type>MprSocket *</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>MprIOVec *</type>
          <declname>iovec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Write a vector to a socket. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Do scatter/gather I/O by writing a vector of buffers to a socket. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sp</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket object returned from <ref refid="group___mpr_socket_1g2889978d5c1a2e1990eb3198379cdeb9" kindref="member">mprCreateSocket</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iovec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of data to write before the file contents </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Count of entries in beforeVect </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A count of bytes actually written. Return a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="5910"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_file_1g3874c994f9f5b1c4c4fd57100a656148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprWriteString</definition>
        <argsstring>(MprFile *file, cchar *str)</argsstring>
        <name>mprWriteString</name>
        <param>
          <type>MprFile *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Write a string to a file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Writes a string to a file. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an MprFile object returned via MprOpen. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters actually written to the file. Returns a negative MPR error code on errors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="3249"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1c1d3dbf412b23265d7b01df39b0fbc34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprWriteToOsLog</definition>
        <argsstring>(MprCtx ctx, cchar *msg, int flags, int level)</argsstring>
        <name>mprWriteToOsLog</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="6752"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1c36c085a4baf423492a839f3f22ae567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprXmlGetErrorMsg</definition>
        <argsstring>(MprXml *xp)</argsstring>
        <name>mprXmlGetErrorMsg</name>
        <param>
          <type>MprXml *</type>
          <declname>xp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4094"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_105338788d8a31a3305ec96890f1dfbde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprXmlGetLineNumber</definition>
        <argsstring>(MprXml *xp)</argsstring>
        <name>mprXmlGetLineNumber</name>
        <param>
          <type>MprXml *</type>
          <declname>xp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4095"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_15b23345f34a9e3d9310081435516993b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mprXmlGetParseArg</definition>
        <argsstring>(MprXml *xp)</argsstring>
        <name>mprXmlGetParseArg</name>
        <param>
          <type>MprXml *</type>
          <declname>xp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4093"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_18f8aa53e194553774076e78d5a9a5b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprXml *</type>
        <definition>MprXml* mprXmlOpen</definition>
        <argsstring>(MprCtx ctx, int initialSize, int maxSize)</argsstring>
        <name>mprXmlOpen</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initialSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4088"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_11341ea482faf1301d867e71575ba638a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprXmlParse</definition>
        <argsstring>(MprXml *xp)</argsstring>
        <name>mprXmlParse</name>
        <param>
          <type>MprXml *</type>
          <declname>xp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4091"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_114d86acd47bec1e6d7ae0b60fa31d98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprXmlSetInputStream</definition>
        <argsstring>(MprXml *xp, MprXmlInputStream s, void *arg)</argsstring>
        <name>mprXmlSetInputStream</name>
        <param>
          <type>MprXml *</type>
          <declname>xp</declname>
        </param>
        <param>
          <type>MprXmlInputStream</type>
          <declname>s</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4090"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1815cdc307b58663f2890711f60b690e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprXmlSetParseArg</definition>
        <argsstring>(MprXml *xp, void *parseArg)</argsstring>
        <name>mprXmlSetParseArg</name>
        <param>
          <type>MprXml *</type>
          <declname>xp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>parseArg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4092"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1015f91fb1d39230057a368fb225f45b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprXmlSetParserHandler</definition>
        <argsstring>(MprXml *xp, MprXmlHandler h)</argsstring>
        <name>mprXmlSetParserHandler</name>
        <param>
          <type>MprXml *</type>
          <declname>xp</declname>
        </param>
        <param>
          <type>MprXmlHandler</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4089"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a95bfcab8b5704b0c32fdfc18bc7c456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long nap</definition>
        <argsstring>(long)</argsstring>
        <name>nap</name>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="815"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1bf1a147cd27100d2b88716ed56334b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int print</definition>
        <argsstring>(cchar *fmt,...)</argsstring>
        <name>print</name>
        <param>
          <type>cchar *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="1850"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1ccdaa7bbdfd84572b9c3935cbe78af60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutexattr_gettype</definition>
        <argsstring>(__const pthread_mutexattr_t *__restrict __attr, int *__restrict __kind) __THROW</argsstring>
        <name>pthread_mutexattr_gettype</name>
        <param>
          <type>__const pthread_mutexattr_t *__restrict</type>
          <declname>__attr</declname>
        </param>
        <param>
          <type>int *__restrict</type>
          <declname>__kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="505"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1fd6cb6e9043881ccb43d23b38d108db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_mutexattr_settype</definition>
        <argsstring>(pthread_mutexattr_t *__attr, int __kind) __THROW</argsstring>
        <name>pthread_mutexattr_settype</name>
        <param>
          <type>pthread_mutexattr_t *</type>
          <declname>__attr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>__kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="510"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_100f00795b1045ba8a8eba4cb8ac25366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srand48</definition>
        <argsstring>(long)</argsstring>
        <name>srand48</name>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="812"/>
      </memberdef>
      <memberdef kind="function" id="mpr_8h_1a39573bab40d5c42d565dc835e24fa2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long ulimit</definition>
        <argsstring>(int,...)</argsstring>
        <name>ulimit</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="814"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Multithreaded Portable Runtime (MPR) is a portable runtime core for embedded applications. </para>    </briefdescription>
    <detaileddescription>
<para>The MPR provides management for logging, error handling, events, files, http, memory, ssl, sockets, strings, xml parsing, and date/time functions. It also provides a foundation of safe routines for secure programming, that help to prevent buffer overflows and other security threats. It is correctly handles null arguments without crashing. The MPR is a library and a C API that can be used in both C and C++ programs. <linebreak/>
<linebreak/>
 The MPR uses by convention a set extended typedefs for common types. These include: bool, cchar, cvoid, uchar, short, ushort, int, uint, long, ulong, int64, uint64, float, and double. The cchar type is a const char, cvoid is const void, and several types have &quot;u&quot; prefixes to denote unsigned qualifiers. <linebreak/>
<linebreak/>
 The MPR includes a memory manager to minimize memory leaks and maximize allocation efficiency. It utilizes a heap and slab allocators with tree links. All memory allocated is connected to a parent memory block thus forming a tree. When any block is freed, all child blocks are also freed. Most MPR APIs take a memory parent context as the first parameter. <linebreak/>
<linebreak/>
 Many of these APIs are not thread-safe. If utilizing multithreaded programming on a supporting operating system, be careful if you modify or delete the underlying data while accessing the resource from another thread. </para>    </detaileddescription>
    <location file="/Users/mob/hg/mpr/all/mpr.h"/>
  </compounddef>
</doxygen>
