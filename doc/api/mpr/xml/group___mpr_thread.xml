<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.8">
  <compounddef id="group___mpr_thread" kind="group">
    <compoundname>MprThread</compoundname>
    <title>MprThread</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprThread *</type>
        <definition>MprThread* mprCreateThread</definition>
        <argsstring>(MprCtx ctx, cchar *name, MprThreadProc proc, void *data, int stackSize)</argsstring>
        <name>mprCreateThread</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>cchar *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>MprThreadProc</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stackSize</declname>
        </param>
        <briefdescription>
<para>Create a new thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>MPR threads are usually real O/S threads and can be used with the various locking services (<ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref>, <ref refid="struct_mpr_cond" kindref="compound">MprCond</ref>, <ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref>) to enable scalable multithreaded applications. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by mprAlloc or mprCreate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique name to give the thread </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Entry point function for the thread. <ref refid="group___mpr_thread_1g35c53df918c2f52e2e1f6961e35ee8d1" kindref="member">mprStartThread</ref> will invoke this function to start the thread </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread private data stored in MprThread.data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stackSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack size to use for the thread. On VM based systems, increasing this value, does not necessarily incurr a real memory (working-set) increase. Set to zero for a default stack size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A MprThread object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4455"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1ga499ec9a691d9b74753edeac24afbcdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprOsThread</type>
        <definition>MprOsThread mprGetCurrentOsThread</definition>
        <argsstring>()</argsstring>
        <name>mprGetCurrentOsThread</name>
        <briefdescription>
<para>Get the O/S thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the O/S thread ID for the currently executing thread. </para></simplesect>
<simplesect kind="return"><para>Returns a platform specific O/S thread ID. On Unix, this is a pthread reference. On other systems it is a thread integer value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4516"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1gf7be9fb3ab99388b3e83093a78a74265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MprThread *</type>
        <definition>MprThread* mprGetCurrentThread</definition>
        <argsstring>(MprCtx ctx)</argsstring>
        <name>mprGetCurrentThread</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the currently executing thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the thread object for the currently executing O/S thread. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a thread object representing the current O/S thread. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4507"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1gc98816057bf8f47f8d15131e68ae12f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cchar *</type>
        <definition>cchar* mprGetThreadName</definition>
        <argsstring>(MprThread *thread)</argsstring>
        <name>mprGetThreadName</name>
        <param>
          <type>MprThread *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Get the thread name. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>MPR threads are usually real O/S threads and can be used with the various locking services (<ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref>, <ref refid="struct_mpr_cond" kindref="compound">MprCond</ref>, <ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref>) to enable scalable multithreaded applications. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread object returned from <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a string name for the thread. Caller must not free. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4475"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1g0edd7ee5a80c5566dbcd079293280b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprGetThreadPriority</definition>
        <argsstring>(MprThread *thread)</argsstring>
        <name>mprGetThreadPriority</name>
        <param>
          <type>MprThread *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Get the thread priroity. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Get the current priority for the specified thread. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread object returned by <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer MPR thread priority between 0 and 100 inclusive. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4484"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1ga809ed728aec623d30af5c895d3bd5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetCurrentThreadPriority</definition>
        <argsstring>(MprCtx ctx, int priority)</argsstring>
        <name>mprSetCurrentThreadPriority</name>
        <param>
          <type><ref refid="group___mpr_mem_1g1413d66bb5356730c6fa08ca0af6bc0f" kindref="member">MprCtx</ref></type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Set the thread priroity for the current thread. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Any memory context allocated by the MPR. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the current priority for the specified thread. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority to associate with the thread. Mpr thread priorities are are integer values between 0 and 100 inclusive with 50 being a normal priority. The MPR maps these priorities in a linear fashion onto native O/S priorites. Useful constants are: <itemizedlist>
<listitem><para>MPR_LOW_PRIORITY </para></listitem>
<listitem><para>MPR_NORMAL_PRIORITY </para></listitem>
<listitem><para>MPR_HIGH_PRIORITY </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4530"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1g60bd7071428f6043d834c48ee8914560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mprSetThreadPriority</definition>
        <argsstring>(MprThread *thread, int priority)</argsstring>
        <name>mprSetThreadPriority</name>
        <param>
          <type>MprThread *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>int</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Set the thread priroity. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Set the current priority for the specified thread. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread object returned by <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority to associate with the thread. Mpr thread priorities are are integer values between 0 and 100 inclusive with 50 being a normal priority. The MPR maps these priorities in a linear fashion onto native O/S priorites. Useful constants are: <itemizedlist>
<listitem><para>MPR_LOW_PRIORITY </para></listitem>
<listitem><para>MPR_NORMAL_PRIORITY </para></listitem>
<listitem><para>MPR_HIGH_PRIORITY </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4498"/>
      </memberdef>
      <memberdef kind="function" id="group___mpr_thread_1g35c53df918c2f52e2e1f6961e35ee8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mprStartThread</definition>
        <argsstring>(MprThread *thread)</argsstring>
        <name>mprStartThread</name>
        <param>
          <type>MprThread *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
<para>Start a thread. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>Start a thread previously created via <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref>. The thread will begin at the entry function defined in <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread object returned from <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns zero if successful, otherwise a negative MPR error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/mob/hg/mpr/all/mpr.h" line="4465"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Thread Service. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title><bold>Description</bold>:</title><para>The MPR provides a cross-platform thread abstraction above O/S native threads. It supports arbitrary thread creation, thread priorities, thread management and thread local storage. By using these thread primitives with the locking and synchronization primitives offered by <ref refid="struct_mpr_mutex" kindref="compound">MprMutex</ref>, <ref refid="struct_mpr_spin" kindref="compound">MprSpin</ref> and <ref refid="struct_mpr_cond" kindref="compound">MprCond</ref> - you can create cross platform multi-threaded applications. </para></simplesect>
<simplesect kind="par"><title><bold>API</bold> Stability:</title><para>Evolving </para></simplesect>
<simplesect kind="see"><para><ref refid="group___mpr_thread" kindref="compound">MprThread</ref>, <ref refid="group___mpr_thread_1g026dcaf0b9eb162486103a9b99632939" kindref="member">mprCreateThread</ref>, <ref refid="group___mpr_thread_1g35c53df918c2f52e2e1f6961e35ee8d1" kindref="member">mprStartThread</ref>, <ref refid="group___mpr_thread_1gc98816057bf8f47f8d15131e68ae12f7" kindref="member">mprGetThreadName</ref>, <ref refid="group___mpr_thread_1g0edd7ee5a80c5566dbcd079293280b1a" kindref="member">mprGetThreadPriority</ref>, <ref refid="group___mpr_thread_1g60bd7071428f6043d834c48ee8914560" kindref="member">mprSetThreadPriority</ref>, <ref refid="group___mpr_thread_1gf7be9fb3ab99388b3e83093a78a74265" kindref="member">mprGetCurrentThread</ref>, <ref refid="group___mpr_thread_1ga499ec9a691d9b74753edeac24afbcdc" kindref="member">mprGetCurrentOsThread</ref>, <ref refid="group___mpr_thread_1g60bd7071428f6043d834c48ee8914560" kindref="member">mprSetThreadPriority</ref>, mprSetThreadData, mprGetThreadData, mprCreateThreadLocal </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
