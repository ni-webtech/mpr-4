#!/bin/bash 
#
#   configure -- Build configuration script for Embedthis Products
#
#   Copyright (c) Embedthis Software LLC, 2003-2011. All Rights Reserved.
#
#   This script creates the buildConfig.h configuration file. This is included
#   in every C/C++ source file and all makefiles.
#
#   The initial default settings are derrived from configuration files in the build directory. 
#
###############################################################################

unset CDPATH
export PATH=/bin:/usr/bin:$PATH
export CYGWIN=nodosfilewarning
export BLD_TOP


#
#   Prefix for configuration files generated by configure
#
CONFIG_ARGS=.buildConfig.args
CONFIG_IMP=Makefile.import
CONFIG_H=buildConfig.h
CONFIG_SRC=.buildConfig.tmp
CONFIG_CACHE=.buildConfig.sh

#
#   This programs version
#
CONFIGURE_VERSION=4.0.0

#
#   Default settings
#
BLD_DEFAULTS=standard

#
#   O/S has cygpath (Windows)
#
HAS_CYGPATH=0

#
#   Product name to configure
#
PRODUCT=

#
#   Flags prefixes
#
FLAGS="C D I LD J CPP"

#
#   Set preferred make
#
if which gnumake >/dev/null 2>&1 ; then
    MAKE=`which gnumake`
elif which gmake >/dev/null 2>&1 ; then
    MAKE=`which gmake`
else
    MAKE=make
fi

#
#   Feature defaults
#
BLD_FEATURE_VALLOC=1

###############################################################################
#
#   Check the software installation and O/S
#

checkSetup() {

    #
    #   Windows path conversion utility
    #
    type -p cygpath >/dev/null 2>&1
    if [ $? = 0 ] ; then
        HAS_CYGPATH=1
    else
        HAS_CYGPATH=0
    fi

    #
    #   Ensure we can write to key directories
    #
    for d in . build build/bin build/src
    do
        if [ ! -d $d ] ; then
            echo "Missing required directory \"$d\"" 1>&2
            echo "Create this directory and retry" 1>&2
            exit 255
        fi
        echo 2>/dev/null >$d/.test 
        if [ $? != 0 ] ; then
            echo "Can't write to $d" 1>&2
            echo "You do not have write permission for the $d directory." 1>&2
            echo "Log in as root or modify the permissions of this directory" 1>&2
            echo "and all its files." 1>&2
            exit 255
        fi
        rm -f $d/.test
    done

    if [ ! -f ./configure -o ! -d build ] ; then
        echo "configure: You must be in the top source directory." 1>&2
        exit 255
    fi

    #
    #   Convert paths to be absolute with a drive spec on windows
    #
    export BLD_TOP=`canonPath .`
    export BLD_TOOLS_DIR=${BLD_TOP}/build/bin
    export BLD_OUT_DIR=out
    rm -rf $BLD_OUT_DIR

    #
    #   Sleuth the product. By convention products put a configure.PRODUCT file under the build directory.
    #
    PRODUCT_LIST=`echo build/configure.* | sed 's/[^. ]*\.//g'`
    if [ "${PRODUCT_LIST%\*}" != "${PRODUCT_LIST}" ] ; then
        echo "Can't find required file: build/configure.*" 1>&2
        echo "Install this file and retry." 1>&2
        exit 255
    fi
}


setExtensions()
{
    if [ "$BLD_HOST_CPU" = i386 -a -d ../packages.32 ] ; then
        rm -f extensions
        ln -s ../packages.32 extensions
    elif [ -d ../packages ] ; then
        rm -f extensions
        ln -s ../packages extensions
    fi
}


#
#   Link a file. If that fails, copy.
#
linkFile()
{
    source=$1
    dir=`dirname $2`
    base=`basename $2`

    rm -f "$2"
    if [ "$base" != "$2" ] ; then
        source=`echo $source | sed -e "s^${dir}/^^"`
    fi
    ln -s $source $2 2>/dev/null
    if [ $? != 0 ] ; then
        cp $1 $2
    fi
}


setSystemConfiguration() {

    if [ "$BLD_HOST_SYSTEM" = "" ] ; then
        BLD_HOST_SYSTEM=`bash build/bin/config.guess`
        #   Temp to switch back to win-32 builds
        [ "$BLD_HOST_SYSTEM" = "x86_64-pc-cygwin" ] && BLD_HOST_SYSTEM="i686-pc-cygwin"
    fi
    if [ "$BLD_BUILD_SYSTEM" = "" ] ; then
        BLD_BUILD_SYSTEM=`bash build/bin/config.guess`
        [ "$BLD_BUILD_SYSTEM" = "x86_64-pc-cygwin" ] && BLD_BUILD_SYSTEM="i686-pc-cygwin"
    fi
    parseSystemConfiguration HOST 
    parseSystemConfiguration BUILD 

    if [ "${BLD_HOST_SYSTEM}" != "${BLD_BUILD_SYSTEM}" ] ; then
        BLD_CROSS=1
        if [ "${BLD_HOST_OS}" != "${BLD_BUILD_OS}" ] ; then
            BLD_HOST_DIST=Unknown
            BLD_HOST_DIST_VER=Unknown
        fi
    else 
        BLD_CROSS=0
    fi
}


#
#   Parse the system configuration. This is called for the host and build configurations.
#
parseSystemConfiguration() {

    local cpu dist os rel system version unused value prefix

    #
    #   Parse the host system configuration
    #
    kind=$1
    parseSystem BLD_${kind}_SYSTEM $system BLD_${kind}_CPU unused BLD_${kind}_OS

    eval os=\$BLD_${kind}_OS
    case $os in
    WIN|WINCE)
        eval BLD_${kind}_UNIX=0
        eval BLD_${kind}_WIN=1
        ;;
    CYGWIN)
        eval BLD_${kind}_UNIX=1
        eval BLD_${kind}_WIN=0
        ;;
    FREEBSD)
        eval BLD_${kind}_UNIX=1
        eval BLD_${kind}_WIN=0
        ;;
    LINUX)
        eval BLD_${kind}_UNIX=1
        eval BLD_${kind}_WIN=0
        ;;
    MINGW)
        eval BLD_${kind}_UNIX=0
        eval BLD_${kind}_WIN=1
        ;;
    SOLARIS*)
        eval BLD_${kind}_UNIX=1
        eval ${os}=SOLARIS
        eval BLD_${kind}_WIN=0
        ;;
    MACOSX)
        eval BLD_${kind}_UNIX=1
        eval BLD_${kind}_WIN=0
        ;;
    VXWORKS)
        eval BLD_${kind}_UNIX=0
        eval BLD_${kind}_WIN=0
        ;;
    *)
        eval BLD_${kind}_UNIX=0
        eval BLD_${kind}_WIN=0
        ;;
    esac

    #
    #   Determine the CPU family
    #
    eval cpu=\$BLD_${kind}_CPU
    case ${cpu} in
    amd64)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_IX64
        prefix=amd64
        ;;
    arm*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_ARM
        prefix=arm
        ;;
    i?86*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_IX86
        prefix="i?86"
        ;;
    m68k**)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_68K
        prefix=m68k
        ;;
    mips*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_MIPS
        prefix=mips
        ;;
    powerpc*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_PPC
        eval BLD_${kind}_CPU=ppc
        cpu=ppc
        prefix=ppc
        ;;
    ppc*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_PPC
        prefix=ppc
        ;;
    sparc*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_SPARC
        prefix=sparc
        ;;
    strongarm*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_ARM
        prefix=strongarm
        ;;
    x86_64*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_IX64
        prefix=x86_64
        ;;
    x86*|i?86*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_IX86
        ;;
    xscale*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_XSCALE
        prefix=xscale
        ;;
    sim)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_SIMNT
        prefix=sim
        ;;
    simnt)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_SIMNT
        prefix=simnt
        ;;
    simsparc)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_SIMSPARC
        prefix=simsparc
        ;;
    sh*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_SH4
        prefix=sh
        ;;
    universal)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_UNIVERSAL
        prefix=universal
        ;;
    xscale*)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_ARM
        prefix="xscale"
        ;;
    *)
        eval BLD_${kind}_CPU_ARCH=MPR_CPU_UNKNOWN
        echo "configure: CPU architecture unknown. Porting $BLD_PRODUCT is required. " 1>&2
        exit 2
        ;;
    esac

    eval value=\$BLD_${kind}_CPU
    eval BLD_${kind}_CPU_MODEL=`echo $value | sed s/$prefix//`

    #
    #   Determine the O/S distribution. This is quite a bit of spelunking.
    #
    #   /etc/debian_version
    #   /etc/redhat-release
    #   /etc/fedora-release
    #   /etc/gentoo-release
    #   /etc/SuSE-release
    #   /etc/slackware-release, /etc/slackware-version
    #   /etc/debian-release, /etc/debian-version
    #   /etc/release # Solars
    #   /etc/yellowdog-release
    #   /etc/mandrake-release

    dist="unspecified"
    version="unspecified"

    if [ $os = WIN -o $os = CYGWIN -o $os = MINGW ] ; then

        # Microsoft Windows XP [Version 5.1.2600]
        # Microsoft Windows [Version 6.0.6000]

        cmd=`cygpath -m "${COMSPEC}"`
        rel=`$cmd /c ver | tail -1`
        version=`echo $rel | sed 's/.*Version //;s/]//' | awk '{ print $1 }'`
        version=${version%%.*}
        #  if [ "$version" = 6 ] ; then
        #      dist=vista
        #  elif [ "$version" = 5 ] ; then
        #      dist=xp
        #  fi
        dist=MS

    elif [ $os = LINUX ] ; then
        if [ -f /etc/redhat-release ] ; then 

            case `cat /etc/redhat-release` in
            Fedora*)
                # Fedora Core release 4 (Stentz)
                # Fedora Core release 6 (Zod)
                # Fedora Core release 5.9 (FC6 Test3)
                version=`cat /etc/redhat-release | awk '{ print $4 }'` 
                dist="fedora"
                ;;
            "Red Hat Linux"*)
                # Red Hat Linux release 9 (Shrike)
                version=`cat /etc/redhat-release | awk '{ print $5 }'` 
                dist="rhl"
                ;;
            "Red Hat Enterprise"*)
                # Red Hat Enterprise Linux ES release 3 (Taroon Update 7)
                # Red Hat Enterprise Linux ES release 4 (Nahant Update 4)
                version=`cat /etc/redhat-release | awk '{ print $7 }'` 
                dist="rhel"
                ;;
            esac
        fi
        if [ -f /etc/SuSE-release ] ; then
            dist=suse
            version=`cat /etc/SuSE-release | head -1 | awk '{ print $2 }'`
        fi
        if [ -f /etc/gentoo-release ] ; then
            dist=suse
            version=`cat /etc/gentoo-release | head -1 | awk '{ print $5 }'`
        fi
        if [ -f /etc/debian_version ] ; then
            if [ -f /etc/issue ] ; then
                cat /etc/issue | grep -i ubuntu >/dev/null
                if [ $? = 0 ] ; then
                    dist=ubuntu
                else
                    dist=debian
                fi
            fi
            if [ -f /etc/lsb-release ] ; then
                version=`cat /etc/lsb-release | grep RELEASE | sed 's/.*=//'`
            elif [ -f /etc/issue ] ; then
                version=`cat /etc/issue | awk '{ print $2 }'`
            fi
        fi

    elif [ $os = MACOSX ] ; then
        version=`sw_vers | grep ProductVersion | awk '{ print $2 }'`
        dist="Apple"

    elif [ $os = VXWORKS ] ; then
        dist="vxworks"

    elif [ $os = WINCE ] ; then
        dist="wince"
    fi
    eval BLD_${kind}_DIST=\"${dist}\"
    eval BLD_${kind}_DIST_VER=\"`echo ${version}`\"
}


#
#   Parse any user defined environment variables
#
parseEnvVars() {

    [ $quiet = 0 ] && echo -e "  # Parse environment variables ..."

    #
    #   If the user is overriding CC but doesn't set CXX, set it to the same
    #
    if [ "$CC" != "" -a "$CXX" = "" ] ; then
        CXX="$CC"
    fi
    if [ "$LD" != "" -a "$LDXX" = "" ] ; then
        LDXX="$CC"
    fi
    if [ -f "${BLD_TOP}/.embedthis" ] ; then
        BLD_EMBEDTHIS=1
    else
        BLD_EMBEDTHIS=0
    fi

    #
    #   Set default tool value if corresponding environment variable is defined
    #
    for t in AR CC DOXYGEN CXX LD LDXX MT MUNCH NM RANLIB RC STRIP
    do
        eval value="\$${t}"
        if [ "$value" != "" ] ; then
            eval BLD_HOST_${t}=\"$value\"
            eval CFG_HOST_${t}=\"$value\"
            if [ $BLD_CROSS = 0 ] ; then
                eval BLD_BUILD_${t}=\"$value\"
                eval CFG_BUILD_${t}=\"$value\"
            fi
        fi
    done

    for t in AR CC CXX LD LDXX MT NM RANLIB RC STRIP
    do
        eval value="\$BUILD_${t}"
        if [ "$value" != "" ] ; then
            eval BLD_BUILD_${t}=\"$value\"
            eval CFG_BUILD_${t}=\"$value\"
        fi
    done

    for t in $FLAGS
    do
        eval value="\$BUILD_${t}FLAGS"
        if [ "$value" != "" ] ; then
            eval BLD_BUILD_${t}FLAGS=\"$value\"
        fi
        eval value="\$${t}FLAGS"
        if [ "$value" != "" ] ; then
            eval BLD_HOST_${t}FLAGS=\"$value\"
            if [ "${BLD_CROSS}" = 0 ] ; then
                eval BLD_BUILD_${t}FLAGS=\"$value\"
            fi
        fi
    done

    if [ "$BLD_BUILD_CPPFLAGS" != "" ] ; then
        BLD_BUILD_DFLAGS="$BLD_BUILD_CPPFLAGS $BLD_BUILD_DFLAGS"
        BLD_BUILD_CPPFLAGS=
    fi
    if [ "$BLD_HOST_CPPFLAGS" != "" ] ; then
        BLD_HOST_DFLAGS="$BLD_HOST_CPPFLAGS $BLD_HOST_DFLAGS"
        BLD_HOST_CPPFLAGS=
    fi
}


#
#   Usage: parseSystem in-system out-cpu out-vendor out-os
#
parseSystem() {
    local system cpu vendor kernel os lowOS

    eval system=\$${1}
    cpu=${system%%-*}
    vendor=${system##${cpu}-}
    vendor=${vendor%%-*}
    kernel=${system##${cpu}-${vendor}-}
    os=${kernel##*-}
    kernel=${kernel%%-*}

    if [ "$kernel" != "" ] ; then
        os=$kernel
    fi
    os=`upper $os`

    case "${os}" in
    CYGWIN*|WIN)
        os=CYGWIN
        if [ "$CL_FOUND" = 1 ] ; then
            os=WIN
        elif [ "$CL_SEARCHED" != 1 ] ; then
            if [ ! -x /bin/cc.exe -o "$BLD_CC_CYGWIN" != 1 ] ; then
                [ $quiet = 0 ] && echo -e "  # Search for MS compiler ..."
                vsdirs=`ls -d /cygdrive/*/Program?Files*/Microsoft?Visual?Studio?{10*,9*}/VC/Bin 2>/dev/null`
                if [ "$vsdirs" != "" ] ; then
                   os=WIN
                   CL_FOUND=1
                   CL_SEARCHED=1
                fi
            fi
        fi
        ;;
    MINGW*)
        os=CYGWIN
        if [ "$CL_FOUND" = 1 ] ; then
            os=WIN
        elif [ "$CL_SEARCHED" != 1 ] ; then
            [ $quiet = 0 ] && echo -e "  # Search for MS compiler ..."
            vsdirs=`ls -d /cygdrive/*/Program?Files*/Microsoft?Visual?Studio?{10*,9*}/VC/Bin 2>/dev/null`
            if [ "$vsdirs" != "" ] ; then
               os=WIN
               CL_FOUND=1
               CL_SEARCHED=1
            fi
        fi
        ;;
    VXWORKS*)
        os=VXWORKS
        ;;
    DARWIN*)
        os=MACOSX
        ;;
    FREEBSD*)
        os=FREEBSD
        ;;
    SOLARIS*)
        os=SOLARIS
        ;;
    WINCE)
        os=WINCE
        ;;
    esac

    lowOS=`lower $os`
    eval ${2}=$cpu
    eval ${3}=$vendor
    eval ${4}=$os
    eval ${1}="${cpu}-${vendor}-${lowOS}"

    [ "$verbose" -gt 2 ] && echo System set to "${cpu}-${vendor}-${lowOS}" >&2
}


#
#   Convert a path to a canonical form: absolute (Windows: with drive spec and forward slashes)
#
canonPath() {
    local path v

    path="$1"
    if [ "$path" = "" ] ; then
        echo "$path"
        return
    fi
    if [ $HAS_CYGPATH = 1 ] ; then
        #
        #   These conversions will ensure we get a drive spec and that we have
        #    forward slashes instead of back slashes
        #
        d=`cygpath -am "${path}"`
        d=`cygpath -u "${d}"`
        cygpath -am "${d}"
        return
    fi

    if [ "${path##..}" != "${path}" ] ; then
        cd .. ; v=`pwd`${path##..} ; cd - >/dev/null 2>&1
    elif [ "${path##.}" != "${path}" ] ; then
        v=`pwd`${path##.}
    elif [ "${path##/}" != "${path}" ] ; then
        # Absolute
        v="$path"
    else
        # Relative
        v=`pwd`/${path#/}
    fi
    eval echo $v
}


#
#   Convert a path to be relative to $BLD_TOP. Used because gnu make on windows can't handle drive specs in dependencies.
#   Use forward slashes
#
relativePath() {

    local base home dir i d c oldd parents
    local count ccount seg commonDir commonLevels

    home="$PWD"

    #
    #   Expand ${BLD_TOP}
    #
    eval dir="$1"

    if [ "BLD_HOST_OS" = "WIN" -o "$BLD_HOST_OS" = "WINCE" ] ; then
        dir=`canonPath "$dir" | tr '[A-Z]' '[a-z]'`
        cwd=`canonPath "$PWD" | tr '[A-Z]' '[a-z]'`
    else
        dir=`canonPath "$dir"`
        cwd=`canonPath "$PWD"`
    fi

    if [ "$dir" = "$cwd" ] ; then
        echo "\${BLD_TOP}"
        return
    fi
    if [ "$dir" != "${dir/BLD_TOP/}" ] ; then
        echo "$dir"
        return
    fi

    #
    #   Find longest common dir portion
    #
    declare -a dseg
    d="$dir"
    i=0
    while [ "$d" != "${d##*/}" ] ; do
        seg=${d%%/*}                    # Extract first path segment
        dseg[$i]="${seg}"
        d=${d#*/}                       # Strip first path segment
        i=$((i + 1))
    done
    dseg[$i]="${d}"
    
    declare -a cseg
    c="$cwd"
    i=0
    while [ "$c" != "${c##*/}" ] ; do
        seg=${c%%/*}                    # Extract first path segment
        cseg[$i]="${seg}"
        c=${c#*/}                       # Strip first path segment
        i=$((i + 1))
    done
    cseg[$i]="${c}"
    
    count=${#dseg[*]}
    ccount=${#cseg[*]}

    if [ $count -gt $ccount ] ; then
        count=$ccount
    fi

    if [ "${BLD_HOST_OS}" = "WIN" -o "$BLD_HOST_OS" = "WINCE" ] ; then
        if [ "${dseg[0]}" != "${cseg[0]}" ] ; then
            echo "Path ${dir} on different drive" 1>&2
            echo "to the current drive" 1>&2
            echo "This configuration is not supported. Aborting." 1>&2
            exit 255
        fi
    fi

    #
    #   Find common parent dirs
    #
    commonDir=""
    i=0
    while [ $i -lt $count ] ; do
        [ "${dseg[$i]}" != "${cseg[$i]}" ] && break
        commonDir="$commonDir/${dseg[$i]}"
        i=$((i + 1))
    done
    commonDir="${commonDir#/*}"
    commonLevels=$i

    #
    #   Find how many levels up to common parent for cwd
    #
    parents=""
    i=$commonLevels
    while [ $i -lt ${#cseg[*]} ] ; do
        parents="../$parents"
        i=$((i + 1))
    done

    base=`echo $dir | sed "s!^$commonDir!!"`
    echo "\${BLD_TOP}/${parents}$base" | sed 's!\/\/!\/!g'
}


#
#   Remove an old prefix from a path and prepend a new prefix
#
#   remapDir dir oldPath newPath
#
remapDir() {
    local dir oldPrefix newPrefix

    dir="$1"
    oldPrefix="$2"
    newPrefix="$3"

    if [ $HAS_CYGPATH = 1 ] ; then
        dir=`cygpath -m "$dir"`
        oldPrefix=`cygpath -m "$oldPrefix"`
        newPrefix=`cygpath -m "$newPrefix"`
    fi
    if [ "${dir##$oldPrefix}" != "$dir" ] ; then
        echo "${newPrefix}${dir##$oldPrefix}"
    else
        echo "${dir}"
    fi
}


#
#   Convert the search path into a normal PATH style with ":" separators
#   On windows, this requires cygwin paths in searchPath.
#
convertSearchPath() {
    local x

    if [ "$1" != "" ] ; then
        [ "$verbose" -gt 2 ] && echo "ConvertPath expanding $1" 1>&2
        echo $1 | sed "s/[  ]'/=/g" | tr "=" "\n" | sed "s/'//g" |
        sed "s/[ \)\(]/?/g" | grep -v '^$' | while read x
        do
            [ "$x" = "" ] && continue
            if [ "$BLD_BUILD_OS" = WIN ] ; then
                eval ls -d1 "$x" 2>/dev/null | sort -r | while read f
                do
                    cygpath "$f"
                done
            else
                eval ls -d1 "$x" 2>/dev/null | sort -r
            fi
        done | grep -v '^$' | tr '\n' : | sed 's/:$//'
    fi
}


findComponents() {
    local with build host mandatory name path upperName os system

    for kind in HOST BUILD ; do
        if [ $quiet = 0 ] ; then
            eval system=\$BLD_${kind}_SYSTEM

            if [ $kind = HOST ] ; then
                echo -e "  #"
                echo -e "  # Discover components for $system"
                echo -e "  #   (Modify build/search.config and build/components/* for component searching)\n  #"
            fi
        fi

        eval SEARCH_PATH=\$${kind}_SEARCH_PATH
        if [ "$verbose" -gt 0 ] ; then
            echo -n -e "\nSearch for $kind components using $kind search path:\n    "
            echo $SEARCH_PATH | sed -e 's/:/    /g'
        fi

        for name in $BLD_COMPONENTS ; do
            upperName=`upper ${name}`

            eval with=\$CFG_${kind}_${upperName}_WITH
            [ "$with" != 1 ] && continue
 
            if [ ! -f "${BLD_TOP}/build/components/${name}" ] ; then
                echo "Missing component file: build/components/$name"
                exit 255
            fi

            eval BLD_UNIX_LIKE=\$BLD_${kind}_UNIX              
            eval BLD_WIN_LIKE=\$BLD_${kind}_WIN              
            eval BLD_CPU=\$BLD_${kind}_CPU
            eval BLD_OS=\$BLD_${kind}_OS              

            [ "$verbose" -gt 0 ] && echo -e "\nSearch for component \"${name}\" using script \"build/components/${name}\""

            . "${BLD_TOP}/build/components/${name}"

            eval path="\$CFG_${kind}_${upperName}"
            eval mandatory=\$CFG_${kind}_${upperName}_MANDATORY

            [ "$BLD_DISABLE_ALL" = 1 -a $mandatory != 1 ] && continue

            if [ "$verbose" = 0 -a $kind = HOST ] ; then
                [ $quiet = 0 ] && printf "  #   Scanning for %-12s" "${name}:"
            fi

            #
            #   Invoke the component definition function
            #
            unset MSG
            eval os=\$BLD_${kind}_OS
            OS=$os NAME=$name KIND=$kind defineComponent "$path"

            eval dependencies=\$CFG_${kind}_${upperName}_DEPENDENCIES
            for dep in $dependencies 
            do
                if ! isdefined "$dep" ; then
                    if [ "$mandatory" = 1 ] ; then
                        echo "configureComponent: Missing dependency \"${dep}\" for mandatory component: ${name}" 1>&2
                        exit 255
                    fi
                fi
            done

            eval imports=\$CFG_${kind}_${upperName}_IMPORTS
            if [ "$imports" != "" ] ; then
                if [ "${BLD_IMPORTS/$imports/}" = "${BLD_IMPORTS}" ] ; then
                    BLD_IMPORTS="$imports $BLD_IMPORTS"
                fi
            fi
        done

        # MOB - why break
        [ $BLD_CROSS = 0 ] && break
    done
    [ "$verbose" -gt 0 ] && echo

}


warnComponent() {
    local kind upper
    kind=$KIND

    name=$1
    upper=`upper ${name}`
    eval mandatory="\$CFG_${kind}_${upper}_MANDATORY" 2>/dev/null

    if [ "$mandatory" = 1 ] ; then
        echo -e "\n\nCan't find required component: $name" >&2
        shift
        echo -e "$*\n" >&2
        exit 255
    fi
    if [ "$verbose" != 0 ] ; then
        echo -e "    optional component $name not included"
    elif [ $quiet = 0 -a $kind = HOST ] ; then
        echo "optional component not included"
    fi
}


#
#   Configure a component. Called by build/components/*
#
configureComponent() {
    local cflags dflags dependencies kind iflags imports ldflags libpaths libs name upperDep new present needed
    local path withlibs withpaths upper priorMandatory priorPath emitter disable optional v tag builtin f newImports

    kind=$KIND
    builtin=0
    libpaths=
    present=1

    [ "$verbose" != 0 ] && echo -e "    configureComponent $@"

    while [ "${1#--}" != "$1" ] ; do
        case ${1#--} in
        builtin)
            builtin=1
            ;;
        cflags)
            shift ; cflags="$1"
            ;;
        dependencies)
            shift ; dependencies="$1"
            ;;
        dflags)
            shift ; dflags="$1"
            ;;
        disable)
            shift ; disable="$1"
            ;;
        emitter)
            shift ; emitter="$1"
            ;;
        iflags)
            shift ; iflags="$1"
            ;;
        imports)
            shift ; imports="$1"
            ;;
        ldflags)
            shift ; ldflags="$1"
            ;;
        libpaths)
            shift ; libpaths=`canonPath "$1"`
            ;;
        libs)
            shift ; libs="$1"
            ;;
        optional-dependencies)
            shift ; optional="$1"
            ;;
        path)
            shift ; path="$1"
            ;;
        present)
            shift ; present="$1"
            ;;
        withlibs)
            shift ; withlibs="$1"
            ;;
        withpaths)
            shift ; withpaths=`canonPath "$1"`
            ;;
        *)  
            ;;
        esac
        shift
    done

    name=$1
    tag=${path:-$libpaths}
    [ "$builtin" = 1 ] && tag=builtin

    if [ "$name" = "" ] ; then
        echo "configureComponent: component missing name"  1>&2
        exit 255
    fi
    if [ "$disable" != "" ] ; then
        echo "configureComponent: component missing name"  1>&2
        return 0
    fi

    [ $BLD_CROSS = 0 ] && kind=HOST

    upper=`upper ${name}`
    eval mandatory="\$CFG_${kind}_${upper}_MANDATORY"
    eval priorPath="\$CFG_${upper}"

    if [ "$priorPath" != "" ] ; then
        path="$priorPath"
    fi
    eval unset "CFG_${kind}_${upper}"

    #
    #   MOB - this should be done after all have been scanned.
    #
#    for dep in $dependencies 
#    do
#        upperDep=`upper ${dep}`
#        if ! isdefined "$dep" ; then
#            if [ "$mandatory" = 1 ] ; then
#                echo "configureComponent: Missing dependency \"${dep}\" for mandatory component: ${name}" 1>&2
#                exit 255
#            fi
#        fi
#    done

    for dep in $optional $dependencies
    do
        udep=`upper ${dep}`
        eval needed=\$CFG_${kind}_${udep}

        if [ "$needed" != "" ] ; then
            eval v=\$CFG_${kind}_${udep}_LIBS
            [ "$v" != "" ] && libs="$libs $v"
            [ "$v" != "" ] && withlibs="$withlibs $v"
            eval v=\$CFG_${kind}_${udep}_LIBPATHS
            [ "$v" != "" ] && libpaths="$libpaths $v"
            [ "$v" != "" ] && withpaths="$withpaths $v"

            eval v=\$CFG_${kind}_${udep}_WITHLIBS
            [ "$v" != "" ] && withlibs="$withlibs $v"
            eval v=\$CFG_${kind}_${udep}_WITHPATHS
            [ "$v" != "" ] && withpaths="$withpaths $v"
        fi
    done

    #
    #   Cleanup leading spaces
    #
    libs=${libs# *}
    libpaths=${libpaths# *}
    withlibs=${withlibs# *}
    withpaths=${withpaths# *}

    #
    #   Imports must be relative because they are used as targets
    #
    if [ "$HAS_CYGPATH" = 1 ] ; then
        new=""
        for i in $imports ; do
            new="`relativePath "$i"` $new"
        done
        imports="$new"
        new=""
        for i in $iflags ; do
            i=${i#-I}
            new="-I`relativePath "$i"` $new"
        done
        iflags="$new"
    fi
    newImports=
    for f in $imports ; do
        f=`relativePath "${f}"`
        newImports="${f} $newImports"
    done
    imports="$newImports"

#    if [ "$imports" != "" ] ; then
#        if [ "${BLD_IMPORTS/$imports/}" = "${BLD_IMPORTS}" ] ; then
#            BLD_IMPORTS="$imports $BLD_IMPORTS"
#        fi
#    fi

    #
    #   Don't make libraries unique on Linux. ld does not rescan.
    #
    if [ "${BLD_HOST_OS}" != "LINUX" ] ; then
        libs=`unique $libs`
        withlibs=`unique $withlibs`
    fi

    eval BLD_FEATURE_${upper}=1
    value=${path}
    [ "$value" = "" ] && value=1
    [ "$iflags" = "-I/usr/include" ] && iflags=
    if [ "$libpaths" = "/usr/lib" -o "$libpaths" = "/lib" ] ; then
        libpaths=
    fi
    eval CFG_${kind}_${upper}=\"${value}\"
    eval CFG_${kind}_${upper}_BUILTIN=\"$builtin\"
    eval CFG_${kind}_${upper}_CFLAGS=\"$cflags\"
    eval CFG_${kind}_${upper}_DEPENDENCIES=\"$dependencies\"
    eval CFG_${kind}_${upper}_DFLAGS=\"$dflags\"
    eval CFG_${kind}_${upper}_EMITTER=$emitter
    eval CFG_${kind}_${upper}_IFLAGS=\"'$iflags'\"
    eval CFG_${kind}_${upper}_IMPORTS=\"'$imports'\"
    eval CFG_${kind}_${upper}_LDFLAGS=\"$ldflags\"
    eval CFG_${kind}_${upper}_LIBS=\"$libs\"
    eval CFG_${kind}_${upper}_LIBPATHS=\"$libpaths\"
    eval CFG_${kind}_${upper}_MANDATORY=\"$mandatory\"
    eval CFG_${kind}_${upper}_OPTIONAL_DEPENDENCIES=\"$optional\"
    eval CFG_${kind}_${upper}_PRESENT=\"$present\"
    if [ "$builtin" = 1 ] ; then
        eval CFG_${kind}_${upper}_WITHLIBS=\"$withlibs\"
        eval CFG_${kind}_${upper}_WITHPATHS=\"$withpaths\"
    fi
    eval ${kind}_COMPONENTS=\"\$${kind}_COMPONENTS ${name}\"
    tag=${tag:-imported}
    [ $quiet = 0 -a $verbose = 0 -a $kind = HOST ] && echo "$tag"
}


#
#   probe [--name NAME] [--search searchPath] item  
#
#   --dir               Emit the dir component
#   --name NAME         Component name
#   --path path         Test first if this path exists, if so, return it.
#   --search path       Use this instead of the default search path.
#
#   Emits the directory containing the item
#
probe()
{
    local args emitdir extensions name d e f file found path search arch shobj exe trace warn SAVE_IFS OLD_PATH
    local executable ext

    args="$@"
    trace=$verbose

    eval arch=\$BLD_${KIND}_ARCH
    eval shobj=\$BLD_${KIND}_SHOBJ
    eval exe=\$BLD_${KIND}_EXE
    extensions="$exe $shobj $arch .h"
    executable=0
    warn=0

    while [ "${1#--}" != "$1" ] ; do
        case ${1#--} in
        dir)
            emitdir=1
            ;;
        exe)
            executable=1
            ;;
        extensions)
            shift ; extensions=$1
            ;;
        name)
            shift ; name=$1
            ;;
        search)
            shift ; search=$1
            ;;
        verbose)
            trace=1
            ;;
        warn)
           warn=1
            ;;
        esac
        shift
    done

    if [ "$name" = "" ] ; then
        echo "probe: Missing component name" 1>&2
        exit 255
    fi
    [ "$trace" != 0 ] && echo -e "    probe $args" 1>&2

    file=$1
    if [ "$file" = "" ] ; then
        echo -e "\nprobe: did not specifiy a file to locate" >&2
        exit 255
    fi

    if [ "$file" != "" ] ; then
        if [ -f "$file" -o -x "$file" -o -d "$file" ] ; then
            if [ "$emitdir" = 1 ] ; then
                found=${found#${file}}
            fi
            found=`canonPath "${file}"`
            [ "$found" != "" -a "$executable" = 1 -a ! -x "$found" ] && found=""
            [ "$trace" != 0 -a "$found" != "" ] && echo "    probe: found $name at $found" 1>&2
        fi
    fi

    if [ "$found" = "" ] ; then
        #
        #   Fast search using "type". Works for executables only.
        #
        [ "$search" = "" ] && search="$SEARCH_PATH"
        OLD_PATH="$PATH"
        PATH="$search"
        found=`type -P "$file" 2>/dev/null`
        PATH=$OLD_PATH
        if [ "$emitdir" = "1" ] ; then
            found=${found%${file}}
            found=${found%/}
        fi
        [ "$found" != "" -a "$executable" = 1 -a ! -x "$found" ] && found=""
        [ "$trace" != 0 -a "$found" != "" ] && echo "    probe: $name at found $found" 1>&2
    fi

    #
    #   Search manually along the search path
    #
    if [ "$found" = "" ] ; then
        SAVE_IFS=$IFS
        IFS=":"
        for d in $search ; do
            IFS=$SAVE_IFS
            [ "$trace" != 0 -a "$found" != "" ] && echo "    probe: testing $name at $d" 1>&2
            [ "${d}" = "/" ] && d=
            for ext in "" $extensions ; do
                for e in "${ext}" "${ext}.*" ; do
                    eval f=\"`echo ${d}/${file}${e}`\"
                    [ "$trace" -gt 0 ] && echo "probe: Probing ${d}/${file}${e}" >&2
                    if [ -f "${f}" -o -d "${f}" -o -h "${f}" ] ; then
                        [ "${d}" = "" ] && d=/
                        if [ "$emitdir" = "1" ] ; then
                            found="$d"
                        else
                            found="${f}"
                        fi
                        search=
                        [ "$found" != "" -a "$executable" = 1 -a ! -x "$found" ] && found=""
                        [ "$trace" != 0 -a "$found" != "" ] && echo "    probe: found $name at $found" 1>&2
                        break
                    fi
                done
            done
            [ "$found" != "" ] && break
            IFS=":"
        done
        IFS="$SAVE_IFS"
    fi

    if [ "$found" = "" ] ; then
        [ "$trace" != 0 ] && echo "    probe: $name not found" 1>&2
        if [ "$warn" = 1 ] ; then
            warnComponent $name "Can't locate $file" >&2
        fi
    else
        canonPath "${found%*/}"
    fi
}


locate() {
    local file="$1"
    local search="$2"
    search=`convertSearchPath "$search"`
    local dir=`probe --name "$file" --search "$search" "$file"`
    dir=`cygpath -u "$dir"`
    echo "'"`dirname "$dir"`"'"
}


#
#   Add a component to build with
#
with() {
    local arg dir forOs kind kinds mandatory os name upperName lowerName components

    mandatory=1

    kinds="HOST BUILD"
    while [ "${1#--}" != "$1" ] ; do
        case ${1#--} in
        build)
            kinds="BUILD"
            ;;
        host)
            kinds="HOST"
            ;;
        mandatory)
            mandatory=1
            ;;
        optional)
            mandatory=0
            ;;
        os=*)
            forOs="${1#--*=}"
            forOs=`upper ${forOs}`
            ;;
        esac
        shift
    done

    [ $BLD_CROSS = 0 ] && kinds=HOST

    #
    #   Ejs must be built on both sides if required on the host side. This is needed to compile modules
    #
    [ "$1" = "ejs" -a "$kinds" = "HOST" ] && kinds="HOST BUILD"

    for kind in $kinds ; do
        eval os=\$BLD_${kind}_OS
        for arg in $* ; do
            name="${arg%=*}"
            dir="${arg##*=}"

            eval XX_${name}=1 >/dev/null 2>&1
            if [ $? != 0 ] ; then
                echo "configure: Bad \"with\" option: with-${name}" >&2
                exit 255
            fi
            [ "$dir" = "${arg}" ] && dir=

            upperName=`upper ${name}`
            lowerName=`lower ${name}`

            if [ "$forOs" = "" -o "$forOs" = "$os" ] ; then
                components=" ${BLD_COMPONENTS} "
                if [ "${components/ ${lowerName} /}" = "$components" ] ; then
                    BLD_COMPONENTS="$BLD_COMPONENTS $lowerName"
                fi
                eval CFG_${kind}_${upperName}=$dir
                eval CFG_${kind}_${upperName}_WITH=1
                eval CFG_${kind}_${upperName}_MANDATORY=$mandatory
            fi
        done
    done
}


without() {
    local name upperName lowerName components

    name="$1"
    upperName=`upper ${name}`
    lowerName=`lower ${name}`

    if [ ! -f build/components/${lowerName} ] ; then
        echo -e "\nCan't locate component \"${name}\".\n"
        exit 255
    fi
    components=" ${BLD_COMPONENTS} "
    if [ "${components/ $lowerName /}" = "$components" ] ; then
        BLD_COMPONENTS="$BLD_COMPONENTS $lowerName"
    fi
    BLD_COMPONENTS="${components/ $lowerName / }"
    eval "CFG_WITHOUT_${upperName}"=1
    eval "CFG_HOST_${upperName}_WITH"=0
    eval "CFG_BUILD_${upperName}_WITH"=0
    eval "BLD_FEATURE_${upperName}"=0
}


findLibrary()
{
    local path prefix name suffix suffixes file

    name="$1"

    suffixes=".so .dylib .a .dll"
    if [ "${name%.*}" != "${name}" ] ; then
        suffixes=".${name#*.}"
        name="${name%.*}"
    fi

    eval cpu=\$BLD_${KIND}_CPU
    paths=""
    if [ "$cpu" = "x86_64" -a -x /usr/lib64 ] ; then
        paths="$paths /usr/lib64"
    else
        paths="$paths /usr/lib"
    fi
    paths="$paths /usr/local/lib /opt/local/lib"

    for path in ${paths}
    do
        for suffix in `echo $suffixes`
        do
            for prefix in lib ""
            do
                [ "$path" = "" ] && continue

                for file in "${path}/${prefix}${name}${suffix}"* "${path}/${prefix}${name}"*${suffix}* ; do
                    [ "$verbose" -gt 0 ] && echo "findLibrary: Probing ${file}" >&2

                    [ -d "${file}" ] && continue

                    if [ -f "${file}" -o -L "${file}" ] ; then
                        [ "$verbose" -gt 0 ] && echo -e "findLibrary: FOUND ${file}\n" >&2

                        if [ "$OS" = "WIN" ] ; then
                            echo "${file}"
                        else 
                            if [ "${name%${BLD_ARCH}}" != "${name}" ] ; then
                                echo "${file}"
                            else
                                echo canonPath "${file}"
                            fi
                        fi
                        return
                    fi
                done
            done
        done
    done
}


#
#   Return a unique set of words without changing the order
#
unique() {
    local result
    set -f 
    for word in $*
    do 
        case " $result " in 
        *\ $word\ *) ;; 
        *) result=${result:+"$result "}$word 
        ;; 
        esac 
    done 
    echo $result 
    set +f
}


createBuildConfig() {
    local out top

    top="$BLD_TOP"
    out="$BLD_OUT_DIR"
    
    #
    #   Create the buildConfig.h
    #
    [ $quiet = 0 ] && echo "  #"
    mkdir -p "${BLD_OUT_DIR}/bin" "${BLD_OUT_DIR}/inc"
    
    CONFIG_ARGS="${BLD_OUT_DIR}/bin/${CONFIG_ARGS}"
    CONFIG_H="${BLD_OUT_DIR}/inc/${CONFIG_H}"
    CONFIG_IMP="${BLD_OUT_DIR}/inc/${CONFIG_IMP}"

    [ $quiet = 0 ] && echo "  # Creating $CONFIG_H ..."
    rm -f "$CONFIG_H"
    for f in "$CONFIG_H" "$CONFIG_SRC"
    do
        createConfig $f
    done

    cp $CONFIG_H config.tmp 
    sed 's/'\''//g' < config.tmp | sed -e 's/""//g' >$CONFIG_H
    sed 's/'\''//g' < config.tmp | sed 's/"//g' >$CONFIG_H
    rm -f config.tmp

    #
    #   Modify the $CONFIG_SRC file and append to the CONFIG_H file. 
    #   Do the following edits first:
    #   - Convert X=Y to #define X Y
    #   - Convert all "'" to '"'
    #
    cp $CONFIG_SRC /tmp/config$$.tmp
    egrep -v '^#|^[ 	]+#|^$' < /tmp/config$$.tmp | egrep -v '^export ' | \
        sed 's/_#/#/g' | sed 's/\([^=]*\)=\(.*\)/#define \1 \2/' | sed 's/'\''/"/g' | \
        sed 's/^#define/    #define/' | sed 's/^ #/#/' >$CONFIG_SRC
    if [ "$BLD_HOST_OS" = WIN ] ; then
        cp $CONFIG_SRC /tmp/config$$.tmp
        cat /tmp/config$$.tmp | grep -v 'BLD_ABS_' >$CONFIG_SRC
    fi
    rm -f /tmp/config$$.tmp 

    if [ "$BLD_HOST_OS" = MACOSX ] ; then
        # Xcode work-around
        echo -e "    /* Xcode work-around */\n    #undef BLD_LIB_PREFIX\n" >>$CONFIG_H
    fi
    cat $CONFIG_SRC >>$CONFIG_H
    chmod 664 $CONFIG_H
    rm -f "${BLD_OUT_DIR}/inc/${CONFIG_CACHE}"

    >$CONFIG_ARGS
    for t in ANT AR BREW CC DOXYGEN CXX JAVAC JDK JAR LD LDXX MT MUNCH NM RANLIB RC STRIP
    do
        eval value="\$${t}"
        if [ "$value" != "" ] ; then
            echo "export $t=\"$value\"" >>$CONFIG_ARGS
        fi
    done

    for t in AR CC CXX LD LDXX MT NM RANLIB RC STRIP
    do
        eval value="\$BUILD_${t}"
        if [ "$value" != "" ] ; then
            echo "export $t=\"$value\"" >>$CONFIG_ARGS
        fi
    done

    for t in $FLAGS
    do
        eval value="\$BUILD_${t}FLAGS"
        if [ "$value" != "" ] ; then
            echo "export ${t}FLAGS=\"$value\"" >>$CONFIG_ARGS
        fi
        eval value="\$${t}FLAGS"
        if [ "$value" != "" ] ; then
            echo "export ${t}FLAGS=\"$value\"" >>$CONFIG_ARGS
        fi
    done

    echo "export PATH=\"$PATH\"" >>$CONFIG_ARGS
    echo -e "\n./configure $CMD_LINE" >>$CONFIG_ARGS
    [ $quiet = 0 -a $verbose != 0 ] && echo "  # Creating $CONFIG_ARGS ..."

    #
    #   Create buildConfig.import
    #
    [ $quiet = 0 -a $verbose != 0 ] && echo "  # Creating $CONFIG_IMP ..."
    SHOBJ=$BLD_HOST_SHOBJ
    echo -e "#\n#   Makefile.import -- Import dependent files\n#\n" >$CONFIG_IMP
    > /tmp/$$targets
    BLD_IMPORTS=`echo ${BLD_IMPORTS}| tr ' ' '\n' | sort | uniq | tr '\n' ' '`
    for item in ${BLD_IMPORTS} 
    do
        if [ ${item%.h} != ${item} ] ; then
            eval dir=$BLD_HOST_INC_DIR
        elif [ ${item%.mod} != ${item} ] ; then
            eval dir=$BLD_HOST_LIB_DIR
        elif [ ${item%${SHOBJ}} != ${item} -a "${SHOBJ}" != ".dll" ] ; then
            eval dir=$BLD_HOST_LIB_DIR
        else
            eval dir=$BLD_HOST_BIN_DIR
        fi
		#
		#	MOB - temporarily allow overrides.
        echo -e "\${BLD_TOP}/${dir}/${item##*/}:: ${item}\n\t"'$(call log) [Import]' "${item}" >>$CONFIG_IMP
        echo -e "\tcp ${item} ${BLD_TOP}/${dir}/${item##*/}\n" >>$CONFIG_IMP
        echo -e "\t\${BLD_TOP}/${dir}/${item##*/} \\" >>/tmp/$$targets
    done
    echo -e "compileFirst: \\" >>$CONFIG_IMP
    cat /tmp/$$targets >>$CONFIG_IMP
    echo -e "" >>$CONFIG_IMP
    rm -f /tmp/$$targets
}

#
#   Create the buildConfig header
#
createConfigHeader()
{
    local FILE NAME

    FILE="$1"
    NAME=`basename $1`

    rm -f "$NAME"
    if [ "$NAME" = $CONFIG_SRC ]
    then
        cat >$FILE <<!EOF_CONFIG_HEADER_SRC

    /* C Source Code Definitions */
!EOF_CONFIG_HEADER_SRC
    else
        echo -e "#if IGNORE_IN_C_CODE" >$FILE
        echo -e "#\n#   ${FILE} -- Universal Build Configuration File." >>$FILE
        cat >>$FILE <<!EOF_CONFIG_HEADER_MAKE
#
#   This file is included by Makefiles and by C source code. Shell scripts will
#   also parse this file.
#
#   WARNING: DO NOT EDIT. This file is generated by configure. If you must edit
#   this file, be very careful to keep the Makefile section and C code section
#   in-sync.
#   
#   Use "./configure --help" for available options.
#   
################################################################################

ifneq (1,0)
#
#   Definitions for Makefiles. Definitions for C code are at the end of the file.
#   Shell scripts parse the file and interpret the C code definitions.
#
!EOF_CONFIG_HEADER_MAKE
    fi
}


createConfigFooter()
{
    FILE="$1"
    NAME=`basename $1`

    if [ "$FILE" = "$CONFIG_H" ]
    then
        cat >>$FILE <<!EOF_CONFIG_FOOTER_MAKE
# End of Makefile definitions


else
#else /* !IGNORE_IN_C_CODE */

!EOF_CONFIG_FOOTER_MAKE
    else
        cat >>$FILE <<!EOF_CONFIG_FOOTER_H
_#endif /* IGNORE_IN_C_CODE */
_#if IGNORE_IN_C_CODE
endif
_#endif /* IGNORE_IN_C_CODE */
!EOF_CONFIG_FOOTER_H
    fi
}


#
#   Create a buildConfig.* file. 
#
createConfig()
{
    local enabled kind d dir FILE upper

    FILE="$1"
    rm -f "$FILE"

    createConfigHeader "$FILE"

    BLD_HOST_CPU_UPPER=`upper $BLD_HOST_CPU`
    BLD_BUILD_CPU_UPPER=`upper $BLD_BUILD_CPU`
    local upper=`upper $BLD_PRODUCT`

    cat >>$FILE <<!EOF_CONFIG1
#
#   Key Product Settigns
#
!EOF_CONFIG1

    patch=${BLD_VERSION##*.}
    major=${BLD_VERSION%%.*}
    y=${BLD_VERSION%.*}
    minor=${y#*.}

    vnum=$(( ((((major * 1000) + minor) * 1000) + patch) ))
    echo "BLD_${upper}_PRODUCT=1" >>$FILE
    cat >>$FILE <<!EOF_CONFIG1a
BLD_PRODUCT="$BLD_PRODUCT"
BLD_NAME="$BLD_NAME"
BLD_TYPE="$BLD_TYPE"
BLD_VERSION="$BLD_VERSION"
BLD_NUMBER="$BLD_NUMBER"
BLD_TUNE=$BLD_TUNE
BLD_CHAR_LEN=$BLD_CHAR_LEN
BLD_CHAR=$BLD_CHAR
BLD_DEFAULTS="$BLD_DEFAULTS"
BLD_COMPONENTS="$BLD_COMPONENTS"
BLD_EMBEDTHIS=$BLD_EMBEDTHIS
BLD_DEBUG=$BLD_DEBUG
BLD_CONFIG_CMD="$CMD_LINE"

#
#   Version information
#
BLD_NUMBER_ONLY="${BLD_NUMBER%-*}"
BLD_MAJOR_VERSION=$major
BLD_MINOR_VERSION=$minor
BLD_PATCH_VERSION=$patch
BLD_VNUM="$vnum"

#
#   Other Product Settings
#
BLD_COMPANY="$BLD_COMPANY"
BLD_DIRS="$BLD_DIRS"
BLD_CLEAN_INSTALL="$BLD_CLEAN_INSTALL"
BLD_LICENSE="$BLD_LICENSE"
BLD_COMMERCIAL="$BLD_COMMERCIAL"

#
#   Host and Build Systems
#
BLD_HOST_SYSTEM="$BLD_HOST_SYSTEM"
BLD_BUILD_SYSTEM="$BLD_BUILD_SYSTEM"
BLD_CROSS="$BLD_CROSS"

#
#   Host System Settings 
#
BLD_HOST_OS="$BLD_HOST_OS"
BLD_HOST_CPU_ARCH=$BLD_HOST_CPU_ARCH
BLD_HOST_CPU="$BLD_HOST_CPU"
BLD_HOST_CPU_UPPER="$BLD_HOST_CPU_UPPER"
BLD_HOST_CPU_MODEL="$BLD_HOST_CPU_MODEL"
BLD_HOST_DIST="$BLD_HOST_DIST"
BLD_HOST_DIST_VER="$BLD_HOST_DIST_VER"
BLD_HOST_UNIX=$BLD_HOST_UNIX
BLD_HOST_WIN=$BLD_HOST_WIN
!EOF_CONFIG1a

    if [ "$BLD_HOST_OS" = VXWORKS ] ; then
        echo "BLD_BUILD_CPU_VX=$BLD_BUILD_CPU_VX" >>$FILE
        echo "BLD_BUILD_SYSTEM_VX=$BLD_BUILD_SYSTEM_VX" >>$FILE
    fi

    cat >>$FILE <<!EOF_CONFIG2

#
#   Build System Settings for Build Tools
#
BLD_BUILD_OS="$BLD_BUILD_OS"
BLD_BUILD_CPU_ARCH=$BLD_BUILD_CPU_ARCH
BLD_BUILD_CPU="$BLD_BUILD_CPU"
BLD_BUILD_CPU_UPPER="$BLD_BUILD_CPU_UPPER"
BLD_BUILD_CPU_MODEL="$BLD_BUILD_CPU_MODEL"
BLD_BUILD_UNIX=$BLD_BUILD_UNIX
BLD_BUILD_WIN=$BLD_BUILD_WIN

#
#   System and Installation Directories
#
BLD_ROOT_PREFIX="$BLD_ROOT_PREFIX"
BLD_PREFIX="$BLD_PREFIX"
BLD_CFG_PREFIX="$BLD_CFG_PREFIX"
BLD_BIN_PREFIX="$BLD_BIN_PREFIX"
BLD_DOC_PREFIX="$BLD_DOC_PREFIX"
BLD_INC_PREFIX="$BLD_INC_PREFIX"
BLD_JEM_PREFIX="$BLD_JEM_PREFIX"
BLD_LIB_PREFIX="$BLD_LIB_PREFIX"
BLD_LOG_PREFIX="$BLD_LOG_PREFIX"
BLD_MAN_PREFIX="$BLD_MAN_PREFIX"
BLD_PRD_PREFIX="$BLD_PRD_PREFIX"
BLD_SAM_PREFIX="$BLD_SAM_PREFIX"
BLD_SPL_PREFIX="$BLD_SPL_PREFIX"
BLD_SRC_PREFIX="$BLD_SRC_PREFIX"
BLD_VER_PREFIX="$BLD_VER_PREFIX"
BLD_WEB_PREFIX="$BLD_WEB_PREFIX"

#
#   Relative native build directories
#
!EOF_CONFIG2

    echo -e "BLD_BUILD_BIN_DIR=\"${BLD_BUILD_BIN_DIR}\""      >>$FILE
    echo -e "BLD_BUILD_LIB_DIR=\"${BLD_BUILD_LIB_DIR}\""      >>$FILE

    cat >>$FILE <<!EOF_CONFIG2a

#
#   Absolute native build directories
#
!EOF_CONFIG2a

    v=`eval canonPath "${BLD_BUILD_BIN_DIR}"` 
    echo -e "BLD_ABS_BUILD_BIN_DIR=\"${v}\""      >>$FILE
    v=`eval canonPath "${BLD_BUILD_LIB_DIR}"` 
    echo -e "BLD_ABS_BUILD_LIB_DIR=\"${v}\""      >>$FILE

    cat >>$FILE <<!EOF_STANDARD_FEATURES

#
#   Standard Feature Selection
#
BLD_FEATURE_ASSERT=$BLD_FEATURE_ASSERT
BLD_FEATURE_DEVICE=$BLD_FEATURE_DEVICE
BLD_FEATURE_FLOAT=$BLD_FEATURE_FLOAT
BLD_FEATURE_LEGACY_API=$BLD_FEATURE_LEGACY_API
BLD_FEATURE_VALLOC=$BLD_FEATURE_VALLOC

#
#   All import libraries
#
BLD_IMPORTS="${BLD_IMPORTS}"

!EOF_STANDARD_FEATURES

    createFeatureConfig $FILE

    #
    #   These are used when Makefiles need to absolutely pick a build tool
    #   and need to use BLD_BUILD_EXE
    #
    echo -e "#\n#\tFile extensions \n#" >>$FILE
    for kind in HOST BUILD ; do
        for t in ARCH EXE OBJ PIOBJ CLASS SHLIB SHOBJ ; do
            eval value=\$BLD_${kind}_${t}
            eval value=\"$value\"
            echo BLD_${kind}_${t}=\"$value\" >>$FILE
        done
        [ $BLD_CROSS = 0 ] && break
    done

    if [ $BLD_CROSS = 0 ] ; then
        createCrossConfig $FILE HOST >>$FILE
    else
        cat >>$FILE <<!EOF_CONFIG2d

#
#   Select Native or cross development flags
#
!EOF_CONFIG2d

        if [ "$FILE" = "$CONFIG_H" ] ; then
            echo 'ifeq ($(BUILDING_NATIVE),1)' >>$FILE
        else
            echo -e ' _#if BUILDING_NATIVE' >>$FILE
        fi
        for kind in BUILD HOST 
        do
            createCrossConfig $FILE $kind >>$FILE
            if [ $kind = BUILD ] ; then
                if [ $FILE = $CONFIG_SRC ] ; then
                    echo -e ' _#else' >>$FILE
                else
                    echo -e 'else' >>$FILE
                fi
            fi
        done

        [ "$FILE" = "$CONFIG_H" ] && echo -e 'endif\n' >>$FILE
        [ "$FILE" = "$CONFIG_SRC" ] && echo -e ' _#endif' >>$FILE
    fi
    echo '' >>$FILE

    if [ "$FILE" = "$CONFIG_H" ] ; then
        echo 'EXPORT_OBJECTS ?= 1' >>$FILE
        echo 'ifeq ($(EXPORT_OBJECTS),0)' >>$FILE
        echo '  BLD_OBJ_DIR := .' >>$FILE
        echo 'endif' >>$FILE
        echo '' >>$FILE
    fi
    if [ "$BLD_HOST_OS" = VXWORKS ] ; then
        echo export WIND_HOME=${WIND_HOME} >>$FILE
        echo export WIND_BASE=${WIND_BASE} >>$FILE
        echo export WIND_HOST_TYPE=${WIND_HOST_TYPE} >>$FILE
        echo >>$FILE
    fi
    createConfigFooter "$FILE"
}


createCrossConfig()
{
    local name kind v os path top out f t d

    name=$1
    kind=$2

    eval os=\$BLD_${kind}_OS
    [ $BLD_CROSS = 1 ] && t="\t"

    if [ $BLD_CROSS = 1 ] ; then
        if [ $kind = "HOST" ] ; then
            echo -e "${t}#\n${t}#\tConfiguration for the Target\n${t}#\n"
        else
            echo -e "${t}#\n${t}#\tConfiguration for Build Tools\n${t}#\n"
        fi
    fi

    echo -e "\n${t}#\n${t}#\tO/S and CPU settings\n${t}#"
    eval v=\$BLD_${kind}_OS ;           echo -e "${t}$v=1"
    eval v=\$BLD_${kind}_OS ;           echo -e "${t}BLD_OS=\"$v\""
    eval v=\$BLD_${kind}_CPU_ARCH ;     echo -e "${t}BLD_CPU_ARCH=$v"

    eval v=\$BLD_${kind}_CPU ;          echo -e "${t}BLD_CPU=\"$v\""
    eval v=\$BLD_${kind}_CPU_UPPER ;    echo -e "${t}BLD_CPU_UPPER=\"$v\""
    eval v=\$BLD_${kind}_CPU_MODEL ;    echo -e "${t}BLD_CPU_MODEL=\"$v\""
    eval v=\$BLD_${kind}_DIST ;         echo -e "${t}BLD_DIST=\"$v\""
    eval v=\$BLD_${kind}_DIST_VER ;     echo -e "${t}BLD_DIST_VER=\"$v\""
    eval v=\$BLD_${kind}_UNIX ;         echo -e "${t}BLD_UNIX_LIKE=$v"
    eval v=\$BLD_${kind}_WIN ;          echo -e "${t}BLD_WIN_LIKE=$v"

    echo -e "\n${t}#\n${t}#\tCompiler and linker flags\n${t}#"
    for f in $FLAGS
    do
        eval v=\$BLD_${kind}_${f}FLAGS ;echo -e "${t}BLD_${f}FLAGS=\"$v\""                 
    done

    echo -e "\n${t}#\n${t}#\tFile extensions\n${t}#"

    eval v=\$BLD_${kind}_ARCH  ;    echo -e "${t}BLD_ARCH=\"${v}\""
    eval v=\$BLD_${kind}_EXE   ;    echo -e "${t}BLD_EXE=\"${v}\""
    eval v=\$BLD_${kind}_CLASS ;    echo -e "${t}BLD_CLASS=\"${v}\""
    eval v=\$BLD_${kind}_SHLIB ;    echo -e "${t}BLD_SHLIB=\"${v}\""
    eval v=\$BLD_${kind}_SHOBJ ;    echo -e "${t}BLD_SHOBJ=\"${v}\""

    eval v=\$BLD_${kind}_SHOBJ ;    echo -e "${t}BLD_LIB=\"${v}\""            
    eval v=\$BLD_${kind}_PIOBJ ;    echo -e "${t}BLD_OBJ=\"${v}\""            
    eval v=\$BLD_${kind}_PIOBJ ;    echo -e "${t}BLD_PIOBJ=\"${v}\""            

    echo -e "\n${t}#\n${t}#\tOutput Directories \n${t}#"

    if [ "${BLD_OUT_DIR//\//}" = "${BLD_OUT_DIR}" ] ; then
        echo -e "${t}BLD_OUT_DIR=\"\${BLD_TOP}/${BLD_OUT_DIR}\""
    else
        echo -e "${t}BLD_OUT_DIR=\"${BLD_OUT_DIR}\""
    fi
    echo -e "${t}BLD_TOOLS_DIR=\"\${BLD_TOP}/build/bin\""
    echo
    for d in BIN LIB OBJ INC
    do
        eval dir=\$BLD_${kind}_${d}_DIR
        dir=${dir/\${BLD_OUT_DIR\}\/}
        echo -e "${t}BLD_${d}_NAME=\"${dir}\""
    done

    echo
    eval v=\$BLD_${kind}_BIN_DIR ; echo -e "${t}BLD_BIN_DIR=\"${v}\""
    eval v=\$BLD_${kind}_OBJ_DIR ; echo -e "${t}BLD_OBJ_DIR=\"${v}\""
    eval v=\$BLD_${kind}_LIB_DIR ; echo -e "${t}BLD_LIB_DIR=\"${v}\""
    eval v=\$BLD_${kind}_INC_DIR ; echo -e "${t}BLD_INC_DIR=\"${v}\""

    # if [ "$BLD_PRODUCT" = "ejs" -o "$CFG_HOST_EJS_WITH" = 1 ] ; then
    #     eval v=\$BLD_${kind}_JEM_DIR ; echo -e "${t}BLD_JEM_DIR=\"${v}\""
    # fi

    echo
    eval v=\${BLD_OUT_DIR} ; v=`eval canonPath "${v}"` ; echo -e "${t}BLD_ABS_OUT_DIR=\"${v}\""
    eval v=\${BLD_${kind}_BIN_DIR} ; v=`eval canonPath "${v}"` ; echo -e "${t}BLD_ABS_BIN_DIR=\"${v}\"" ; mkdir -p "${v}"
    eval v=\${BLD_${kind}_LIB_DIR} ; v=`eval canonPath "${v}"` ; echo -e "${t}BLD_ABS_LIB_DIR=\"${v}\"" ; mkdir -p "${v}"
    eval v=\${BLD_${kind}_OBJ_DIR} ; v=`eval canonPath "${v}"` ; echo -e "${t}BLD_ABS_OBJ_DIR=\"${v}\"" ; mkdir -p "${v}"

    # if [ "$BLD_PRODUCT" = "ejs" -o "$CFG_HOST_EJS_WITH" = 1 ] ; then
    #     eval v=\${BLD_${kind}_JEM_DIR} ; v=`eval canonPath "${v}"` ; echo -e "${t}BLD_ABS_JEM_DIR=\"${v}\"" ; mkdir -p "${v}"
    # fi
    eval v=\${BLD_${kind}_INC_DIR} ; v=`eval canonPath "${v}"` ; echo -e "${t}BLD_ABS_INC_DIR=\"${v}\"" ; mkdir -p "${v}"

    if [ $name != $CONFIG_SRC ] ; then
        #
        #   Set PATH, INCLUDE and LIB environment variables
        #
        echo -e "\n${t}#\n${t}#\tEnvironment Variables\n${t}#" 
        if [ "$os" = WIN -o "$os" = WINCE ] ; then
            for var in INCLUDE LIB 
            do
                eval v=\"\$CFG_${kind}_${var}\"
                echo -e "${t}export" $var:=${v}\;\$\(${var}\)    
                echo 
            done
        fi

        top="$BLD_TOP"
        out="$BLD_OUT_DIR"
        if [ $HAS_CYGPATH = 1 ] ; then
            top=`cygpath "${top}"`
            out=`cygpath "${top}/${out}"`
        else
            out="${top}/${out}"
        fi

        if [ "${BLD_HOST_OS}" = "LINUX" ] ; then
            SYS_DIR=":/sbin:/usr/sbin:"
        fi
        eval path=\$CFG_${kind}_PATH
        echo -e "${t}export PATH:=${top}/build/bin:${out}/bin:${out}/lib${SYS_DIR}:${path}:\$(PATH)" 
    fi

    if [ $kind = "HOST" ] ; then
        echo -e "\n${t}#\n${t}#\tFeatures\n${t}#"
        echo -e "${t}BLD_FEATURE_ROMFS=$BLD_FEATURE_ROMFS"
    else
        echo -e "\n${t}#\n${t}#\tBuild Tools Features\n${t}#"
        echo -e "${t}BLD_FEATURE_ROMFS=0"
    fi
    emitComponents $kind
}


emitComponents() {
    local host p dir v emitter present value t

    kind=$1
    [ $BLD_CROSS = 1 ] && t="\t"

    for p in $BLD_COMPONENTS
    do
        p=`upper ${p}`
        eval present="\$CFG_${kind}_${p}_PRESENT"
        eval dir=\$CFG_${p}_DIR

        echo -e "\n${t}#\n${t}#\t${p}\n${t}#" 
        if [ "$present" != "1" ] ; then 
            echo -e "${t}BLD_FEATURE_${p}=0" 
            eval v="\$CFG_${kind}_${p}_PRESENT"
            [ "$v" = "" ] && continue
        else
            echo -e "${t}BLD_FEATURE_${p}=1" 
        fi
        set | egrep "^CFG_${kind}_${p}=|^CFG_${kind}_${p}_" | \
            egrep -v "_EMITTER|_WITH=|_WITH_|_MANDATORY=|_PRESENT=" | while read v
        do
            [ "$v" = "CFG_${kind}_${p}=1" ] && continue
            v=${v%=*}
            eval value=\$$v
            v=${v/CFG/BLD}
            if [ "$value" != "" ] ; then
                v=${v/_${kind}/}
                if [ "$name" != "$CONFIG_H" ] ; then
                    if [ "${v}" = ${v/BUILTIN/} ] ; then
                        value=\"${value}\"
                    fi
                fi
                echo -e "${t}${v#_}=$value"
            fi
        done

        eval emitter="\$CFG_${kind}_${p}_EMITTER"
        if [ "$emitter" != "" ] ; then
            KIND=$kind $emitter
        fi
    done
    echo 

    set | grep "^CFG_WITHOUT" | while read v
    do
        v=${v%=*}
        eval with=\$${v/WITHOUT/${kind}}
        if [ "${with}" = 1 ] ; then
            continue
        fi
        v=${v/CFG/BLD}
        v=${v/WITHOUT/FEATURE}
        echo -e "${t}${v#_}=0"
    done
    emitExtraComponents $kind
}


showBuildConfig() {
    local p where

    [ $quiet = 1 ] && return 0

    echo "  #"
    echo "  # Configuration for this build:"
    echo "  #"
    echo "  #   Configuring Product:   ${BLD_PRODUCT}"
    echo "  #   Base configuration:    build/${BLD_DEFAULTS}.defaults"
    echo "  #   Version:               ${BLD_VERSION}-${BLD_NUMBER}"
    echo "  #   Host system:           ${BLD_HOST_SYSTEM}, ${BLD_HOST_OS}, ${BLD_HOST_CPU}"
    if [ $BLD_CROSS = 1 ] ; then
        echo "  #   Build system:          ${BLD_BUILD_SYSTEM}, ${BLD_BUILD_OS}, ${BLD_BUILD_CPU}"
    fi
    echo "  #   Debug Type:            ${BLD_TYPE}"
    echo "  #   Tune for:              ${BLD_TUNE}"

    if [ $BLD_CROSS = 1 ] ; then
        echo -n "  #   Build components:      "
        i=0
        for p in ${BUILD_COMPONENTS}
        do
            echo -n "$p "
            i=$((i +1))
            if [ $i -gt 8 ] ; then
                i=0
                echo -e -n "\n  #                          "
            fi
        done
        echo
        echo -n "  #   Host components:       "
    else
        echo -n "  #   Components:            "
    fi
    for p in ${HOST_COMPONENTS}
    do
        echo -n "$p "
    done
    echo
    
    echo -e "  #\n  # Output Directories:"
    eval where=${BLD_OUT_DIR}
    printf "  #   %-15s %s\n" "BLD_OUT_DIR" ${where}
    for kind in HOST BUILD ; do
        [ "$kind" = BUILD -a $BLD_CROSS = 0 ] && continue
        for p in INC BIN LIB OBJ
        do
            eval dir=\$BLD_${kind}_${p}_DIR
            eval where=${dir}
            eval where=${where}
            printf "  #   %-15s %s\n" BLD_${kind}_${p} ${where}
        done
    done
    echo -e "  #\n  # Installation Directories (when installed):"
    for p in PRD VER CFG BIN JEM LIB WEB INC
    do
        eval dir=\$BLD_${p}_PREFIX
        if [ "$p" = "JEM" ] ; then
            if [ "$CFG_HOST_EJS_WITH" = 1 ] ; then
                echo -e "  #   ${p}   ${dir}"
            fi
        elif [ "$p" = "WEB" ] ; then
            if [ "$CFG_HOST_APPWEB_WITH" = 1 ] ; then
                echo -e "  #   ${p}   ${dir}"
            fi
        else
            echo -e "  #   ${p}   ${dir}"
        fi
    done
    echo -e "  #"
    echo
}


postGen() {
    local f

    if [ "$BLD_HOST_OS" = "LINUX" -o "$BLD_HOST_OS" = "SOLARIS" -o "$BLD_HOST_OS" = "FREEBSD" \
            -o "$BLD_HOST_OS" = MACOSX ] ; then
        if [ "$BLD_DEBUG" = 0 ] ; then
            if [ "`echo $LD_LIBRARY_PATH | grep bin`" = "" ] ; then
                if [ $quiet = 0 -a ! -f ${BLD_TOP}/.embedthis ] ; then
                    echo -e "  #\n  # If you wish to debug natively in the build tree, you will need to set the"
                    if [ "$BLD_HOST_OS" = MACOSX ] ; then
                        echo -e "  # DYLD_LIBRARY_PATH environment variable to include the \"lib\" directory. Try:"
                        echo -e "  #\n  #    export DYLD_LIBRARY_PATH=`pwd`/lib"
                    else
                        echo -e "  # LD_LIBRARY_PATH environment variable to include the \"lib\" directory. Try:"
                        echo -e "  #\n  #    export LD_LIBRARY_PATH=`pwd`/lib"
                    fi
                    echo -e "  #\n  # See \"INSTALL.TXT\" for details."
                    echo -e "  #"
                fi
            fi
        fi
    fi
    for f in bld config.guess config.sub edep priv
    do
        chmod +x "${BLD_TOP}/build/bin/$f" >/dev/null 2>&1
    done

    #
    #   Touch all headers to force a (somewhat) clean build
    #
    echo -e "  # Generate stub make dependencies ..."
    BLD_TOP= build/bin/makedep
    touch "${CONFIG_H}"
    touch ${BLD_OUT_DIR}/.needDepend

}


doImports() {
    local f SHOBJ ext base

    SHOBJ=$BLD_HOST_SHOBJ

    for f in $BLD_IMPORTS ; do
        # Expand relative paths in BLD_IMPORTS using ${BLD_TOP}
        eval f="${f}"
        ext=".${f##*.}"
        base="${f##*/}"
        if [ ! -f "${f}" ] ; then
            echo "Can't find ${f} to import"
            exit 255
        elif [ "${ext}" = ".h" ] ; then
            rm -f $BLD_OUT_DIR/inc/$base
            cp $f $BLD_OUT_DIR/inc
        elif [ "${ext}" = "${SHOBJ}" ] ; then
            QUIET=1 ${BLD_TOOLS_DIR}/getlib $f
        elif [ "${ext}" = ".mod" -o "${ext}" = ".a" ] ; then
            if [ "$BLD_OS" = WIN ] ; then
                cp $f $BLD_OUT_DIR/bin
            else
                cp $f $BLD_OUT_DIR/lib
            fi
        else
            cp $f $BLD_OUT_DIR/bin
        fi
    done
}


#
#   Output the --help usage message
#
emitHelp()
{
    cat <<!EOF_HELP

usage: configure [OPTIONS]...

System Type Options:
  --build=BUILD            Configure for building on BUILD [Default is guessed].
                             Format: cpu-vendor-os. Example: i386-apple-macosx.
  --host=HOST              Cross-compile for ${BLD_PRODUCT} to run on HOST
                             [Default is set to BUILD]. Format: cpu-vendor-os. 
                             Can also use --target as an alias for --host. 
                             WARNING: WindRiver calls the build system the host
                             system, and they call the host system, the target.
  --device=DEVICE          Device or emulator. On CE set to PocketPC2003 or 
                             Smartphone2003.
  --32                     Select a 32-bit build
  --64                     Select a 64-bit build

General Options:
  --help                   Display this message.
  --char=N                 Set the character size for Unicode characters.
  --cygwin                 Use the cygwin compiler in preference if a Microsoft
                           Visual Studio compiler is also installed.
  --diab                   Use the diab compiler for VxWorks.
  --name=NAME              Set the full product name (BLD_NAME define).
  --out=PATH               Directory for output objects, binaries and files.
  --product=NAME           Set the one word (no spaces) name of the product.
  --quiet, -q, --silent    Run quietly.
  --search path            Search this path first for components.
  --type=BUILD             Set the build type to (DEBUG|RELEASE).
                           Can also use --debug or --release.
  --tune=KIND              Set the tune kind to (SIZE|BALANCED|SPEED).

Features Selection:
  --disable-FEATURE        Do not include the FEATURE.
  --enable-FEATURE         Include the FEATURE.

  --enable-all             Include all possible features and modules.
  --disable-all            Include as little as possible.

  --enable-assert          Build with assert checking.
  --enable-legacy          Build with legacy API support for backwards 
                             compatibility.
  --enable-rom             Build with the ability to load files from ROM.
!EOF_HELP

    help

    cat <<!EOF_HELP3
Components are searched for using the PATH environment variable, the --host-search,
  --build-search and the paths defined in build/search.config.

Environment Variables:

  Some important environment variables that may be defined to control
  building for the destination host. Note that environment variables will have
  no effect when passed into makefiles, they must be passed via configure.

  AR                       Archiver command
  CC                       C/C++ compiler command.
  DOXYGEN                  Doxygen documentation generation command.
  LD                       Linker command.
  MT                       The windows manifest command.
  NM                       The nm command.
  RANLIB                   The ranlib command.
  STRIP                    The strip command.

  CFLAGS                   Compiler flags for compilation
  DFLAGS                   Compiler preprocessor defines for compilation
  IFLAGS                   Preprocessor and include flags.
  LDFLAGS                  Linker flags. For example: use -L<dir> to specify
                           where to find libraries in non-standard directories.

  Variables for native compilation of tools needed by the build process:

  BUILD_CC                 C/C++ compiler to use for native /local compilation
                           and linking on the build system.
  BUILD_LD                 Linker to use for native /local linking on the
                           build system.
  BUILD_MT                 Windows manifest command.

  Some components also listen for environment variables to set IFLAGS, LIBS and
  LIBPATHS. For example:  

    PHP_IFLAGS="-I/php" PHP_LIBS=libxml ./configure

Installation Directory Options:
  When doing a "make install" the --prefix and --binDir are used. The other
  directory options are not yet fully supported.

  --prefix=PATH            Set the default base installation directory for 
                             the product. Default is /usr/lib/${BLD_PRODUCT} on 
                             Unix, /Program/Files/${BLD_NAME} on Windows.
  --datadir                Directory for generic data files. Typically under
                             /usr/share on Unix systems.
  --docdir=PATH            Set the directory for the documentation.
  --incdir=PATH            Set the directory for include headers.
  --localstatedir          Set the directory for modifiable files. Web documents
                              are stored here. Typically under /var on Unix. 
  --logdir=PATH            Set the directory for log files.
  --mandir=PATH            Set the directory for the manual pages (UNIX only).
  --samdir=PATH            Set the directory for the samples.
  --srcdir=PATH            Set the directory for source files.
  --sysconfdir=PATH        Set the directory for read-only data for the product. 
                             Default is /etc/${BLD_PRODUCT} on Unix.
  --webdir=PATH            Set the directory for web files

  Standard options that are ignored but provided for compatibility with autoconf.
    --exec-prefix, --sbindir, --sharedstatedir, --infodir, --program-prefix,
    --program-suffix, --program-transform-name

!EOF_HELP3
}


lower() {
    echo $* | tr '[:upper:]' '[:lower:]'
}


upper() {
    echo $* | tr '[:lower:]' '[:upper:]'
}


# compath() {
#     local upperName
#     upperName=`upper $*`
#     eval echo \$CFG_${KIND}_${upperName}
# }

isdefined() {
    local upperName
    upperName=`upper $*`
    eval value=\$CFG_${KIND}_${upperName}
    if [ "$value" != "" ] ; then 
        return 0
    else 
        return 1
    fi
}

###############################################################################
#
#   Main
#
quiet=0
verbose=0
CMD_LINE="$@"

. build/configure.*

checkSetup

ENV_BUILD_SEARCH_PATH=$BUILD_SEARCH_PATH
ENV_HOST_SEARCH_PATH=$HOST_SEARCH_PATH

#
#   Command args are parsed in 2 phases. First parse the args that are critical for 
#   determining the system and cross-build configuration. After that, the build default
#   files are loaded and the rest of the args are parsed.
#
while [ "${1#--}" != "$1" -o "${1#-}" != "$1" ] ; do

    ARG="${1#*=}"
    [ "$ARG" = "$1" ] && ARG=

    SW=`echo ${1#--} | tr '[A-Z]' '[a-z]'`
    case ${SW} in
    32)
        BLD_HOST_SYSTEM=`bash build/bin/config.guess`
        BLD_BUILD_SYSTEM=$BLD_HOST_SYSTEM
        BLD_HOST_SYSTEM=i686-${BLD_HOST_SYSTEM#*-}
        BLD_BUILD_SYSTEM=i686-${BLD_BUILD_SYSTEM#*-}
        ;;
    64)
        BLD_HOST_SYSTEM=`bash build/bin/config.guess`
        BLD_BUILD_SYSTEM=$BLD_HOST_SYSTEM
        BLD_HOST_SYSTEM=x86_64-${BLD_HOST_SYSTEM#*-}
        BLD_BUILD_SYSTEM=x86_64-${BLD_BUILD_SYSTEM#*-}
        ;;
    build=*|build)
        if [ "${ARG}" = "--host" ] ; then
            shift
            ARG="${1#*=}"
        fi
        system=`bash build/bin/config.sub "${ARG}"`
        if [ $? != 0 -o "$system" = "" ] ; then
            echo "configure: Can't recognize build system: $ARG"  1>&2
            exit 2
        fi
        BLD_BUILD_SYSTEM=${system}
        ;;
    build-search=*)
        BUILD_SEARCH_PATH="${ARG}"
        ;;
    cygwin)
        BLD_CC_CYGWIN=1
        ;;
    defaults=*)
        BLD_DEFAULTS="${ARG}"
        if [ ! -f "build/${BLD_DEFAULTS}.defaults" ] ; then
            echo "configure: Can't find build/${BLD_DEFAULTS}.defaults" 1>&2
            exit 2
        fi
        ;;
    device=*)
        BLD_FEATURE_DEVICE="${ARG}"
        ;;
    diab)
        BLD_CC_DIAB=1
        ;;
    help|-\?)
        emitHelp
        exit 0
        ;;
    host=*|target=*|host|target)
        ARG="${1#*=}"
        if [ "${ARG}" = "--host" ] ; then
            shift
            ARG="${1#*=}"
        fi
        system=`bash build/bin/config.sub "${ARG}"`
        if [ $? != 0 -o "$system" = "" ] ; then
            echo "configure: Can't recognize host system configuration: $ARG"  1>&2
            exit 2
        fi
        BLD_HOST_SYSTEM=${system}
        ;;
    product=*)
        BLD_PRODUCT="${ARG}"
        args="$args $1"
        ;;
    quiet|-q)
        quiet=1
        ;;
    release)
        BLD_DEFAULTS=release
        ;;
    host-search=*)
        HOST_SEARCH_PATH="${ARG}"
        ;;
    verbose|-v)
        verbose=1
        ;;
    version|-V)
        echo $CONFIGURE_VERSION
        exit 0
        ;;
    *)  
        args="$args $1"
        ;;
    esac
    shift
done
set -- $args

if [ $quiet = 0 ] ; then
    echo -e "\n  #\n  # Running Embedthis Configure $CONFIGURE_VERSION"
    echo -e "  # "
    echo -e "  # Initializing configure ..."
fi

#
#   Set the system configuration
#
[ $quiet = 0 ] && echo -e "  # Sleuth system configuration ..."
setSystemConfiguration
setExtensions

#
#   Build up the search path
#
[ $quiet = 0 ] && echo -e "  # Prepare search path ..."
. build/search.config
BUILD_SEARCH_PATH=`convertSearchPath "$BUILD_SEARCH_PATH"`:$PATH
HOST_SEARCH_PATH=`convertSearchPath "$HOST_SEARCH_PATH"`:$PATH
if [ "$ENV_BUILD_SEARCH_PATH" != "" ] ; then
    BUILD_SEARCH_PATH=`convertSearchPath "$ENV_BUILD_SEARCH_PATH"`:"$BUILD_SEARCH_PATH"
fi
if [ "$ENV_HOST_SEARCH_PATH" != "" ] ; then
    HOST_SEARCH_PATH=`convertSearchPath "$ENV_HOST_SEARCH_PATH"`:"$HOST_SEARCH_PATH"
fi

#
#   Read the base configuration 
#
[ $quiet = 0 ] && echo -e "  # Reading standard product configuration build/product.config ..."
. build/$BLD_DEFAULTS.defaults

#
#   Parse the rest of the command line args. See above for the pre-parsed args
#
while [ "${1#--}" != "$1" ] ; do

    ARG="${1#*=}"
    [ "$ARG" = "$1" ] && ARG=

    SW=`echo ${1#--} | tr '[A-Z]' '[a-z]'`
    case ${SW} in
    buildNumber=*)
        BLD_NUMBER="${ARG}"
        ;;
    char=*)
        BLD_CHAR_LEN="${ARG}"
        if [ "$BLD_CHAR_LEN" != 1 -a "$BLD_CHAR_LEN" != 2 -a "$BLD_CHAR_LEN" != 4 ] ; then
            echo "Invalid char size (Valid sizes: 1, 2 or 4)"
            exit 255
        fi
        if [ "$BLD_CHAR_LEN" = 2 ] ; then
            BLD_CHAR=short
        elif [ "$BLD_CHAR_LEN" = 4 ] ; then
            BLD_CHAR=int32
        else
            BLD_CHAR=char
        fi
        ;;
    debug)
        BLD_TYPE=DEBUG
        BLD_DEBUG=1
        ;;
    disable-assert)
        BLD_FEATURE_ASSERT=0
        ;;
    disable-float|disable-floating-point)
        BLD_FEATURE_FLOAT=0
        ;;
    disable-legacy|disable-legacy-api)
        BLD_FEATURE_LEGACY_API=0
        ;;
    disable-mmu)
        BLD_MMU_OVERRIDE=0
        ;;
    disable-valloc)
        BLD_FEATURE_VALLOC=0
        ;;
    disable-rom-fs|disable-rom|disable-romfs)
        BLD_FEATURE_ROMFS=0
        ;;
    enable-assert)
        BLD_FEATURE_ASSERT=1
        ;;
    enable-float|enable-floating-point)
        BLD_FEATURE_FLOAT=1
        ;;
    enable-legacy|enable-legacy-api|legacy)
        BLD_FEATURE_LEGACY_API=1
        ;;
    enable-valloc)
        BLD_FEATURE_VALLOC=1
        ;;
    enable-mmu)
        BLD_MMU_OVERRIDE=1
        ;;
    enable-rom-fs|enable-rom|enable-romfs|rom)
        BLD_FEATURE_ROMFS=1
        ;;
    docdir=*)
        BLD_DOC_PREFIX=`canonPath "${ARG}"`
        ;;
    datadir=*)
        BLD_DOC_PREFIX=`canonPath "${ARG}"/${BLD_PRODUCT}`
        BLD_SAM_PREFIX=`canonPath "${ARG}"/${BLD_PRODUCT}/samples`
        ;;
    help|-\?)
        emitHelp
        exit 0
        ;;
    incdir=*|includedir=*|oldincludedir=*)
        BLD_INC_PREFIX=`canonPath "${ARG}"`
        ;;
    localstatedir=*)
        BLD_WEB_PREFIX=`canonPath "${ARG}"/www/${BLD_PRODUCT}-default`
        ;;
    logdir=*)
        BLD_LOG_PREFIX=`canonPath "${ARG}"`
        ;;
    mandir=*)
        BLD_MAN_PREFIX=`canonPath "${ARG}"`
        ;;
    name=*)
        BLD_NAME="${ARG}"
        ;;
    out=*)
        BLD_OUT_DIR=`canonPath "${ARG}"`
        mkdir -p $BLD_OUT_DIR
        rm -rf out
        ln -s $BLD_OUT_DIR out
        ;;
    prefix=*)
        BLD_BIN_PREFIX=`remapDir "$BLD_BIN_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_CFG_PREFIX=`remapDir "$BLD_CFG_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_DOC_PREFIX=`remapDir "$BLD_DOC_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_INC_PREFIX=`remapDir "$BLD_INC_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_JEM_PREFIX=`remapDir "$BLD_JEM_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_LIB_PREFIX=`remapDir "$BLD_LIB_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_MAN_PREFIX=`remapDir "$BLD_MAN_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_PRD_PREFIX=`remapDir "$BLD_PRD_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_ROOT_PREFIX=`remapDir "$BLD_ROOT_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_SAM_PREFIX=`remapDir "$BLD_SAM_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_SPL_PREFIX=`remapDir "$BLD_SPL_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_SRC_PREFIX=`remapDir "$BLD_SRC_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_VER_PREFIX=`remapDir "$BLD_VER_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_WEB_PREFIX=`remapDir "$BLD_WEB_PREFIX" "$BLD_PREFIX" "$ARG"`
        BLD_PREFIX=`canonPath "${ARG}"`
        ;;
    product=*)
        BLD_PRODUCT="${ARG}"
        ;;
    release)
        BLD_TYPE=RELEASE
        ;;
    setVersion=*)
        BLD_VERSION="${ARG}"
        ;;
    silent)
        quiet=1
        ;;
    samdir=*)
        BLD_SAM_PREFIX=`canonPath "${ARG}"`
        ;;
    srcdir=*)
        BLD_SRC_PREFIX=`canonPath "${ARG}"`
        ;;
    sysconfdir=*)
        BLD_CFG_PREFIX=`remapDir "$BLD_CFG_PREFIX" "$BLD_SYSCONF_PREFIX" "$ARG"`
        BLD_SYSCONF_PREFIX=`canonPath "${ARG}"`
        ;;
    tune=*)
        BLD_TUNE=`upper ${ARG}`
        [ "$BLD_TUNE" = "SIZE" ] && BLD_TUNE=MPR_TUNE_SIZE
        [ "$BLD_TUNE" = "BALANCED" ] && BLD_TUNE=MPR_TUNE_BALANCED
        [ "$BLD_TUNE" = "SPEED" ] && BLD_TUNE=MPR_TUNE_SPEED
        if [ "$BLD_TUNE" != "MPR_TUNE_SIZE" -a "$BLD_TUNE" != "MPR_TUNE_BALANCED" \
                -a "$BLD_TUNE" != "MPR_TUNE_SPEED" ] ; then
            echo "configure: unknown --tune option: $ARG" >&2
            exit 2
        fi
        ;;
    type=*)
        BLD_TYPE="${ARG}"
        [ "$BLD_TYPE" = "debug" ] && BLD_TYPE=DEBUG
        [ "$BLD_TYPE" = "release" ] && BLD_TYPE=RELEASE
        if [ "$BLD_TYPE" != "DEBUG" -a "$BLD_TYPE" != "RELEASE" ] ; then
            echo "configure: unknown --type option: $ARG" >&2
            exit 2
        fi
        if [ "$BLD_TYPE" = "DEBUG" ] ; then
            BLD_DEBUG=1
        else
            BLD_DEBUG=0
        fi
        ;;
    webdir=*)
        BLD_WEB_PREFIX=`canonPath "${ARG}"`
        ;;
    with-*)
        name="${1#--*-}"
        if [ "${name#host-}" != "$name" ] ; then
            with --host "${name#host-}"
        elif [ "${name#build-}" != "$name" ] ; then
            with --build "${name#build-}"
        elif [ "${name#both-}" != "$name" ] ; then
            with "${name#both-}"
        else
            with --host "${1#--*-}"
        fi
        ;;
    without-*)
        without "${1#--*-}"
        ;;

    #
    #   Ignored but provided for compatibility with autoconf
    #
    bindir=*|libdir=*|libexecdir=*|moddir=*)
        ;;
    disable-nls|enable-nls)
        ;;
    exec-prefix=*|sbindir=*|sharedstatedir=*|localstatedir=*)
        ;;
    infodir=*|program-prefix=*|program-suffix=*|program-transform-name=*)
        ;;

    *)  
        parseArg "${1}"
        if [ $? != 0 ] ; then
            echo "configure: unknown option: $1" >&2
            exit 255
        fi
        ;;
    esac
    shift
done

if [ "$1" != "" ] ; then
    echo "configure: unknown option: $1" >&2
    exit 255
fi

applyDependencies
parseEnvVars
findComponents
manageFeatures
createBuildConfig
postGen
showBuildConfig
doImports

exit 0

