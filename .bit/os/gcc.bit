/*
    gcc.bit -- GCC Build Settings
 */

Bit.load({
    defaults: {
        '+compiler': [ '-fPIC', '-Wall', ],
        '+defines':  [ '-DPIC', '-D_REENTRANT', '-DCPU=' + '${ARCH}'.toUpper() ],
        '+libraries':[ 'pthread', 'm' ],

        scripts: {
            '+preblend': "
                let defaults = bit.defaults
                let arch = bit.platform.arch

                if (bit.settings.preprocess) {
                    defaults.compiler.push('-E')
                }
                if (bit.settings.profile == 'debug') {
                    defaults.compiler.push('-g')
                    defaults.linker.push('-g')
                } else if (bit.settings.tune == 'size') {
                    defaults.compiler.push('-Os')
                } else {
                    defaults.compiler.push('-O3')
                }
                if (bit.settings.warnUnused) {
                    defaults.compiler.push('-Wno-unused-result')
                }
                if (bit.settings.warn64to32) {
                    defaults.compiler.push('-Wshorten-64-to-32')
                }
                if (bit.settings.hasDynLoad) {
                    defaults.linker.push('-ldl')
                }
                if (arch.startsWith('arm')) {
                    defaults.compiler.push('-mno-sched-prolog')

                } else if (arch.startsWith('ppc')) {
                    defaults.defines.push('-D_GNU_TOOL')
                }
                let tunesw = bit.settings.hasMtune ? '-mtune' : '-mcpu'
                defaults.compiler.push(tunesw + '=' + arch)
            ",
        },
    },
    rules: {
        'c->o': '${packs.compiler.path} -c -o ${OUT} ${CFLAGS} ${target.defines} ${INCLUDES} ${PREPROCESS} ${IN}',
        'lib':  '${packs.compiler.path} -shared -o ${OUT} ${target.linker} ${IN} ${LIBS}'
        'exe':  '${packs.compiler.path} -o ${OUT} ${target.linker} -L${dir.lib} ${IN} ${LIBS}'
        'gui':  '${packs.compiler.path} -o ${OUT} ${target.linker} -L${dir.lib} ${IN} ${LIBS}'
    },
})
