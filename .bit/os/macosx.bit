/*
    macosx.bit -- MAC OS X Settings
 */

Bit.load({
    blend: [    
        'posix.bit',
    ],

    ext: {
        'shlib': 'dylib',
        'shobj': 'dylib',
    },

    defaults: {
        '+compiler': [ '-fPIC', '-Wall' ],
        '+defines':  [ '-DPIC' ],
        '+libraries':[ 'pthread', 'm' ],
        '+linker':   [
            '-Wl,-rpath,@executable_path/../lib',
            '-Wl,-rpath,@executable_path/',
            '-Wl,-rpath,@loader_path/',
        ],
        scripts: {
            '+preblend': "
                let defaults = bit.defaults
                let arch = bit.platform.arch
                if (bit.settings.preprocess) {
                    defaults.compiler.push('-E')
                }
                if (bit.settings.profile == 'debug') {
                    defaults.compiler += ['-g']
                } else if (bit.settings.tune == 'size') {
                    defaults.compiler += ['-Os']
                } else {
                    defaults.compiler += ['-fast']
                }
                defaults.linker.push('-L' + bit.dir.lib)
                if (bit.settings.profile == 'debug') {
                    defaults.linker.push('-g')
                }
                if (bit.settings.warnUnused) {
                    defaults.compiler.push('-Wno-unused-result')
                }
                if (bit.settings.warn64to32) {
                    defaults.compiler.push('-Wshorten-64-to-32')
                }
                if (bit.settings.hasDynLoad) {
                    defaults.linker.push('-ldl')
                }
                defaults.defines.push('-DCPU=' + bit.platform.arch.toUpper())
            ",
        },
    },

    rules: {
        'c->o': '${packs.compiler.path} -c -o ${OUT} -arch ${ARCH} ${CFLAGS} ${target.defines} ${INCLUDES} ${PREPROCESS} ${IN}',
        'lib':  '${packs.compiler.path} -dynamiclib -o ${OUT} -arch ${ARCH} ${target.linker} -install_name @rpath/${LIBNAME} ${IN} ${LIBS}'
        'exe':  '${packs.compiler.path} -o ${OUT} -arch ${ARCH} ${target.linker} -L${dir.lib} ${IN} ${LIBS}'
        'gui':  '${packs.compiler.path} -o ${OUT} -arch ${ARCH} ${target.linker} -L${dir.lib} ${IN} ${LIBS}'
    },
})
