/*
    compiler.bit - Compile package for Bit
 */
var cc: Path

if (bit.platform.like == 'posix') {
    cc = probe('cc', {fullpath: true})
    Bit.load({packs: { compiler: { path: cc }}})

    let settings = {}
    settings.hasDoubleBraces = compile(cc, '', '#include <stdarg.h>\nva_list d = {{0}};')
    //  MOB - if env CFLAGS has -mtune=xxx then it should be used instead
    settings.hasMtune = compile(cc, '-mtune=generic', 'int main() { return 0;}')
    settings.hasStackProtector = compile(cc, '-fno-stack-protector', 'int main() { return 0;}')
    settings.hasSync = compile(cc, '', '#include <stdio.h>\nint main() { __sync_synchronize(); return 0; }')
    settings.warnUnused = compile(cc, '-Wno-unused-result',
        '#include <stdio.h>\n#include <stdlib.h>\nint main() { realloc(0, 1024); return 0; }')
    settings.warn64to32 = compile(cc, '-Wshorten-64-to-32', 'int main() { return 0;}')

    if (bit.platform.os != 'vxworks') {
        settings.hasDynLoad = compile(cc, '',
            '#include <stdio.h>\n#include <dlfcn.h>\nint main() { dlopen(\"test.so\", 0); return 0; }')
        settings.hasLibEdit = compile(cc, '',
            '#include <histedit.h>\nint main() { history_init(); return 0; }')
        settings.hasMmu = compile(cc, '',
            '#include <stdio.h>\n#include <unistd.h>\nint main() { fork(); return 0; }')
        settings.hasPam = compile(cc, '',
            'extern pam_start(); \nint main() { void *x = pam_start; return 0; }')
        settings.hasSyncCas = compile(cc, '',
            '#include <stdio.h>\nint main() { void *ptr; __sync_bool_compare_and_swap(&ptr, ptr, ptr); return 0; }')
        settings.hasUnnamedUnions = compile(cc, '', 
            '#include <stdio.h>\nint main() { struct test { union { int x; int y; };}; return 0; }')
    }
    Bit.load({ settings: settings })

} else if (bit.platform.like == 'windows') {
    let search = []
    for each (drive in (FileSystem.drives() - ['A', 'B'])) {
        search += Path(drive + ':/').glob('/Program Files*/Microsoft Visual Studio*/VC/Bin')
    }
    /*
    if (bit.platform.arch == 'x86_64') {
        if (CROSS) {
            search.map(function(e) Path(e).join('x86_64'))
        } else {
            search.map(function(e) Path(e).join('amd64'))
        }
    } else {
        search.map(function(e) Path(e).join('amd64'))
    }
    */

    cc = probe('cl.exe', {fullpath: true, search: search.sort().reverse()})
    Bit.load({packs: { compiler: { path: cc }}})

    let vsdir = cc.dirname.dirname.dirname
    bit.env.PATH += [
        vsdir.join('VC/Bin'),
        vsdir.join('Common7/IDE'),
        vsdir.join('Common7/Tools'),
        vsdir.join('SDK/v3.5/bin'),
        vsdir.join('VC/VCPackages'),
    ]
    bit.env.INCLUDE += [
        vsdir.join('VC/INCLUDE')
    ]
    bit.env.LIB += [
        Path(vsdir.join('VC/lib').toString().replace(/x86_amd64/, 'amd64'))
    ]
}

/*
    Test compile to determine supported compiler switches
 */
function compile(cc: Path, command: String, contents: String = null): Boolean {
    //  MOB - what dir for temp file
    let file
    if (contents) {
        file = Path('/tmp/bit-' + App.pid + '.c')
        if (bit.platform.os == 'VXWORKS') {
            contents = '#define _VSB_CONFIG_FILE "vsbConfig.h\n' + contents
        }
        file.write(contents + '\n')
        command += ' -c ' + file
    }
    command = '' + cc + ' -Werror -Wall ' + command
    let cmd
    try {
        cmd = Cmd(command)
        if (cmd.status != 0) {
            App.log.debug(3, "Test " + command)
            App.log.debug(3, "Compiler package test compile result: " + cmd.error)
        }
    } finally {
        if (file) {
            file.remove()
            file.basename.replaceExt('o').remove()
        }
    }
    return cmd.status == 0
}

