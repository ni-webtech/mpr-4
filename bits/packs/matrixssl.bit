/*
    matrixssl.bit -- OpenSSL package search
 */

if (bit.packs.ssl && bit.packs.ssl.enable == false) {
    throw "SSL has been disabled"
}

let path = bit.packs.matrixssl.path
if (!path) {
    let vers = bit.dir.packs.join('matrixssl').glob('matrixssl-1*').sort().reverse()
    let vers = bit.dir.packs.join('matrixssl').glob('matrixssl-3*').sort().reverse()
    if (!vers.length || vers.length == 0) {
        throw 'Can\'t find matrixssl'
    }
    path = vers[0]
}

let cfg = {}
if (bit.platform.os == 'win') {
    let search = [path.join('src/Release') ]
    let lib = probe('libmatrixssl.dll', {fullpath: true, search: search}).absolute
    let dir = lib.parent.parent
    search = [path]
    let incdir = probe('matrixSsl.h', {search: search}).absolute
    cfg = {
        dir: dir,
        path: lib,
        defines: [ '-DMATRIX_USE_FILE_SYSTEM' ],
        includes: [ incdir ],
        libraries: [ 'libmatrixssl.a' ],
        linker: [ '-libpath:' + lib.parent ],
        imports: [ lib ]
    }

} else if (bit.platform.os == 'macosx') {
    let search = [path]
    let lib = probe('libmatrixssl.dylib', {fullpath: true, search: search}).absolute
    let dir = lib.parent
    let search = [path.join('matrixssl')]
    let incdir = probe('matrixsslApi.h', {search: search}).absolute
    cfg = {
        dir: dir,
        path: lib,
        defines: [ '-DPOSIX', '-DMATRIX_USE_FILE_SYSTEM' ],
        includes: [ incdir, incdir.parent ],
        libraries: [ 'libmatrixssl.dylib' ],
        linker: [ '-L' + lib.parent ],
        imports: [ lib ]
    }

} else {
    let search = [path.join('src')]
    let lib = probe('libmatrixssl.so', {fullpath: true, search: search}).absolute
    let dir = lib.parent.parent
    search = [path]
    let incdir = probe('matrixSsl.h', {search: search}).absolute
    cfg = {
        dir: dir,
        path: lib,
        defines: [ '-DPOSIX', '-DMATRIX_USE_FILE_SYSTEM' ],
        includes: [ incdir ],
        libraries: [ 'libmatrixssl.so' ],
        linker: [ '-L' + lib.parent ],
        imports: [ lib],
    }
}

let template = {packs: { matrixssl: cfg}}
Bit.load(template)
